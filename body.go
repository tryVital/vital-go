// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tryVital/vital-go/internal"
	time "time"
)

type BodyGetRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type BodyGetRawRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type BodyV2InDb struct {
	Timestamp      time.Time              `json:"timestamp" url:"timestamp"`
	Data           map[string]interface{} `json:"data" url:"data"`
	ProviderId     string                 `json:"provider_id" url:"provider_id"`
	UserId         string                 `json:"user_id" url:"user_id"`
	SourceId       int                    `json:"source_id" url:"source_id"`
	PriorityId     *int                   `json:"priority_id,omitempty" url:"priority_id,omitempty"`
	Id             string                 `json:"id" url:"id"`
	Source         *ClientFacingProvider  `json:"source,omitempty" url:"source,omitempty"`
	Priority       *int                   `json:"priority,omitempty" url:"priority,omitempty"`
	SourceDeviceId *string                `json:"source_device_id,omitempty" url:"source_device_id,omitempty"`
	CreatedAt      *time.Time             `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt      *time.Time             `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BodyV2InDb) GetTimestamp() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.Timestamp
}

func (b *BodyV2InDb) GetData() map[string]interface{} {
	if b == nil {
		return nil
	}
	return b.Data
}

func (b *BodyV2InDb) GetProviderId() string {
	if b == nil {
		return ""
	}
	return b.ProviderId
}

func (b *BodyV2InDb) GetUserId() string {
	if b == nil {
		return ""
	}
	return b.UserId
}

func (b *BodyV2InDb) GetSourceId() int {
	if b == nil {
		return 0
	}
	return b.SourceId
}

func (b *BodyV2InDb) GetPriorityId() *int {
	if b == nil {
		return nil
	}
	return b.PriorityId
}

func (b *BodyV2InDb) GetId() string {
	if b == nil {
		return ""
	}
	return b.Id
}

func (b *BodyV2InDb) GetSource() *ClientFacingProvider {
	if b == nil {
		return nil
	}
	return b.Source
}

func (b *BodyV2InDb) GetPriority() *int {
	if b == nil {
		return nil
	}
	return b.Priority
}

func (b *BodyV2InDb) GetSourceDeviceId() *string {
	if b == nil {
		return nil
	}
	return b.SourceDeviceId
}

func (b *BodyV2InDb) GetCreatedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.CreatedAt
}

func (b *BodyV2InDb) GetUpdatedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.UpdatedAt
}

func (b *BodyV2InDb) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BodyV2InDb) UnmarshalJSON(data []byte) error {
	type embed BodyV2InDb
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BodyV2InDb(unmarshaler.embed)
	b.Timestamp = unmarshaler.Timestamp.Time()
	b.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	b.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BodyV2InDb) MarshalJSON() ([]byte, error) {
	type embed BodyV2InDb
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*b),
		Timestamp: internal.NewDateTime(b.Timestamp),
		CreatedAt: internal.NewOptionalDateTime(b.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BodyV2InDb) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type ClientBodyResponse struct {
	Body []*ClientFacingBody `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientBodyResponse) GetBody() []*ClientFacingBody {
	if c == nil {
		return nil
	}
	return c.Body
}

func (c *ClientBodyResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientBodyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientBodyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientBodyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientBodyResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBody struct {
	Id string `json:"id" url:"id"`
	// User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
	UserId string `json:"user_id" url:"user_id"`
	// Date of the specified record, formatted as ISO8601 datetime string in UTC 00:00. Deprecated in favour of calendar_date.
	Date time.Time `json:"date" url:"date"`
	// Date of the summary in the YYYY-mm-dd format.
	CalendarDate string `json:"calendar_date" url:"calendar_date"`
	// Weight in kg::kg
	Weight *float64 `json:"weight,omitempty" url:"weight,omitempty"`
	// Total body fat percentage::perc
	Fat *float64 `json:"fat,omitempty" url:"fat,omitempty"`
	// Water percentage in the body::perc
	WaterPercentage *float64 `json:"water_percentage,omitempty" url:"water_percentage,omitempty"`
	// Muscle mass percentage in the body::perc
	MuscleMassPercentage *float64 `json:"muscle_mass_percentage,omitempty" url:"muscle_mass_percentage,omitempty"`
	// Visceral fat index::scalar
	VisceralFatIndex *float64 `json:"visceral_fat_index,omitempty" url:"visceral_fat_index,omitempty"`
	// Bone mass percentage in the body::perc
	BoneMassPercentage           *float64            `json:"bone_mass_percentage,omitempty" url:"bone_mass_percentage,omitempty"`
	BodyMassIndex                *float64            `json:"body_mass_index,omitempty" url:"body_mass_index,omitempty"`
	LeanBodyMassKilogram         *float64            `json:"lean_body_mass_kilogram,omitempty" url:"lean_body_mass_kilogram,omitempty"`
	WaistCircumferenceCentimeter *float64            `json:"waist_circumference_centimeter,omitempty" url:"waist_circumference_centimeter,omitempty"`
	Source                       *ClientFacingSource `json:"source" url:"source"`
	CreatedAt                    time.Time           `json:"created_at" url:"created_at"`
	UpdatedAt                    time.Time           `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBody) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ClientFacingBody) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBody) GetDate() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Date
}

func (c *ClientFacingBody) GetCalendarDate() string {
	if c == nil {
		return ""
	}
	return c.CalendarDate
}

func (c *ClientFacingBody) GetWeight() *float64 {
	if c == nil {
		return nil
	}
	return c.Weight
}

func (c *ClientFacingBody) GetFat() *float64 {
	if c == nil {
		return nil
	}
	return c.Fat
}

func (c *ClientFacingBody) GetWaterPercentage() *float64 {
	if c == nil {
		return nil
	}
	return c.WaterPercentage
}

func (c *ClientFacingBody) GetMuscleMassPercentage() *float64 {
	if c == nil {
		return nil
	}
	return c.MuscleMassPercentage
}

func (c *ClientFacingBody) GetVisceralFatIndex() *float64 {
	if c == nil {
		return nil
	}
	return c.VisceralFatIndex
}

func (c *ClientFacingBody) GetBoneMassPercentage() *float64 {
	if c == nil {
		return nil
	}
	return c.BoneMassPercentage
}

func (c *ClientFacingBody) GetBodyMassIndex() *float64 {
	if c == nil {
		return nil
	}
	return c.BodyMassIndex
}

func (c *ClientFacingBody) GetLeanBodyMassKilogram() *float64 {
	if c == nil {
		return nil
	}
	return c.LeanBodyMassKilogram
}

func (c *ClientFacingBody) GetWaistCircumferenceCentimeter() *float64 {
	if c == nil {
		return nil
	}
	return c.WaistCircumferenceCentimeter
}

func (c *ClientFacingBody) GetSource() *ClientFacingSource {
	if c == nil {
		return nil
	}
	return c.Source
}

func (c *ClientFacingBody) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientFacingBody) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ClientFacingBody) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBody) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBody
	var unmarshaler = struct {
		embed
		Date      *internal.DateTime `json:"date"`
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBody(unmarshaler.embed)
	c.Date = unmarshaler.Date.Time()
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBody) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBody
	var marshaler = struct {
		embed
		Date      *internal.DateTime `json:"date"`
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		Date:      internal.NewDateTime(c.Date),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBody) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type RawBody struct {
	Body []*BodyV2InDb `json:"body" url:"body"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RawBody) GetBody() []*BodyV2InDb {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *RawBody) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawBody) UnmarshalJSON(data []byte) error {
	type unmarshaler RawBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawBody) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
