// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tryVital/vital-go/internal"
	time "time"
)

type ProfileGetRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
}

type ProfileGetRawRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
}

type ClientFacingProfile struct {
	Id string `json:"id" url:"id"`
	// User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
	UserId        string              `json:"user_id" url:"user_id"`
	Height        *int                `json:"height,omitempty" url:"height,omitempty"`
	BirthDate     *string             `json:"birth_date,omitempty" url:"birth_date,omitempty"`
	WheelchairUse *bool               `json:"wheelchair_use,omitempty" url:"wheelchair_use,omitempty"`
	Gender        *Gender             `json:"gender,omitempty" url:"gender,omitempty"`
	Sex           *Sex                `json:"sex,omitempty" url:"sex,omitempty"`
	Source        *ClientFacingSource `json:"source" url:"source"`
	CreatedAt     time.Time           `json:"created_at" url:"created_at"`
	UpdatedAt     time.Time           `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingProfile) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ClientFacingProfile) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingProfile) GetHeight() *int {
	if c == nil {
		return nil
	}
	return c.Height
}

func (c *ClientFacingProfile) GetBirthDate() *string {
	if c == nil {
		return nil
	}
	return c.BirthDate
}

func (c *ClientFacingProfile) GetWheelchairUse() *bool {
	if c == nil {
		return nil
	}
	return c.WheelchairUse
}

func (c *ClientFacingProfile) GetGender() *Gender {
	if c == nil {
		return nil
	}
	return c.Gender
}

func (c *ClientFacingProfile) GetSex() *Sex {
	if c == nil {
		return nil
	}
	return c.Sex
}

func (c *ClientFacingProfile) GetSource() *ClientFacingSource {
	if c == nil {
		return nil
	}
	return c.Source
}

func (c *ClientFacingProfile) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientFacingProfile) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ClientFacingProfile) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingProfile) UnmarshalJSON(data []byte) error {
	type embed ClientFacingProfile
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingProfile(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingProfile) MarshalJSON() ([]byte, error) {
	type embed ClientFacingProfile
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingProfile) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ProfileInDb struct {
	Id         string                `json:"id" url:"id"`
	Data       interface{}           `json:"data" url:"data"`
	UserId     string                `json:"user_id" url:"user_id"`
	SourceId   int                   `json:"source_id" url:"source_id"`
	PriorityId *int                  `json:"priority_id,omitempty" url:"priority_id,omitempty"`
	Source     *ClientFacingProvider `json:"source" url:"source"`
	CreatedAt  *time.Time            `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt  *time.Time            `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProfileInDb) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProfileInDb) GetData() interface{} {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProfileInDb) GetUserId() string {
	if p == nil {
		return ""
	}
	return p.UserId
}

func (p *ProfileInDb) GetSourceId() int {
	if p == nil {
		return 0
	}
	return p.SourceId
}

func (p *ProfileInDb) GetPriorityId() *int {
	if p == nil {
		return nil
	}
	return p.PriorityId
}

func (p *ProfileInDb) GetSource() *ClientFacingProvider {
	if p == nil {
		return nil
	}
	return p.Source
}

func (p *ProfileInDb) GetCreatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *ProfileInDb) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *ProfileInDb) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProfileInDb) UnmarshalJSON(data []byte) error {
	type embed ProfileInDb
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProfileInDb(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	p.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProfileInDb) MarshalJSON() ([]byte, error) {
	type embed ProfileInDb
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewOptionalDateTime(p.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *ProfileInDb) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type RawProfile struct {
	Profile *ProfileInDb `json:"profile" url:"profile"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RawProfile) GetProfile() *ProfileInDb {
	if r == nil {
		return nil
	}
	return r.Profile
}

func (r *RawProfile) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler RawProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawProfile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawProfile) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// ℹ️ This enum is non-exhaustive.
type Sex string

const (
	SexFemale Sex = "female"
	SexMale   Sex = "male"
	SexOther  Sex = "other"
)

func NewSexFromString(s string) (Sex, error) {
	switch s {
	case "female":
		return SexFemale, nil
	case "male":
		return SexMale, nil
	case "other":
		return SexOther, nil
	}
	var t Sex
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Sex) Ptr() *Sex {
	return &s
}
