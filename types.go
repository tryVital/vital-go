// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tryVital/vital-go/internal"
	time "time"
)

type Address struct {
	FirstLine  string  `json:"first_line" url:"first_line"`
	SecondLine *string `json:"second_line,omitempty" url:"second_line,omitempty"`
	Country    string  `json:"country" url:"country"`
	Zip        string  `json:"zip" url:"zip"`
	City       string  `json:"city" url:"city"`
	State      string  `json:"state" url:"state"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Address) GetFirstLine() string {
	if a == nil {
		return ""
	}
	return a.FirstLine
}

func (a *Address) GetSecondLine() *string {
	if a == nil {
		return nil
	}
	return a.SecondLine
}

func (a *Address) GetCountry() string {
	if a == nil {
		return ""
	}
	return a.Country
}

func (a *Address) GetZip() string {
	if a == nil {
		return ""
	}
	return a.Zip
}

func (a *Address) GetCity() string {
	if a == nil {
		return ""
	}
	return a.City
}

func (a *Address) GetState() string {
	if a == nil {
		return ""
	}
	return a.State
}

func (a *Address) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type unmarshaler Address
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Address(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type Answer struct {
	Id    int    `json:"id" url:"id"`
	Code  string `json:"code" url:"code"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Answer) GetId() int {
	if a == nil {
		return 0
	}
	return a.Id
}

func (a *Answer) GetCode() string {
	if a == nil {
		return ""
	}
	return a.Code
}

func (a *Answer) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

func (a *Answer) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Answer) UnmarshalJSON(data []byte) error {
	type unmarshaler Answer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Answer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Answer) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AoE struct {
	Questions []*Question `json:"questions" url:"questions"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AoE) GetQuestions() []*Question {
	if a == nil {
		return nil
	}
	return a.Questions
}

func (a *AoE) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AoE) UnmarshalJSON(data []byte) error {
	type unmarshaler AoE
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AoE(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AoE) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// ℹ️ This enum is non-exhaustive.
type Billing string

const (
	BillingClientBill             Billing = "client_bill"
	BillingCommercialInsurance    Billing = "commercial_insurance"
	BillingPatientBillPassthrough Billing = "patient_bill_passthrough"
	BillingPatientBill            Billing = "patient_bill"
)

func NewBillingFromString(s string) (Billing, error) {
	switch s {
	case "client_bill":
		return BillingClientBill, nil
	case "commercial_insurance":
		return BillingCommercialInsurance, nil
	case "patient_bill_passthrough":
		return BillingPatientBillPassthrough, nil
	case "patient_bill":
		return BillingPatientBill, nil
	}
	var t Billing
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b Billing) Ptr() *Billing {
	return &b
}

type ClientFacingActivityChanged struct {
	EventType    ClientFacingActivityChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                               `json:"user_id" url:"user_id"`
	ClientUserId string                               `json:"client_user_id" url:"client_user_id"`
	TeamId       string                               `json:"team_id" url:"team_id"`
	Data         *ClientFacingActivity                `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingActivityChanged) GetEventType() ClientFacingActivityChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingActivityChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingActivityChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingActivityChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingActivityChanged) GetData() *ClientFacingActivity {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingActivityChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingActivityChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingActivityChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingActivityChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingActivityChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingActivityChangedEventType string

const (
	ClientFacingActivityChangedEventTypeDailyDataActivityCreated ClientFacingActivityChangedEventType = "daily.data.activity.created"
	ClientFacingActivityChangedEventTypeDailyDataActivityUpdated ClientFacingActivityChangedEventType = "daily.data.activity.updated"
)

func NewClientFacingActivityChangedEventTypeFromString(s string) (ClientFacingActivityChangedEventType, error) {
	switch s {
	case "daily.data.activity.created":
		return ClientFacingActivityChangedEventTypeDailyDataActivityCreated, nil
	case "daily.data.activity.updated":
		return ClientFacingActivityChangedEventTypeDailyDataActivityUpdated, nil
	}
	var t ClientFacingActivityChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingActivityChangedEventType) Ptr() *ClientFacingActivityChangedEventType {
	return &c
}

type ClientFacingActivityHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingActivityHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingActivityHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingActivityHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingActivityHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingActivityHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingActivityHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingActivityHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingActivityHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingActivityHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.activity.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.activity.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingActivityHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingActivityHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.activity.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingActivityHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingAfibBurdenChanged struct {
	EventType    ClientFacingAfibBurdenChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                 `json:"user_id" url:"user_id"`
	ClientUserId string                                 `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                 `json:"team_id" url:"team_id"`
	Data         *GroupedAFibBurden                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingAfibBurdenChanged) GetEventType() ClientFacingAfibBurdenChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingAfibBurdenChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingAfibBurdenChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingAfibBurdenChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingAfibBurdenChanged) GetData() *GroupedAFibBurden {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingAfibBurdenChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingAfibBurdenChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingAfibBurdenChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingAfibBurdenChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingAfibBurdenChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingAfibBurdenChangedEventType string

const (
	ClientFacingAfibBurdenChangedEventTypeDailyDataAfibBurdenCreated ClientFacingAfibBurdenChangedEventType = "daily.data.afib_burden.created"
	ClientFacingAfibBurdenChangedEventTypeDailyDataAfibBurdenUpdated ClientFacingAfibBurdenChangedEventType = "daily.data.afib_burden.updated"
)

func NewClientFacingAfibBurdenChangedEventTypeFromString(s string) (ClientFacingAfibBurdenChangedEventType, error) {
	switch s {
	case "daily.data.afib_burden.created":
		return ClientFacingAfibBurdenChangedEventTypeDailyDataAfibBurdenCreated, nil
	case "daily.data.afib_burden.updated":
		return ClientFacingAfibBurdenChangedEventTypeDailyDataAfibBurdenUpdated, nil
	}
	var t ClientFacingAfibBurdenChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingAfibBurdenChangedEventType) Ptr() *ClientFacingAfibBurdenChangedEventType {
	return &c
}

type ClientFacingAfibBurdenHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingAfibBurdenHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingAfibBurdenHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingAfibBurdenHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingAfibBurdenHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingAfibBurdenHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingAfibBurdenHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingAfibBurdenHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingAfibBurdenHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingAfibBurdenHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.afib_burden.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.afib_burden.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingAfibBurdenHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingAfibBurdenHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.afib_burden.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingAfibBurdenHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingAppointmentChanged struct {
	EventType    ClientFacingAppointmentChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                  `json:"user_id" url:"user_id"`
	ClientUserId string                                  `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                  `json:"team_id" url:"team_id"`
	Data         *ClientFacingAppointment                `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingAppointmentChanged) GetEventType() ClientFacingAppointmentChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingAppointmentChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingAppointmentChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingAppointmentChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingAppointmentChanged) GetData() *ClientFacingAppointment {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingAppointmentChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingAppointmentChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingAppointmentChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingAppointmentChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingAppointmentChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingAppointmentChangedEventType string

const (
	ClientFacingAppointmentChangedEventTypeLabtestAppointmentCreated ClientFacingAppointmentChangedEventType = "labtest.appointment.created"
	ClientFacingAppointmentChangedEventTypeLabtestAppointmentUpdated ClientFacingAppointmentChangedEventType = "labtest.appointment.updated"
)

func NewClientFacingAppointmentChangedEventTypeFromString(s string) (ClientFacingAppointmentChangedEventType, error) {
	switch s {
	case "labtest.appointment.created":
		return ClientFacingAppointmentChangedEventTypeLabtestAppointmentCreated, nil
	case "labtest.appointment.updated":
		return ClientFacingAppointmentChangedEventTypeLabtestAppointmentUpdated, nil
	}
	var t ClientFacingAppointmentChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingAppointmentChangedEventType) Ptr() *ClientFacingAppointmentChangedEventType {
	return &c
}

// Schema for a at-home-phlebotomy test order in the client facing API.
//
// To be used as part of a ClientFacingOrder.
type ClientFacingAtHomePhlebotomyOrder struct {
	// The Vital at-home phlebotomy Order ID
	Id            string    `json:"id" url:"id"`
	AppointmentId *string   `json:"appointment_id,omitempty" url:"appointment_id,omitempty"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingAtHomePhlebotomyOrder) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ClientFacingAtHomePhlebotomyOrder) GetAppointmentId() *string {
	if c == nil {
		return nil
	}
	return c.AppointmentId
}

func (c *ClientFacingAtHomePhlebotomyOrder) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientFacingAtHomePhlebotomyOrder) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ClientFacingAtHomePhlebotomyOrder) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingAtHomePhlebotomyOrder) UnmarshalJSON(data []byte) error {
	type embed ClientFacingAtHomePhlebotomyOrder
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingAtHomePhlebotomyOrder(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingAtHomePhlebotomyOrder) MarshalJSON() ([]byte, error) {
	type embed ClientFacingAtHomePhlebotomyOrder
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingAtHomePhlebotomyOrder) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingAtHomePhlebotomyOrderDetails struct {
	Data *ClientFacingAtHomePhlebotomyOrder `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingAtHomePhlebotomyOrderDetails) GetData() *ClientFacingAtHomePhlebotomyOrder {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingAtHomePhlebotomyOrderDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingAtHomePhlebotomyOrderDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingAtHomePhlebotomyOrderDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingAtHomePhlebotomyOrderDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingAtHomePhlebotomyOrderDetails) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBasalBodyTemperatureChanged struct {
	EventType    ClientFacingBasalBodyTemperatureChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                           `json:"user_id" url:"user_id"`
	ClientUserId string                                           `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                           `json:"team_id" url:"team_id"`
	Data         *GroupedBasalBodyTemperature                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBasalBodyTemperatureChanged) GetEventType() ClientFacingBasalBodyTemperatureChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingBasalBodyTemperatureChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBasalBodyTemperatureChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBasalBodyTemperatureChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBasalBodyTemperatureChanged) GetData() *GroupedBasalBodyTemperature {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBasalBodyTemperatureChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBasalBodyTemperatureChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingBasalBodyTemperatureChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingBasalBodyTemperatureChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBasalBodyTemperatureChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBasalBodyTemperatureChangedEventType string

const (
	ClientFacingBasalBodyTemperatureChangedEventTypeDailyDataBasalBodyTemperatureCreated ClientFacingBasalBodyTemperatureChangedEventType = "daily.data.basal_body_temperature.created"
	ClientFacingBasalBodyTemperatureChangedEventTypeDailyDataBasalBodyTemperatureUpdated ClientFacingBasalBodyTemperatureChangedEventType = "daily.data.basal_body_temperature.updated"
)

func NewClientFacingBasalBodyTemperatureChangedEventTypeFromString(s string) (ClientFacingBasalBodyTemperatureChangedEventType, error) {
	switch s {
	case "daily.data.basal_body_temperature.created":
		return ClientFacingBasalBodyTemperatureChangedEventTypeDailyDataBasalBodyTemperatureCreated, nil
	case "daily.data.basal_body_temperature.updated":
		return ClientFacingBasalBodyTemperatureChangedEventTypeDailyDataBasalBodyTemperatureUpdated, nil
	}
	var t ClientFacingBasalBodyTemperatureChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingBasalBodyTemperatureChangedEventType) Ptr() *ClientFacingBasalBodyTemperatureChangedEventType {
	return &c
}

type ClientFacingBasalBodyTemperatureHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBasalBodyTemperatureHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBasalBodyTemperatureHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBasalBodyTemperatureHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBasalBodyTemperatureHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBasalBodyTemperatureHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingBasalBodyTemperatureHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBasalBodyTemperatureHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBasalBodyTemperatureHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBasalBodyTemperatureHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.basal_body_temperature.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.basal_body_temperature.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBasalBodyTemperatureHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBasalBodyTemperatureHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.basal_body_temperature.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBasalBodyTemperatureHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBloodOxygenChanged struct {
	EventType    ClientFacingBloodOxygenChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                  `json:"user_id" url:"user_id"`
	ClientUserId string                                  `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                  `json:"team_id" url:"team_id"`
	Data         *GroupedBloodOxygen                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBloodOxygenChanged) GetEventType() ClientFacingBloodOxygenChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingBloodOxygenChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBloodOxygenChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBloodOxygenChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBloodOxygenChanged) GetData() *GroupedBloodOxygen {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBloodOxygenChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBloodOxygenChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingBloodOxygenChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingBloodOxygenChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBloodOxygenChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBloodOxygenChangedEventType string

const (
	ClientFacingBloodOxygenChangedEventTypeDailyDataBloodOxygenCreated ClientFacingBloodOxygenChangedEventType = "daily.data.blood_oxygen.created"
	ClientFacingBloodOxygenChangedEventTypeDailyDataBloodOxygenUpdated ClientFacingBloodOxygenChangedEventType = "daily.data.blood_oxygen.updated"
)

func NewClientFacingBloodOxygenChangedEventTypeFromString(s string) (ClientFacingBloodOxygenChangedEventType, error) {
	switch s {
	case "daily.data.blood_oxygen.created":
		return ClientFacingBloodOxygenChangedEventTypeDailyDataBloodOxygenCreated, nil
	case "daily.data.blood_oxygen.updated":
		return ClientFacingBloodOxygenChangedEventTypeDailyDataBloodOxygenUpdated, nil
	}
	var t ClientFacingBloodOxygenChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingBloodOxygenChangedEventType) Ptr() *ClientFacingBloodOxygenChangedEventType {
	return &c
}

type ClientFacingBloodOxygenHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBloodOxygenHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBloodOxygenHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBloodOxygenHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBloodOxygenHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBloodOxygenHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingBloodOxygenHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBloodOxygenHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBloodOxygenHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBloodOxygenHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.blood_oxygen.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.blood_oxygen.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBloodOxygenHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBloodOxygenHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.blood_oxygen.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBloodOxygenHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBloodPressureChanged struct {
	EventType    ClientFacingBloodPressureChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                    `json:"user_id" url:"user_id"`
	ClientUserId string                                    `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                    `json:"team_id" url:"team_id"`
	Data         *GroupedBloodPressure                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBloodPressureChanged) GetEventType() ClientFacingBloodPressureChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingBloodPressureChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBloodPressureChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBloodPressureChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBloodPressureChanged) GetData() *GroupedBloodPressure {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBloodPressureChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBloodPressureChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingBloodPressureChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingBloodPressureChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBloodPressureChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBloodPressureChangedEventType string

const (
	ClientFacingBloodPressureChangedEventTypeDailyDataBloodPressureCreated ClientFacingBloodPressureChangedEventType = "daily.data.blood_pressure.created"
	ClientFacingBloodPressureChangedEventTypeDailyDataBloodPressureUpdated ClientFacingBloodPressureChangedEventType = "daily.data.blood_pressure.updated"
)

func NewClientFacingBloodPressureChangedEventTypeFromString(s string) (ClientFacingBloodPressureChangedEventType, error) {
	switch s {
	case "daily.data.blood_pressure.created":
		return ClientFacingBloodPressureChangedEventTypeDailyDataBloodPressureCreated, nil
	case "daily.data.blood_pressure.updated":
		return ClientFacingBloodPressureChangedEventTypeDailyDataBloodPressureUpdated, nil
	}
	var t ClientFacingBloodPressureChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingBloodPressureChangedEventType) Ptr() *ClientFacingBloodPressureChangedEventType {
	return &c
}

type ClientFacingBloodPressureHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBloodPressureHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBloodPressureHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBloodPressureHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBloodPressureHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBloodPressureHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingBloodPressureHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBloodPressureHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBloodPressureHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBloodPressureHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.blood_pressure.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.blood_pressure.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBloodPressureHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBloodPressureHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.blood_pressure.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBloodPressureHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyChanged struct {
	EventType    ClientFacingBodyChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                           `json:"user_id" url:"user_id"`
	ClientUserId string                           `json:"client_user_id" url:"client_user_id"`
	TeamId       string                           `json:"team_id" url:"team_id"`
	Data         *ClientFacingBody                `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyChanged) GetEventType() ClientFacingBodyChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingBodyChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBodyChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBodyChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBodyChanged) GetData() *ClientFacingBody {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBodyChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingBodyChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingBodyChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyChangedEventType string

const (
	ClientFacingBodyChangedEventTypeDailyDataBodyCreated ClientFacingBodyChangedEventType = "daily.data.body.created"
	ClientFacingBodyChangedEventTypeDailyDataBodyUpdated ClientFacingBodyChangedEventType = "daily.data.body.updated"
)

func NewClientFacingBodyChangedEventTypeFromString(s string) (ClientFacingBodyChangedEventType, error) {
	switch s {
	case "daily.data.body.created":
		return ClientFacingBodyChangedEventTypeDailyDataBodyCreated, nil
	case "daily.data.body.updated":
		return ClientFacingBodyChangedEventTypeDailyDataBodyUpdated, nil
	}
	var t ClientFacingBodyChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingBodyChangedEventType) Ptr() *ClientFacingBodyChangedEventType {
	return &c
}

type ClientFacingBodyHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBodyHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBodyHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBodyHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBodyHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingBodyHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBodyHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBodyHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.body.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.body.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBodyHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.body.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBodyHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyMassIndexChanged struct {
	EventType    ClientFacingBodyMassIndexChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                    `json:"user_id" url:"user_id"`
	ClientUserId string                                    `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                    `json:"team_id" url:"team_id"`
	Data         *GroupedBodyMassIndex                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyMassIndexChanged) GetEventType() ClientFacingBodyMassIndexChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingBodyMassIndexChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBodyMassIndexChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBodyMassIndexChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBodyMassIndexChanged) GetData() *GroupedBodyMassIndex {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBodyMassIndexChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyMassIndexChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingBodyMassIndexChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingBodyMassIndexChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyMassIndexChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyMassIndexChangedEventType string

const (
	ClientFacingBodyMassIndexChangedEventTypeDailyDataBodyMassIndexCreated ClientFacingBodyMassIndexChangedEventType = "daily.data.body_mass_index.created"
	ClientFacingBodyMassIndexChangedEventTypeDailyDataBodyMassIndexUpdated ClientFacingBodyMassIndexChangedEventType = "daily.data.body_mass_index.updated"
)

func NewClientFacingBodyMassIndexChangedEventTypeFromString(s string) (ClientFacingBodyMassIndexChangedEventType, error) {
	switch s {
	case "daily.data.body_mass_index.created":
		return ClientFacingBodyMassIndexChangedEventTypeDailyDataBodyMassIndexCreated, nil
	case "daily.data.body_mass_index.updated":
		return ClientFacingBodyMassIndexChangedEventTypeDailyDataBodyMassIndexUpdated, nil
	}
	var t ClientFacingBodyMassIndexChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingBodyMassIndexChangedEventType) Ptr() *ClientFacingBodyMassIndexChangedEventType {
	return &c
}

type ClientFacingBodyMassIndexHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyMassIndexHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBodyMassIndexHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBodyMassIndexHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBodyMassIndexHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBodyMassIndexHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingBodyMassIndexHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyMassIndexHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBodyMassIndexHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBodyMassIndexHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.body_mass_index.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.body_mass_index.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyMassIndexHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBodyMassIndexHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.body_mass_index.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBodyMassIndexHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyTemperatureChanged struct {
	EventType    ClientFacingBodyTemperatureChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                      `json:"user_id" url:"user_id"`
	ClientUserId string                                      `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                      `json:"team_id" url:"team_id"`
	Data         *GroupedBodyTemperature                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyTemperatureChanged) GetEventType() ClientFacingBodyTemperatureChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingBodyTemperatureChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBodyTemperatureChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBodyTemperatureChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBodyTemperatureChanged) GetData() *GroupedBodyTemperature {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBodyTemperatureChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyTemperatureChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingBodyTemperatureChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingBodyTemperatureChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyTemperatureChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyTemperatureChangedEventType string

const (
	ClientFacingBodyTemperatureChangedEventTypeDailyDataBodyTemperatureCreated ClientFacingBodyTemperatureChangedEventType = "daily.data.body_temperature.created"
	ClientFacingBodyTemperatureChangedEventTypeDailyDataBodyTemperatureUpdated ClientFacingBodyTemperatureChangedEventType = "daily.data.body_temperature.updated"
)

func NewClientFacingBodyTemperatureChangedEventTypeFromString(s string) (ClientFacingBodyTemperatureChangedEventType, error) {
	switch s {
	case "daily.data.body_temperature.created":
		return ClientFacingBodyTemperatureChangedEventTypeDailyDataBodyTemperatureCreated, nil
	case "daily.data.body_temperature.updated":
		return ClientFacingBodyTemperatureChangedEventTypeDailyDataBodyTemperatureUpdated, nil
	}
	var t ClientFacingBodyTemperatureChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingBodyTemperatureChangedEventType) Ptr() *ClientFacingBodyTemperatureChangedEventType {
	return &c
}

type ClientFacingBodyTemperatureDeltaChanged struct {
	EventType    ClientFacingBodyTemperatureDeltaChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                           `json:"user_id" url:"user_id"`
	ClientUserId string                                           `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                           `json:"team_id" url:"team_id"`
	Data         *GroupedBodyTemperatureDelta                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyTemperatureDeltaChanged) GetEventType() ClientFacingBodyTemperatureDeltaChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingBodyTemperatureDeltaChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBodyTemperatureDeltaChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBodyTemperatureDeltaChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBodyTemperatureDeltaChanged) GetData() *GroupedBodyTemperatureDelta {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBodyTemperatureDeltaChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyTemperatureDeltaChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingBodyTemperatureDeltaChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingBodyTemperatureDeltaChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyTemperatureDeltaChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyTemperatureDeltaChangedEventType string

const (
	ClientFacingBodyTemperatureDeltaChangedEventTypeDailyDataBodyTemperatureDeltaCreated ClientFacingBodyTemperatureDeltaChangedEventType = "daily.data.body_temperature_delta.created"
	ClientFacingBodyTemperatureDeltaChangedEventTypeDailyDataBodyTemperatureDeltaUpdated ClientFacingBodyTemperatureDeltaChangedEventType = "daily.data.body_temperature_delta.updated"
)

func NewClientFacingBodyTemperatureDeltaChangedEventTypeFromString(s string) (ClientFacingBodyTemperatureDeltaChangedEventType, error) {
	switch s {
	case "daily.data.body_temperature_delta.created":
		return ClientFacingBodyTemperatureDeltaChangedEventTypeDailyDataBodyTemperatureDeltaCreated, nil
	case "daily.data.body_temperature_delta.updated":
		return ClientFacingBodyTemperatureDeltaChangedEventTypeDailyDataBodyTemperatureDeltaUpdated, nil
	}
	var t ClientFacingBodyTemperatureDeltaChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingBodyTemperatureDeltaChangedEventType) Ptr() *ClientFacingBodyTemperatureDeltaChangedEventType {
	return &c
}

type ClientFacingBodyTemperatureDeltaHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyTemperatureDeltaHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBodyTemperatureDeltaHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBodyTemperatureDeltaHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBodyTemperatureDeltaHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBodyTemperatureDeltaHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingBodyTemperatureDeltaHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyTemperatureDeltaHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBodyTemperatureDeltaHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBodyTemperatureDeltaHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.body_temperature_delta.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.body_temperature_delta.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyTemperatureDeltaHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBodyTemperatureDeltaHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.body_temperature_delta.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBodyTemperatureDeltaHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyTemperatureHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyTemperatureHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingBodyTemperatureHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingBodyTemperatureHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingBodyTemperatureHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingBodyTemperatureHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingBodyTemperatureHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyTemperatureHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBodyTemperatureHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBodyTemperatureHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.body_temperature.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.body_temperature.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyTemperatureHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBodyTemperatureHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.body_temperature.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBodyTemperatureHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCaffeineChanged struct {
	EventType    ClientFacingCaffeineChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                               `json:"user_id" url:"user_id"`
	ClientUserId string                               `json:"client_user_id" url:"client_user_id"`
	TeamId       string                               `json:"team_id" url:"team_id"`
	Data         *GroupedCaffeine                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCaffeineChanged) GetEventType() ClientFacingCaffeineChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingCaffeineChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCaffeineChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCaffeineChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCaffeineChanged) GetData() *GroupedCaffeine {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCaffeineChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCaffeineChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingCaffeineChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingCaffeineChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCaffeineChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCaffeineChangedEventType string

const (
	ClientFacingCaffeineChangedEventTypeDailyDataCaffeineCreated ClientFacingCaffeineChangedEventType = "daily.data.caffeine.created"
	ClientFacingCaffeineChangedEventTypeDailyDataCaffeineUpdated ClientFacingCaffeineChangedEventType = "daily.data.caffeine.updated"
)

func NewClientFacingCaffeineChangedEventTypeFromString(s string) (ClientFacingCaffeineChangedEventType, error) {
	switch s {
	case "daily.data.caffeine.created":
		return ClientFacingCaffeineChangedEventTypeDailyDataCaffeineCreated, nil
	case "daily.data.caffeine.updated":
		return ClientFacingCaffeineChangedEventTypeDailyDataCaffeineUpdated, nil
	}
	var t ClientFacingCaffeineChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingCaffeineChangedEventType) Ptr() *ClientFacingCaffeineChangedEventType {
	return &c
}

type ClientFacingCaffeineHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCaffeineHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCaffeineHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCaffeineHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCaffeineHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCaffeineHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingCaffeineHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCaffeineHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCaffeineHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCaffeineHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.caffeine.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.caffeine.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCaffeineHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCaffeineHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.caffeine.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCaffeineHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCaloriesActiveChanged struct {
	EventType    ClientFacingCaloriesActiveChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                     `json:"user_id" url:"user_id"`
	ClientUserId string                                     `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                     `json:"team_id" url:"team_id"`
	Data         *GroupedCaloriesActive                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCaloriesActiveChanged) GetEventType() ClientFacingCaloriesActiveChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingCaloriesActiveChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCaloriesActiveChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCaloriesActiveChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCaloriesActiveChanged) GetData() *GroupedCaloriesActive {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCaloriesActiveChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCaloriesActiveChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingCaloriesActiveChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingCaloriesActiveChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCaloriesActiveChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCaloriesActiveChangedEventType string

const (
	ClientFacingCaloriesActiveChangedEventTypeDailyDataCaloriesActiveCreated ClientFacingCaloriesActiveChangedEventType = "daily.data.calories_active.created"
	ClientFacingCaloriesActiveChangedEventTypeDailyDataCaloriesActiveUpdated ClientFacingCaloriesActiveChangedEventType = "daily.data.calories_active.updated"
)

func NewClientFacingCaloriesActiveChangedEventTypeFromString(s string) (ClientFacingCaloriesActiveChangedEventType, error) {
	switch s {
	case "daily.data.calories_active.created":
		return ClientFacingCaloriesActiveChangedEventTypeDailyDataCaloriesActiveCreated, nil
	case "daily.data.calories_active.updated":
		return ClientFacingCaloriesActiveChangedEventTypeDailyDataCaloriesActiveUpdated, nil
	}
	var t ClientFacingCaloriesActiveChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingCaloriesActiveChangedEventType) Ptr() *ClientFacingCaloriesActiveChangedEventType {
	return &c
}

type ClientFacingCaloriesActiveHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCaloriesActiveHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCaloriesActiveHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCaloriesActiveHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCaloriesActiveHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCaloriesActiveHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingCaloriesActiveHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCaloriesActiveHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCaloriesActiveHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCaloriesActiveHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.calories_active.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.calories_active.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCaloriesActiveHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCaloriesActiveHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.calories_active.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCaloriesActiveHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCaloriesBasalChanged struct {
	EventType    ClientFacingCaloriesBasalChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                    `json:"user_id" url:"user_id"`
	ClientUserId string                                    `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                    `json:"team_id" url:"team_id"`
	Data         *GroupedCaloriesBasal                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCaloriesBasalChanged) GetEventType() ClientFacingCaloriesBasalChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingCaloriesBasalChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCaloriesBasalChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCaloriesBasalChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCaloriesBasalChanged) GetData() *GroupedCaloriesBasal {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCaloriesBasalChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCaloriesBasalChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingCaloriesBasalChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingCaloriesBasalChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCaloriesBasalChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCaloriesBasalChangedEventType string

const (
	ClientFacingCaloriesBasalChangedEventTypeDailyDataCaloriesBasalCreated ClientFacingCaloriesBasalChangedEventType = "daily.data.calories_basal.created"
	ClientFacingCaloriesBasalChangedEventTypeDailyDataCaloriesBasalUpdated ClientFacingCaloriesBasalChangedEventType = "daily.data.calories_basal.updated"
)

func NewClientFacingCaloriesBasalChangedEventTypeFromString(s string) (ClientFacingCaloriesBasalChangedEventType, error) {
	switch s {
	case "daily.data.calories_basal.created":
		return ClientFacingCaloriesBasalChangedEventTypeDailyDataCaloriesBasalCreated, nil
	case "daily.data.calories_basal.updated":
		return ClientFacingCaloriesBasalChangedEventTypeDailyDataCaloriesBasalUpdated, nil
	}
	var t ClientFacingCaloriesBasalChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingCaloriesBasalChangedEventType) Ptr() *ClientFacingCaloriesBasalChangedEventType {
	return &c
}

type ClientFacingCaloriesBasalHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCaloriesBasalHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCaloriesBasalHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCaloriesBasalHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCaloriesBasalHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCaloriesBasalHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingCaloriesBasalHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCaloriesBasalHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCaloriesBasalHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCaloriesBasalHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.calories_basal.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.calories_basal.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCaloriesBasalHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCaloriesBasalHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.calories_basal.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCaloriesBasalHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCarbohydratesChanged struct {
	EventType    ClientFacingCarbohydratesChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                    `json:"user_id" url:"user_id"`
	ClientUserId string                                    `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                    `json:"team_id" url:"team_id"`
	Data         *GroupedCarbohydrates                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCarbohydratesChanged) GetEventType() ClientFacingCarbohydratesChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingCarbohydratesChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCarbohydratesChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCarbohydratesChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCarbohydratesChanged) GetData() *GroupedCarbohydrates {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCarbohydratesChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCarbohydratesChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingCarbohydratesChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingCarbohydratesChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCarbohydratesChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCarbohydratesChangedEventType string

const (
	ClientFacingCarbohydratesChangedEventTypeDailyDataCarbohydratesCreated ClientFacingCarbohydratesChangedEventType = "daily.data.carbohydrates.created"
	ClientFacingCarbohydratesChangedEventTypeDailyDataCarbohydratesUpdated ClientFacingCarbohydratesChangedEventType = "daily.data.carbohydrates.updated"
)

func NewClientFacingCarbohydratesChangedEventTypeFromString(s string) (ClientFacingCarbohydratesChangedEventType, error) {
	switch s {
	case "daily.data.carbohydrates.created":
		return ClientFacingCarbohydratesChangedEventTypeDailyDataCarbohydratesCreated, nil
	case "daily.data.carbohydrates.updated":
		return ClientFacingCarbohydratesChangedEventTypeDailyDataCarbohydratesUpdated, nil
	}
	var t ClientFacingCarbohydratesChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingCarbohydratesChangedEventType) Ptr() *ClientFacingCarbohydratesChangedEventType {
	return &c
}

type ClientFacingCarbohydratesHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCarbohydratesHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCarbohydratesHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCarbohydratesHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCarbohydratesHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCarbohydratesHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingCarbohydratesHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCarbohydratesHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCarbohydratesHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCarbohydratesHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.carbohydrates.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.carbohydrates.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCarbohydratesHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCarbohydratesHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.carbohydrates.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCarbohydratesHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCholesterolChanged struct {
	EventType    ClientFacingCholesterolChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                  `json:"user_id" url:"user_id"`
	ClientUserId string                                  `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                  `json:"team_id" url:"team_id"`
	Data         *GroupedCholesterol                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCholesterolChanged) GetEventType() ClientFacingCholesterolChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingCholesterolChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCholesterolChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCholesterolChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCholesterolChanged) GetData() *GroupedCholesterol {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCholesterolChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCholesterolChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingCholesterolChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingCholesterolChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCholesterolChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCholesterolChangedEventType string

const (
	ClientFacingCholesterolChangedEventTypeDailyDataCholesterolCreated ClientFacingCholesterolChangedEventType = "daily.data.cholesterol.created"
	ClientFacingCholesterolChangedEventTypeDailyDataCholesterolUpdated ClientFacingCholesterolChangedEventType = "daily.data.cholesterol.updated"
)

func NewClientFacingCholesterolChangedEventTypeFromString(s string) (ClientFacingCholesterolChangedEventType, error) {
	switch s {
	case "daily.data.cholesterol.created":
		return ClientFacingCholesterolChangedEventTypeDailyDataCholesterolCreated, nil
	case "daily.data.cholesterol.updated":
		return ClientFacingCholesterolChangedEventTypeDailyDataCholesterolUpdated, nil
	}
	var t ClientFacingCholesterolChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingCholesterolChangedEventType) Ptr() *ClientFacingCholesterolChangedEventType {
	return &c
}

type ClientFacingCholesterolHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCholesterolHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCholesterolHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCholesterolHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCholesterolHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCholesterolHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingCholesterolHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCholesterolHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCholesterolHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCholesterolHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.cholesterol.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.cholesterol.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCholesterolHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCholesterolHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.cholesterol.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCholesterolHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingContinuousQueryResultTableChanged struct {
	UserId       string                               `json:"user_id" url:"user_id"`
	ClientUserId string                               `json:"client_user_id" url:"client_user_id"`
	TeamId       string                               `json:"team_id" url:"team_id"`
	Data         []*ContinuousQueryResultTableChanges `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingContinuousQueryResultTableChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingContinuousQueryResultTableChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingContinuousQueryResultTableChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingContinuousQueryResultTableChanged) GetData() []*ContinuousQueryResultTableChanges {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingContinuousQueryResultTableChanged) EventType() string {
	return c.eventType
}

func (c *ClientFacingContinuousQueryResultTableChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingContinuousQueryResultTableChanged) UnmarshalJSON(data []byte) error {
	type embed ClientFacingContinuousQueryResultTableChanged
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingContinuousQueryResultTableChanged(unmarshaler.embed)
	if unmarshaler.EventType != "continuous_query.result_table.changed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "continuous_query.result_table.changed", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingContinuousQueryResultTableChanged) MarshalJSON() ([]byte, error) {
	type embed ClientFacingContinuousQueryResultTableChanged
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "continuous_query.result_table.changed",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingContinuousQueryResultTableChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCriticalResult struct {
	// The Vital Order ID
	OrderId string `json:"order_id" url:"order_id"`
	// Sample ID
	SampleId string `json:"sample_id" url:"sample_id"`
	// The current results status, can be either (final, partial).
	Status string `json:"status" url:"status"`
	// The results interpretation, can be one of (normal, abnormal, critical).
	Interpretation string `json:"interpretation" url:"interpretation"`
	// Your team id.
	TeamId string `json:"team_id" url:"team_id"`
	UserId string `json:"user_id" url:"user_id"`
	// When the result was first fetched from a laboratory.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// When the result was last fetched from a laboratory.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCriticalResult) GetOrderId() string {
	if c == nil {
		return ""
	}
	return c.OrderId
}

func (c *ClientFacingCriticalResult) GetSampleId() string {
	if c == nil {
		return ""
	}
	return c.SampleId
}

func (c *ClientFacingCriticalResult) GetStatus() string {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *ClientFacingCriticalResult) GetInterpretation() string {
	if c == nil {
		return ""
	}
	return c.Interpretation
}

func (c *ClientFacingCriticalResult) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCriticalResult) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCriticalResult) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientFacingCriticalResult) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ClientFacingCriticalResult) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCriticalResult) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCriticalResult
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCriticalResult(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCriticalResult) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCriticalResult
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCriticalResult) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCriticalResultIdentified struct {
	UserId       string                      `json:"user_id" url:"user_id"`
	ClientUserId string                      `json:"client_user_id" url:"client_user_id"`
	TeamId       string                      `json:"team_id" url:"team_id"`
	Data         *ClientFacingCriticalResult `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCriticalResultIdentified) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingCriticalResultIdentified) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingCriticalResultIdentified) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingCriticalResultIdentified) GetData() *ClientFacingCriticalResult {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingCriticalResultIdentified) EventType() string {
	return c.eventType
}

func (c *ClientFacingCriticalResultIdentified) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCriticalResultIdentified) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCriticalResultIdentified
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCriticalResultIdentified(unmarshaler.embed)
	if unmarshaler.EventType != "labtest.result.critical" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "labtest.result.critical", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCriticalResultIdentified) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCriticalResultIdentified
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "labtest.result.critical",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCriticalResultIdentified) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingDaylightExposureChanged struct {
	EventType    ClientFacingDaylightExposureChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                       `json:"user_id" url:"user_id"`
	ClientUserId string                                       `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                       `json:"team_id" url:"team_id"`
	Data         *GroupedDaylightExposure                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingDaylightExposureChanged) GetEventType() ClientFacingDaylightExposureChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingDaylightExposureChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingDaylightExposureChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingDaylightExposureChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingDaylightExposureChanged) GetData() *GroupedDaylightExposure {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingDaylightExposureChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingDaylightExposureChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingDaylightExposureChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingDaylightExposureChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingDaylightExposureChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingDaylightExposureChangedEventType string

const (
	ClientFacingDaylightExposureChangedEventTypeDailyDataDaylightExposureCreated ClientFacingDaylightExposureChangedEventType = "daily.data.daylight_exposure.created"
	ClientFacingDaylightExposureChangedEventTypeDailyDataDaylightExposureUpdated ClientFacingDaylightExposureChangedEventType = "daily.data.daylight_exposure.updated"
)

func NewClientFacingDaylightExposureChangedEventTypeFromString(s string) (ClientFacingDaylightExposureChangedEventType, error) {
	switch s {
	case "daily.data.daylight_exposure.created":
		return ClientFacingDaylightExposureChangedEventTypeDailyDataDaylightExposureCreated, nil
	case "daily.data.daylight_exposure.updated":
		return ClientFacingDaylightExposureChangedEventTypeDailyDataDaylightExposureUpdated, nil
	}
	var t ClientFacingDaylightExposureChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingDaylightExposureChangedEventType) Ptr() *ClientFacingDaylightExposureChangedEventType {
	return &c
}

type ClientFacingDaylightExposureHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingDaylightExposureHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingDaylightExposureHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingDaylightExposureHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingDaylightExposureHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingDaylightExposureHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingDaylightExposureHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingDaylightExposureHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingDaylightExposureHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingDaylightExposureHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.daylight_exposure.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.daylight_exposure.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingDaylightExposureHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingDaylightExposureHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.daylight_exposure.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingDaylightExposureHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingDistanceChanged struct {
	EventType    ClientFacingDistanceChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                               `json:"user_id" url:"user_id"`
	ClientUserId string                               `json:"client_user_id" url:"client_user_id"`
	TeamId       string                               `json:"team_id" url:"team_id"`
	Data         *GroupedDistance                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingDistanceChanged) GetEventType() ClientFacingDistanceChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingDistanceChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingDistanceChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingDistanceChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingDistanceChanged) GetData() *GroupedDistance {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingDistanceChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingDistanceChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingDistanceChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingDistanceChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingDistanceChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingDistanceChangedEventType string

const (
	ClientFacingDistanceChangedEventTypeDailyDataDistanceCreated ClientFacingDistanceChangedEventType = "daily.data.distance.created"
	ClientFacingDistanceChangedEventTypeDailyDataDistanceUpdated ClientFacingDistanceChangedEventType = "daily.data.distance.updated"
)

func NewClientFacingDistanceChangedEventTypeFromString(s string) (ClientFacingDistanceChangedEventType, error) {
	switch s {
	case "daily.data.distance.created":
		return ClientFacingDistanceChangedEventTypeDailyDataDistanceCreated, nil
	case "daily.data.distance.updated":
		return ClientFacingDistanceChangedEventTypeDailyDataDistanceUpdated, nil
	}
	var t ClientFacingDistanceChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingDistanceChangedEventType) Ptr() *ClientFacingDistanceChangedEventType {
	return &c
}

type ClientFacingDistanceHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingDistanceHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingDistanceHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingDistanceHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingDistanceHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingDistanceHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingDistanceHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingDistanceHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingDistanceHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingDistanceHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.distance.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.distance.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingDistanceHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingDistanceHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.distance.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingDistanceHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingElectrocardiogramChanged struct {
	EventType    ClientFacingElectrocardiogramChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                        `json:"user_id" url:"user_id"`
	ClientUserId string                                        `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                        `json:"team_id" url:"team_id"`
	Data         *ClientFacingElectrocardiogram                `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingElectrocardiogramChanged) GetEventType() ClientFacingElectrocardiogramChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingElectrocardiogramChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingElectrocardiogramChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingElectrocardiogramChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingElectrocardiogramChanged) GetData() *ClientFacingElectrocardiogram {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingElectrocardiogramChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingElectrocardiogramChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingElectrocardiogramChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingElectrocardiogramChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingElectrocardiogramChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingElectrocardiogramChangedEventType string

const (
	ClientFacingElectrocardiogramChangedEventTypeDailyDataElectrocardiogramCreated ClientFacingElectrocardiogramChangedEventType = "daily.data.electrocardiogram.created"
	ClientFacingElectrocardiogramChangedEventTypeDailyDataElectrocardiogramUpdated ClientFacingElectrocardiogramChangedEventType = "daily.data.electrocardiogram.updated"
)

func NewClientFacingElectrocardiogramChangedEventTypeFromString(s string) (ClientFacingElectrocardiogramChangedEventType, error) {
	switch s {
	case "daily.data.electrocardiogram.created":
		return ClientFacingElectrocardiogramChangedEventTypeDailyDataElectrocardiogramCreated, nil
	case "daily.data.electrocardiogram.updated":
		return ClientFacingElectrocardiogramChangedEventTypeDailyDataElectrocardiogramUpdated, nil
	}
	var t ClientFacingElectrocardiogramChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingElectrocardiogramChangedEventType) Ptr() *ClientFacingElectrocardiogramChangedEventType {
	return &c
}

type ClientFacingElectrocardiogramHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingElectrocardiogramHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingElectrocardiogramHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingElectrocardiogramHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingElectrocardiogramHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingElectrocardiogramHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingElectrocardiogramHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingElectrocardiogramHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingElectrocardiogramHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingElectrocardiogramHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.electrocardiogram.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.electrocardiogram.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingElectrocardiogramHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingElectrocardiogramHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.electrocardiogram.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingElectrocardiogramHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingElectrocardiogramVoltageChanged struct {
	EventType    ClientFacingElectrocardiogramVoltageChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                               `json:"user_id" url:"user_id"`
	ClientUserId string                                               `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                               `json:"team_id" url:"team_id"`
	Data         *GroupedElectrocardiogramVoltage                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingElectrocardiogramVoltageChanged) GetEventType() ClientFacingElectrocardiogramVoltageChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingElectrocardiogramVoltageChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingElectrocardiogramVoltageChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingElectrocardiogramVoltageChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingElectrocardiogramVoltageChanged) GetData() *GroupedElectrocardiogramVoltage {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingElectrocardiogramVoltageChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingElectrocardiogramVoltageChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingElectrocardiogramVoltageChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingElectrocardiogramVoltageChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingElectrocardiogramVoltageChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingElectrocardiogramVoltageChangedEventType string

const (
	ClientFacingElectrocardiogramVoltageChangedEventTypeDailyDataElectrocardiogramVoltageCreated ClientFacingElectrocardiogramVoltageChangedEventType = "daily.data.electrocardiogram_voltage.created"
	ClientFacingElectrocardiogramVoltageChangedEventTypeDailyDataElectrocardiogramVoltageUpdated ClientFacingElectrocardiogramVoltageChangedEventType = "daily.data.electrocardiogram_voltage.updated"
)

func NewClientFacingElectrocardiogramVoltageChangedEventTypeFromString(s string) (ClientFacingElectrocardiogramVoltageChangedEventType, error) {
	switch s {
	case "daily.data.electrocardiogram_voltage.created":
		return ClientFacingElectrocardiogramVoltageChangedEventTypeDailyDataElectrocardiogramVoltageCreated, nil
	case "daily.data.electrocardiogram_voltage.updated":
		return ClientFacingElectrocardiogramVoltageChangedEventTypeDailyDataElectrocardiogramVoltageUpdated, nil
	}
	var t ClientFacingElectrocardiogramVoltageChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingElectrocardiogramVoltageChangedEventType) Ptr() *ClientFacingElectrocardiogramVoltageChangedEventType {
	return &c
}

type ClientFacingElectrocardiogramVoltageHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingElectrocardiogramVoltageHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingElectrocardiogramVoltageHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingElectrocardiogramVoltageHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingElectrocardiogramVoltageHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingElectrocardiogramVoltageHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingElectrocardiogramVoltageHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingElectrocardiogramVoltageHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingElectrocardiogramVoltageHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingElectrocardiogramVoltageHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.electrocardiogram_voltage.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.electrocardiogram_voltage.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingElectrocardiogramVoltageHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingElectrocardiogramVoltageHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.electrocardiogram_voltage.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingElectrocardiogramVoltageHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingFallChanged struct {
	EventType    ClientFacingFallChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                           `json:"user_id" url:"user_id"`
	ClientUserId string                           `json:"client_user_id" url:"client_user_id"`
	TeamId       string                           `json:"team_id" url:"team_id"`
	Data         *GroupedFall                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingFallChanged) GetEventType() ClientFacingFallChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingFallChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingFallChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingFallChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingFallChanged) GetData() *GroupedFall {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingFallChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingFallChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingFallChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingFallChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingFallChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingFallChangedEventType string

const (
	ClientFacingFallChangedEventTypeDailyDataFallCreated ClientFacingFallChangedEventType = "daily.data.fall.created"
	ClientFacingFallChangedEventTypeDailyDataFallUpdated ClientFacingFallChangedEventType = "daily.data.fall.updated"
)

func NewClientFacingFallChangedEventTypeFromString(s string) (ClientFacingFallChangedEventType, error) {
	switch s {
	case "daily.data.fall.created":
		return ClientFacingFallChangedEventTypeDailyDataFallCreated, nil
	case "daily.data.fall.updated":
		return ClientFacingFallChangedEventTypeDailyDataFallUpdated, nil
	}
	var t ClientFacingFallChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingFallChangedEventType) Ptr() *ClientFacingFallChangedEventType {
	return &c
}

type ClientFacingFallHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingFallHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingFallHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingFallHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingFallHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingFallHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingFallHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingFallHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingFallHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingFallHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.fall.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.fall.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingFallHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingFallHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.fall.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingFallHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingFatChanged struct {
	EventType    ClientFacingFatChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                          `json:"user_id" url:"user_id"`
	ClientUserId string                          `json:"client_user_id" url:"client_user_id"`
	TeamId       string                          `json:"team_id" url:"team_id"`
	Data         *GroupedBodyFat                 `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingFatChanged) GetEventType() ClientFacingFatChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingFatChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingFatChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingFatChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingFatChanged) GetData() *GroupedBodyFat {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingFatChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingFatChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingFatChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingFatChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingFatChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingFatChangedEventType string

const (
	ClientFacingFatChangedEventTypeDailyDataFatCreated ClientFacingFatChangedEventType = "daily.data.fat.created"
	ClientFacingFatChangedEventTypeDailyDataFatUpdated ClientFacingFatChangedEventType = "daily.data.fat.updated"
)

func NewClientFacingFatChangedEventTypeFromString(s string) (ClientFacingFatChangedEventType, error) {
	switch s {
	case "daily.data.fat.created":
		return ClientFacingFatChangedEventTypeDailyDataFatCreated, nil
	case "daily.data.fat.updated":
		return ClientFacingFatChangedEventTypeDailyDataFatUpdated, nil
	}
	var t ClientFacingFatChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingFatChangedEventType) Ptr() *ClientFacingFatChangedEventType {
	return &c
}

type ClientFacingFatHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingFatHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingFatHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingFatHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingFatHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingFatHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingFatHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingFatHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingFatHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingFatHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.fat.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.fat.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingFatHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingFatHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.fat.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingFatHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingFloorsClimbedChanged struct {
	EventType    ClientFacingFloorsClimbedChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                    `json:"user_id" url:"user_id"`
	ClientUserId string                                    `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                    `json:"team_id" url:"team_id"`
	Data         *GroupedFloorsClimbed                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingFloorsClimbedChanged) GetEventType() ClientFacingFloorsClimbedChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingFloorsClimbedChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingFloorsClimbedChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingFloorsClimbedChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingFloorsClimbedChanged) GetData() *GroupedFloorsClimbed {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingFloorsClimbedChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingFloorsClimbedChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingFloorsClimbedChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingFloorsClimbedChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingFloorsClimbedChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingFloorsClimbedChangedEventType string

const (
	ClientFacingFloorsClimbedChangedEventTypeDailyDataFloorsClimbedCreated ClientFacingFloorsClimbedChangedEventType = "daily.data.floors_climbed.created"
	ClientFacingFloorsClimbedChangedEventTypeDailyDataFloorsClimbedUpdated ClientFacingFloorsClimbedChangedEventType = "daily.data.floors_climbed.updated"
)

func NewClientFacingFloorsClimbedChangedEventTypeFromString(s string) (ClientFacingFloorsClimbedChangedEventType, error) {
	switch s {
	case "daily.data.floors_climbed.created":
		return ClientFacingFloorsClimbedChangedEventTypeDailyDataFloorsClimbedCreated, nil
	case "daily.data.floors_climbed.updated":
		return ClientFacingFloorsClimbedChangedEventTypeDailyDataFloorsClimbedUpdated, nil
	}
	var t ClientFacingFloorsClimbedChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingFloorsClimbedChangedEventType) Ptr() *ClientFacingFloorsClimbedChangedEventType {
	return &c
}

type ClientFacingFloorsClimbedHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingFloorsClimbedHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingFloorsClimbedHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingFloorsClimbedHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingFloorsClimbedHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingFloorsClimbedHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingFloorsClimbedHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingFloorsClimbedHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingFloorsClimbedHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingFloorsClimbedHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.floors_climbed.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.floors_climbed.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingFloorsClimbedHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingFloorsClimbedHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.floors_climbed.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingFloorsClimbedHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingForcedExpiratoryVolume1Changed struct {
	EventType    ClientFacingForcedExpiratoryVolume1ChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                              `json:"user_id" url:"user_id"`
	ClientUserId string                                              `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                              `json:"team_id" url:"team_id"`
	Data         *GroupedForcedExpiratoryVolume1                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingForcedExpiratoryVolume1Changed) GetEventType() ClientFacingForcedExpiratoryVolume1ChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingForcedExpiratoryVolume1Changed) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingForcedExpiratoryVolume1Changed) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingForcedExpiratoryVolume1Changed) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingForcedExpiratoryVolume1Changed) GetData() *GroupedForcedExpiratoryVolume1 {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingForcedExpiratoryVolume1Changed) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingForcedExpiratoryVolume1Changed) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingForcedExpiratoryVolume1Changed
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingForcedExpiratoryVolume1Changed(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingForcedExpiratoryVolume1Changed) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingForcedExpiratoryVolume1ChangedEventType string

const (
	ClientFacingForcedExpiratoryVolume1ChangedEventTypeDailyDataForcedExpiratoryVolume1Created ClientFacingForcedExpiratoryVolume1ChangedEventType = "daily.data.forced_expiratory_volume_1.created"
	ClientFacingForcedExpiratoryVolume1ChangedEventTypeDailyDataForcedExpiratoryVolume1Updated ClientFacingForcedExpiratoryVolume1ChangedEventType = "daily.data.forced_expiratory_volume_1.updated"
)

func NewClientFacingForcedExpiratoryVolume1ChangedEventTypeFromString(s string) (ClientFacingForcedExpiratoryVolume1ChangedEventType, error) {
	switch s {
	case "daily.data.forced_expiratory_volume_1.created":
		return ClientFacingForcedExpiratoryVolume1ChangedEventTypeDailyDataForcedExpiratoryVolume1Created, nil
	case "daily.data.forced_expiratory_volume_1.updated":
		return ClientFacingForcedExpiratoryVolume1ChangedEventTypeDailyDataForcedExpiratoryVolume1Updated, nil
	}
	var t ClientFacingForcedExpiratoryVolume1ChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingForcedExpiratoryVolume1ChangedEventType) Ptr() *ClientFacingForcedExpiratoryVolume1ChangedEventType {
	return &c
}

type ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.forced_expiratory_volume_1.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.forced_expiratory_volume_1.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.forced_expiratory_volume_1.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingForcedExpiratoryVolume1HistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingForcedVitalCapacityChanged struct {
	EventType    ClientFacingForcedVitalCapacityChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                          `json:"user_id" url:"user_id"`
	ClientUserId string                                          `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                          `json:"team_id" url:"team_id"`
	Data         *GroupedForcedVitalCapacity                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingForcedVitalCapacityChanged) GetEventType() ClientFacingForcedVitalCapacityChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingForcedVitalCapacityChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingForcedVitalCapacityChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingForcedVitalCapacityChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingForcedVitalCapacityChanged) GetData() *GroupedForcedVitalCapacity {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingForcedVitalCapacityChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingForcedVitalCapacityChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingForcedVitalCapacityChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingForcedVitalCapacityChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingForcedVitalCapacityChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingForcedVitalCapacityChangedEventType string

const (
	ClientFacingForcedVitalCapacityChangedEventTypeDailyDataForcedVitalCapacityCreated ClientFacingForcedVitalCapacityChangedEventType = "daily.data.forced_vital_capacity.created"
	ClientFacingForcedVitalCapacityChangedEventTypeDailyDataForcedVitalCapacityUpdated ClientFacingForcedVitalCapacityChangedEventType = "daily.data.forced_vital_capacity.updated"
)

func NewClientFacingForcedVitalCapacityChangedEventTypeFromString(s string) (ClientFacingForcedVitalCapacityChangedEventType, error) {
	switch s {
	case "daily.data.forced_vital_capacity.created":
		return ClientFacingForcedVitalCapacityChangedEventTypeDailyDataForcedVitalCapacityCreated, nil
	case "daily.data.forced_vital_capacity.updated":
		return ClientFacingForcedVitalCapacityChangedEventTypeDailyDataForcedVitalCapacityUpdated, nil
	}
	var t ClientFacingForcedVitalCapacityChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingForcedVitalCapacityChangedEventType) Ptr() *ClientFacingForcedVitalCapacityChangedEventType {
	return &c
}

type ClientFacingForcedVitalCapacityHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingForcedVitalCapacityHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingForcedVitalCapacityHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingForcedVitalCapacityHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingForcedVitalCapacityHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingForcedVitalCapacityHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingForcedVitalCapacityHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingForcedVitalCapacityHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingForcedVitalCapacityHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingForcedVitalCapacityHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.forced_vital_capacity.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.forced_vital_capacity.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingForcedVitalCapacityHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingForcedVitalCapacityHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.forced_vital_capacity.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingForcedVitalCapacityHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingGlucoseChanged struct {
	EventType    ClientFacingGlucoseChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                              `json:"user_id" url:"user_id"`
	ClientUserId string                              `json:"client_user_id" url:"client_user_id"`
	TeamId       string                              `json:"team_id" url:"team_id"`
	Data         *GroupedGlucose                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingGlucoseChanged) GetEventType() ClientFacingGlucoseChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingGlucoseChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingGlucoseChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingGlucoseChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingGlucoseChanged) GetData() *GroupedGlucose {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingGlucoseChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingGlucoseChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingGlucoseChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingGlucoseChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingGlucoseChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingGlucoseChangedEventType string

const (
	ClientFacingGlucoseChangedEventTypeDailyDataGlucoseCreated ClientFacingGlucoseChangedEventType = "daily.data.glucose.created"
	ClientFacingGlucoseChangedEventTypeDailyDataGlucoseUpdated ClientFacingGlucoseChangedEventType = "daily.data.glucose.updated"
)

func NewClientFacingGlucoseChangedEventTypeFromString(s string) (ClientFacingGlucoseChangedEventType, error) {
	switch s {
	case "daily.data.glucose.created":
		return ClientFacingGlucoseChangedEventTypeDailyDataGlucoseCreated, nil
	case "daily.data.glucose.updated":
		return ClientFacingGlucoseChangedEventTypeDailyDataGlucoseUpdated, nil
	}
	var t ClientFacingGlucoseChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingGlucoseChangedEventType) Ptr() *ClientFacingGlucoseChangedEventType {
	return &c
}

type ClientFacingGlucoseHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingGlucoseHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingGlucoseHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingGlucoseHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingGlucoseHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingGlucoseHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingGlucoseHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingGlucoseHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingGlucoseHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingGlucoseHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.glucose.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.glucose.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingGlucoseHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingGlucoseHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.glucose.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingGlucoseHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHandwashingChanged struct {
	EventType    ClientFacingHandwashingChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                  `json:"user_id" url:"user_id"`
	ClientUserId string                                  `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                  `json:"team_id" url:"team_id"`
	Data         *GroupedHandwashing                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHandwashingChanged) GetEventType() ClientFacingHandwashingChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingHandwashingChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHandwashingChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHandwashingChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHandwashingChanged) GetData() *GroupedHandwashing {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHandwashingChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHandwashingChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingHandwashingChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingHandwashingChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHandwashingChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHandwashingChangedEventType string

const (
	ClientFacingHandwashingChangedEventTypeDailyDataHandwashingCreated ClientFacingHandwashingChangedEventType = "daily.data.handwashing.created"
	ClientFacingHandwashingChangedEventTypeDailyDataHandwashingUpdated ClientFacingHandwashingChangedEventType = "daily.data.handwashing.updated"
)

func NewClientFacingHandwashingChangedEventTypeFromString(s string) (ClientFacingHandwashingChangedEventType, error) {
	switch s {
	case "daily.data.handwashing.created":
		return ClientFacingHandwashingChangedEventTypeDailyDataHandwashingCreated, nil
	case "daily.data.handwashing.updated":
		return ClientFacingHandwashingChangedEventTypeDailyDataHandwashingUpdated, nil
	}
	var t ClientFacingHandwashingChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingHandwashingChangedEventType) Ptr() *ClientFacingHandwashingChangedEventType {
	return &c
}

type ClientFacingHandwashingHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHandwashingHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHandwashingHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHandwashingHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHandwashingHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHandwashingHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingHandwashingHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHandwashingHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHandwashingHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHandwashingHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.handwashing.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.handwashing.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHandwashingHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHandwashingHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.handwashing.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHandwashingHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHeartRateAlertChanged struct {
	EventType    ClientFacingHeartRateAlertChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                     `json:"user_id" url:"user_id"`
	ClientUserId string                                     `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                     `json:"team_id" url:"team_id"`
	Data         *GroupedHeartRateAlert                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHeartRateAlertChanged) GetEventType() ClientFacingHeartRateAlertChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingHeartRateAlertChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHeartRateAlertChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHeartRateAlertChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHeartRateAlertChanged) GetData() *GroupedHeartRateAlert {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHeartRateAlertChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHeartRateAlertChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingHeartRateAlertChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingHeartRateAlertChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHeartRateAlertChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHeartRateAlertChangedEventType string

const (
	ClientFacingHeartRateAlertChangedEventTypeDailyDataHeartRateAlertCreated ClientFacingHeartRateAlertChangedEventType = "daily.data.heart_rate_alert.created"
	ClientFacingHeartRateAlertChangedEventTypeDailyDataHeartRateAlertUpdated ClientFacingHeartRateAlertChangedEventType = "daily.data.heart_rate_alert.updated"
)

func NewClientFacingHeartRateAlertChangedEventTypeFromString(s string) (ClientFacingHeartRateAlertChangedEventType, error) {
	switch s {
	case "daily.data.heart_rate_alert.created":
		return ClientFacingHeartRateAlertChangedEventTypeDailyDataHeartRateAlertCreated, nil
	case "daily.data.heart_rate_alert.updated":
		return ClientFacingHeartRateAlertChangedEventTypeDailyDataHeartRateAlertUpdated, nil
	}
	var t ClientFacingHeartRateAlertChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingHeartRateAlertChangedEventType) Ptr() *ClientFacingHeartRateAlertChangedEventType {
	return &c
}

type ClientFacingHeartRateAlertHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHeartRateAlertHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHeartRateAlertHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHeartRateAlertHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHeartRateAlertHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHeartRateAlertHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingHeartRateAlertHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHeartRateAlertHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHeartRateAlertHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHeartRateAlertHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.heart_rate_alert.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.heart_rate_alert.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHeartRateAlertHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHeartRateAlertHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.heart_rate_alert.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHeartRateAlertHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHeartRateRecoveryOneMinuteChanged struct {
	EventType    ClientFacingHeartRateRecoveryOneMinuteChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                                 `json:"user_id" url:"user_id"`
	ClientUserId string                                                 `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                                 `json:"team_id" url:"team_id"`
	Data         *GroupedHeartRateRecoveryOneMinute                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHeartRateRecoveryOneMinuteChanged) GetEventType() ClientFacingHeartRateRecoveryOneMinuteChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingHeartRateRecoveryOneMinuteChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHeartRateRecoveryOneMinuteChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHeartRateRecoveryOneMinuteChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHeartRateRecoveryOneMinuteChanged) GetData() *GroupedHeartRateRecoveryOneMinute {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHeartRateRecoveryOneMinuteChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHeartRateRecoveryOneMinuteChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingHeartRateRecoveryOneMinuteChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingHeartRateRecoveryOneMinuteChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHeartRateRecoveryOneMinuteChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHeartRateRecoveryOneMinuteChangedEventType string

const (
	ClientFacingHeartRateRecoveryOneMinuteChangedEventTypeDailyDataHeartRateRecoveryOneMinuteCreated ClientFacingHeartRateRecoveryOneMinuteChangedEventType = "daily.data.heart_rate_recovery_one_minute.created"
	ClientFacingHeartRateRecoveryOneMinuteChangedEventTypeDailyDataHeartRateRecoveryOneMinuteUpdated ClientFacingHeartRateRecoveryOneMinuteChangedEventType = "daily.data.heart_rate_recovery_one_minute.updated"
)

func NewClientFacingHeartRateRecoveryOneMinuteChangedEventTypeFromString(s string) (ClientFacingHeartRateRecoveryOneMinuteChangedEventType, error) {
	switch s {
	case "daily.data.heart_rate_recovery_one_minute.created":
		return ClientFacingHeartRateRecoveryOneMinuteChangedEventTypeDailyDataHeartRateRecoveryOneMinuteCreated, nil
	case "daily.data.heart_rate_recovery_one_minute.updated":
		return ClientFacingHeartRateRecoveryOneMinuteChangedEventTypeDailyDataHeartRateRecoveryOneMinuteUpdated, nil
	}
	var t ClientFacingHeartRateRecoveryOneMinuteChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingHeartRateRecoveryOneMinuteChangedEventType) Ptr() *ClientFacingHeartRateRecoveryOneMinuteChangedEventType {
	return &c
}

type ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.heart_rate_recovery_one_minute.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.heart_rate_recovery_one_minute.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.heart_rate_recovery_one_minute.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHeartRateRecoveryOneMinuteHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHeartRateTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in bpm.
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// Heart rate in bpm
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHeartRateTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingHeartRateTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingHeartRateTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingHeartRateTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingHeartRateTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingHeartRateTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingHeartRateTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHeartRateTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHeartRateTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHeartRateTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHeartRateTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHeartRateTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHeartRateTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHeartrateChanged struct {
	EventType    ClientFacingHeartrateChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                `json:"user_id" url:"user_id"`
	ClientUserId string                                `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                `json:"team_id" url:"team_id"`
	Data         *GroupedHeartRate                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHeartrateChanged) GetEventType() ClientFacingHeartrateChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingHeartrateChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHeartrateChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHeartrateChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHeartrateChanged) GetData() *GroupedHeartRate {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHeartrateChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHeartrateChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingHeartrateChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingHeartrateChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHeartrateChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHeartrateChangedEventType string

const (
	ClientFacingHeartrateChangedEventTypeDailyDataHeartrateCreated ClientFacingHeartrateChangedEventType = "daily.data.heartrate.created"
	ClientFacingHeartrateChangedEventTypeDailyDataHeartrateUpdated ClientFacingHeartrateChangedEventType = "daily.data.heartrate.updated"
)

func NewClientFacingHeartrateChangedEventTypeFromString(s string) (ClientFacingHeartrateChangedEventType, error) {
	switch s {
	case "daily.data.heartrate.created":
		return ClientFacingHeartrateChangedEventTypeDailyDataHeartrateCreated, nil
	case "daily.data.heartrate.updated":
		return ClientFacingHeartrateChangedEventTypeDailyDataHeartrateUpdated, nil
	}
	var t ClientFacingHeartrateChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingHeartrateChangedEventType) Ptr() *ClientFacingHeartrateChangedEventType {
	return &c
}

type ClientFacingHeartrateHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHeartrateHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHeartrateHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHeartrateHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHeartrateHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHeartrateHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingHeartrateHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHeartrateHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHeartrateHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHeartrateHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.heartrate.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.heartrate.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHeartrateHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHeartrateHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.heartrate.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHeartrateHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHrvChanged struct {
	EventType    ClientFacingHrvChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                          `json:"user_id" url:"user_id"`
	ClientUserId string                          `json:"client_user_id" url:"client_user_id"`
	TeamId       string                          `json:"team_id" url:"team_id"`
	Data         *GroupedHrv                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHrvChanged) GetEventType() ClientFacingHrvChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingHrvChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHrvChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHrvChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHrvChanged) GetData() *GroupedHrv {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHrvChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHrvChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingHrvChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingHrvChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHrvChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHrvChangedEventType string

const (
	ClientFacingHrvChangedEventTypeDailyDataHrvCreated ClientFacingHrvChangedEventType = "daily.data.hrv.created"
	ClientFacingHrvChangedEventTypeDailyDataHrvUpdated ClientFacingHrvChangedEventType = "daily.data.hrv.updated"
)

func NewClientFacingHrvChangedEventTypeFromString(s string) (ClientFacingHrvChangedEventType, error) {
	switch s {
	case "daily.data.hrv.created":
		return ClientFacingHrvChangedEventTypeDailyDataHrvCreated, nil
	case "daily.data.hrv.updated":
		return ClientFacingHrvChangedEventTypeDailyDataHrvUpdated, nil
	}
	var t ClientFacingHrvChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingHrvChangedEventType) Ptr() *ClientFacingHrvChangedEventType {
	return &c
}

type ClientFacingHrvHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHrvHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingHrvHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingHrvHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingHrvHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingHrvHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingHrvHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHrvHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHrvHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHrvHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.hrv.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.hrv.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHrvHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHrvHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.hrv.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHrvHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHrvTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in rmssd.
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// HRV calculated using rmssd during sleep
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHrvTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingHrvTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingHrvTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingHrvTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingHrvTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingHrvTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingHrvTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHrvTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHrvTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHrvTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHrvTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHrvTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHrvTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHypnogramTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// enum: 1: deep, 2: light, 3: rem, 4: awake, -1: missing_data.
	Unit string `json:"unit" url:"unit"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// Hypnogram for sleep stages {"deep": 1, "light": 2, "rem": 3, "awake": 4, "manual": 5, "missing_data": -1}
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHypnogramTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingHypnogramTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingHypnogramTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingHypnogramTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingHypnogramTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingHypnogramTimeseries) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingHypnogramTimeseries) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingHypnogramTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingHypnogramTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHypnogramTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHypnogramTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHypnogramTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHypnogramTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHypnogramTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHypnogramTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingIgeChanged struct {
	EventType    ClientFacingIgeChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                          `json:"user_id" url:"user_id"`
	ClientUserId string                          `json:"client_user_id" url:"client_user_id"`
	TeamId       string                          `json:"team_id" url:"team_id"`
	Data         *GroupedIge                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingIgeChanged) GetEventType() ClientFacingIgeChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingIgeChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingIgeChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingIgeChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingIgeChanged) GetData() *GroupedIge {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingIgeChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingIgeChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingIgeChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingIgeChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingIgeChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingIgeChangedEventType string

const (
	ClientFacingIgeChangedEventTypeDailyDataIgeCreated ClientFacingIgeChangedEventType = "daily.data.ige.created"
	ClientFacingIgeChangedEventTypeDailyDataIgeUpdated ClientFacingIgeChangedEventType = "daily.data.ige.updated"
)

func NewClientFacingIgeChangedEventTypeFromString(s string) (ClientFacingIgeChangedEventType, error) {
	switch s {
	case "daily.data.ige.created":
		return ClientFacingIgeChangedEventTypeDailyDataIgeCreated, nil
	case "daily.data.ige.updated":
		return ClientFacingIgeChangedEventTypeDailyDataIgeUpdated, nil
	}
	var t ClientFacingIgeChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingIgeChangedEventType) Ptr() *ClientFacingIgeChangedEventType {
	return &c
}

type ClientFacingIgeHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingIgeHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingIgeHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingIgeHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingIgeHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingIgeHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingIgeHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingIgeHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingIgeHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingIgeHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.ige.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.ige.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingIgeHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingIgeHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.ige.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingIgeHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingIggChanged struct {
	EventType    ClientFacingIggChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                          `json:"user_id" url:"user_id"`
	ClientUserId string                          `json:"client_user_id" url:"client_user_id"`
	TeamId       string                          `json:"team_id" url:"team_id"`
	Data         *GroupedIgg                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingIggChanged) GetEventType() ClientFacingIggChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingIggChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingIggChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingIggChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingIggChanged) GetData() *GroupedIgg {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingIggChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingIggChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingIggChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingIggChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingIggChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingIggChangedEventType string

const (
	ClientFacingIggChangedEventTypeDailyDataIggCreated ClientFacingIggChangedEventType = "daily.data.igg.created"
	ClientFacingIggChangedEventTypeDailyDataIggUpdated ClientFacingIggChangedEventType = "daily.data.igg.updated"
)

func NewClientFacingIggChangedEventTypeFromString(s string) (ClientFacingIggChangedEventType, error) {
	switch s {
	case "daily.data.igg.created":
		return ClientFacingIggChangedEventTypeDailyDataIggCreated, nil
	case "daily.data.igg.updated":
		return ClientFacingIggChangedEventTypeDailyDataIggUpdated, nil
	}
	var t ClientFacingIggChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingIggChangedEventType) Ptr() *ClientFacingIggChangedEventType {
	return &c
}

type ClientFacingIggHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingIggHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingIggHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingIggHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingIggHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingIggHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingIggHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingIggHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingIggHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingIggHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.igg.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.igg.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingIggHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingIggHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.igg.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingIggHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingInhalerUsageChanged struct {
	EventType    ClientFacingInhalerUsageChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                   `json:"user_id" url:"user_id"`
	ClientUserId string                                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                   `json:"team_id" url:"team_id"`
	Data         *GroupedInhalerUsage                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingInhalerUsageChanged) GetEventType() ClientFacingInhalerUsageChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingInhalerUsageChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingInhalerUsageChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingInhalerUsageChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingInhalerUsageChanged) GetData() *GroupedInhalerUsage {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingInhalerUsageChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingInhalerUsageChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingInhalerUsageChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingInhalerUsageChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingInhalerUsageChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingInhalerUsageChangedEventType string

const (
	ClientFacingInhalerUsageChangedEventTypeDailyDataInhalerUsageCreated ClientFacingInhalerUsageChangedEventType = "daily.data.inhaler_usage.created"
	ClientFacingInhalerUsageChangedEventTypeDailyDataInhalerUsageUpdated ClientFacingInhalerUsageChangedEventType = "daily.data.inhaler_usage.updated"
)

func NewClientFacingInhalerUsageChangedEventTypeFromString(s string) (ClientFacingInhalerUsageChangedEventType, error) {
	switch s {
	case "daily.data.inhaler_usage.created":
		return ClientFacingInhalerUsageChangedEventTypeDailyDataInhalerUsageCreated, nil
	case "daily.data.inhaler_usage.updated":
		return ClientFacingInhalerUsageChangedEventTypeDailyDataInhalerUsageUpdated, nil
	}
	var t ClientFacingInhalerUsageChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingInhalerUsageChangedEventType) Ptr() *ClientFacingInhalerUsageChangedEventType {
	return &c
}

type ClientFacingInhalerUsageHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingInhalerUsageHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingInhalerUsageHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingInhalerUsageHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingInhalerUsageHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingInhalerUsageHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingInhalerUsageHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingInhalerUsageHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingInhalerUsageHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingInhalerUsageHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.inhaler_usage.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.inhaler_usage.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingInhalerUsageHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingInhalerUsageHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.inhaler_usage.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingInhalerUsageHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingInsulinInjectionChanged struct {
	EventType    ClientFacingInsulinInjectionChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                       `json:"user_id" url:"user_id"`
	ClientUserId string                                       `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                       `json:"team_id" url:"team_id"`
	Data         *GroupedInsulinInjection                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingInsulinInjectionChanged) GetEventType() ClientFacingInsulinInjectionChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingInsulinInjectionChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingInsulinInjectionChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingInsulinInjectionChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingInsulinInjectionChanged) GetData() *GroupedInsulinInjection {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingInsulinInjectionChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingInsulinInjectionChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingInsulinInjectionChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingInsulinInjectionChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingInsulinInjectionChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingInsulinInjectionChangedEventType string

const (
	ClientFacingInsulinInjectionChangedEventTypeDailyDataInsulinInjectionCreated ClientFacingInsulinInjectionChangedEventType = "daily.data.insulin_injection.created"
	ClientFacingInsulinInjectionChangedEventTypeDailyDataInsulinInjectionUpdated ClientFacingInsulinInjectionChangedEventType = "daily.data.insulin_injection.updated"
)

func NewClientFacingInsulinInjectionChangedEventTypeFromString(s string) (ClientFacingInsulinInjectionChangedEventType, error) {
	switch s {
	case "daily.data.insulin_injection.created":
		return ClientFacingInsulinInjectionChangedEventTypeDailyDataInsulinInjectionCreated, nil
	case "daily.data.insulin_injection.updated":
		return ClientFacingInsulinInjectionChangedEventTypeDailyDataInsulinInjectionUpdated, nil
	}
	var t ClientFacingInsulinInjectionChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingInsulinInjectionChangedEventType) Ptr() *ClientFacingInsulinInjectionChangedEventType {
	return &c
}

type ClientFacingInsulinInjectionHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingInsulinInjectionHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingInsulinInjectionHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingInsulinInjectionHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingInsulinInjectionHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingInsulinInjectionHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingInsulinInjectionHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingInsulinInjectionHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingInsulinInjectionHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingInsulinInjectionHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.insulin_injection.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.insulin_injection.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingInsulinInjectionHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingInsulinInjectionHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.insulin_injection.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingInsulinInjectionHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingLab struct {
	Id                int                       `json:"id" url:"id"`
	Slug              string                    `json:"slug" url:"slug"`
	Name              string                    `json:"name" url:"name"`
	FirstLineAddress  string                    `json:"first_line_address" url:"first_line_address"`
	City              string                    `json:"city" url:"city"`
	Zipcode           string                    `json:"zipcode" url:"zipcode"`
	CollectionMethods []LabTestCollectionMethod `json:"collection_methods" url:"collection_methods"`
	SampleTypes       []LabTestSampleType       `json:"sample_types" url:"sample_types"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingLab) GetId() int {
	if c == nil {
		return 0
	}
	return c.Id
}

func (c *ClientFacingLab) GetSlug() string {
	if c == nil {
		return ""
	}
	return c.Slug
}

func (c *ClientFacingLab) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ClientFacingLab) GetFirstLineAddress() string {
	if c == nil {
		return ""
	}
	return c.FirstLineAddress
}

func (c *ClientFacingLab) GetCity() string {
	if c == nil {
		return ""
	}
	return c.City
}

func (c *ClientFacingLab) GetZipcode() string {
	if c == nil {
		return ""
	}
	return c.Zipcode
}

func (c *ClientFacingLab) GetCollectionMethods() []LabTestCollectionMethod {
	if c == nil {
		return nil
	}
	return c.CollectionMethods
}

func (c *ClientFacingLab) GetSampleTypes() []LabTestSampleType {
	if c == nil {
		return nil
	}
	return c.SampleTypes
}

func (c *ClientFacingLab) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingLab) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingLab
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingLab(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingLab) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingLabTest struct {
	Id         string                  `json:"id" url:"id"`
	Slug       string                  `json:"slug" url:"slug"`
	Name       string                  `json:"name" url:"name"`
	SampleType LabTestSampleType       `json:"sample_type" url:"sample_type"`
	Method     LabTestCollectionMethod `json:"method" url:"method"`
	Price      float64                 `json:"price" url:"price"`
	// Deprecated. Use status instead.
	IsActive bool          `json:"is_active" url:"is_active"`
	Status   LabTestStatus `json:"status" url:"status"`
	// Defines whether a lab test requires fasting.
	Fasting *bool                 `json:"fasting,omitempty" url:"fasting,omitempty"`
	Lab     *ClientFacingLab      `json:"lab,omitempty" url:"lab,omitempty"`
	Markers []*ClientFacingMarker `json:"markers,omitempty" url:"markers,omitempty"`
	// Denotes whether a lab test requires using non-Vital physician networks. If it does then it's delegated - no otherwise.
	IsDelegated *bool `json:"is_delegated,omitempty" url:"is_delegated,omitempty"`
	// Whether the lab test was auto-generated by Vital
	AutoGenerated *bool `json:"auto_generated,omitempty" url:"auto_generated,omitempty"`
	// Whether or not the lab test has collection instructions.
	HasCollectionInstructions *bool `json:"has_collection_instructions,omitempty" url:"has_collection_instructions,omitempty"`
	// The common turnaround time in days for the lab test. This is the expected time for the lab to process the test and return results.
	CommonTatDays *int `json:"common_tat_days,omitempty" url:"common_tat_days,omitempty"`
	// The worst-case turnaround time in days for the lab test. This is the maximum time the lab may take to process the test and return results.
	WorstCaseTatDays *int `json:"worst_case_tat_days,omitempty" url:"worst_case_tat_days,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingLabTest) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ClientFacingLabTest) GetSlug() string {
	if c == nil {
		return ""
	}
	return c.Slug
}

func (c *ClientFacingLabTest) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ClientFacingLabTest) GetSampleType() LabTestSampleType {
	if c == nil {
		return ""
	}
	return c.SampleType
}

func (c *ClientFacingLabTest) GetMethod() LabTestCollectionMethod {
	if c == nil {
		return ""
	}
	return c.Method
}

func (c *ClientFacingLabTest) GetPrice() float64 {
	if c == nil {
		return 0
	}
	return c.Price
}

func (c *ClientFacingLabTest) GetIsActive() bool {
	if c == nil {
		return false
	}
	return c.IsActive
}

func (c *ClientFacingLabTest) GetStatus() LabTestStatus {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *ClientFacingLabTest) GetFasting() *bool {
	if c == nil {
		return nil
	}
	return c.Fasting
}

func (c *ClientFacingLabTest) GetLab() *ClientFacingLab {
	if c == nil {
		return nil
	}
	return c.Lab
}

func (c *ClientFacingLabTest) GetMarkers() []*ClientFacingMarker {
	if c == nil {
		return nil
	}
	return c.Markers
}

func (c *ClientFacingLabTest) GetIsDelegated() *bool {
	if c == nil {
		return nil
	}
	return c.IsDelegated
}

func (c *ClientFacingLabTest) GetAutoGenerated() *bool {
	if c == nil {
		return nil
	}
	return c.AutoGenerated
}

func (c *ClientFacingLabTest) GetHasCollectionInstructions() *bool {
	if c == nil {
		return nil
	}
	return c.HasCollectionInstructions
}

func (c *ClientFacingLabTest) GetCommonTatDays() *int {
	if c == nil {
		return nil
	}
	return c.CommonTatDays
}

func (c *ClientFacingLabTest) GetWorstCaseTatDays() *int {
	if c == nil {
		return nil
	}
	return c.WorstCaseTatDays
}

func (c *ClientFacingLabTest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingLabTest) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingLabTest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingLabTest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingLabTest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingLeanBodyMassChanged struct {
	EventType    ClientFacingLeanBodyMassChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                   `json:"user_id" url:"user_id"`
	ClientUserId string                                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                   `json:"team_id" url:"team_id"`
	Data         *GroupedLeanBodyMass                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingLeanBodyMassChanged) GetEventType() ClientFacingLeanBodyMassChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingLeanBodyMassChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingLeanBodyMassChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingLeanBodyMassChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingLeanBodyMassChanged) GetData() *GroupedLeanBodyMass {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingLeanBodyMassChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingLeanBodyMassChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingLeanBodyMassChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingLeanBodyMassChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingLeanBodyMassChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingLeanBodyMassChangedEventType string

const (
	ClientFacingLeanBodyMassChangedEventTypeDailyDataLeanBodyMassCreated ClientFacingLeanBodyMassChangedEventType = "daily.data.lean_body_mass.created"
	ClientFacingLeanBodyMassChangedEventTypeDailyDataLeanBodyMassUpdated ClientFacingLeanBodyMassChangedEventType = "daily.data.lean_body_mass.updated"
)

func NewClientFacingLeanBodyMassChangedEventTypeFromString(s string) (ClientFacingLeanBodyMassChangedEventType, error) {
	switch s {
	case "daily.data.lean_body_mass.created":
		return ClientFacingLeanBodyMassChangedEventTypeDailyDataLeanBodyMassCreated, nil
	case "daily.data.lean_body_mass.updated":
		return ClientFacingLeanBodyMassChangedEventTypeDailyDataLeanBodyMassUpdated, nil
	}
	var t ClientFacingLeanBodyMassChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingLeanBodyMassChangedEventType) Ptr() *ClientFacingLeanBodyMassChangedEventType {
	return &c
}

type ClientFacingLeanBodyMassHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingLeanBodyMassHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingLeanBodyMassHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingLeanBodyMassHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingLeanBodyMassHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingLeanBodyMassHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingLeanBodyMassHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingLeanBodyMassHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingLeanBodyMassHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingLeanBodyMassHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.lean_body_mass.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.lean_body_mass.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingLeanBodyMassHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingLeanBodyMassHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.lean_body_mass.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingLeanBodyMassHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingMarker struct {
	Id               int         `json:"id" url:"id"`
	Name             string      `json:"name" url:"name"`
	Slug             string      `json:"slug" url:"slug"`
	Description      *string     `json:"description,omitempty" url:"description,omitempty"`
	LabId            *int        `json:"lab_id,omitempty" url:"lab_id,omitempty"`
	ProviderId       *string     `json:"provider_id,omitempty" url:"provider_id,omitempty"`
	Type             *MarkerType `json:"type,omitempty" url:"type,omitempty"`
	Unit             *string     `json:"unit,omitempty" url:"unit,omitempty"`
	Price            *string     `json:"price,omitempty" url:"price,omitempty"`
	Aoe              *AoE        `json:"aoe,omitempty" url:"aoe,omitempty"`
	ALaCarteEnabled  *bool       `json:"a_la_carte_enabled,omitempty" url:"a_la_carte_enabled,omitempty"`
	CommonTatDays    *int        `json:"common_tat_days,omitempty" url:"common_tat_days,omitempty"`
	WorstCaseTatDays *int        `json:"worst_case_tat_days,omitempty" url:"worst_case_tat_days,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingMarker) GetId() int {
	if c == nil {
		return 0
	}
	return c.Id
}

func (c *ClientFacingMarker) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ClientFacingMarker) GetSlug() string {
	if c == nil {
		return ""
	}
	return c.Slug
}

func (c *ClientFacingMarker) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ClientFacingMarker) GetLabId() *int {
	if c == nil {
		return nil
	}
	return c.LabId
}

func (c *ClientFacingMarker) GetProviderId() *string {
	if c == nil {
		return nil
	}
	return c.ProviderId
}

func (c *ClientFacingMarker) GetType() *MarkerType {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingMarker) GetUnit() *string {
	if c == nil {
		return nil
	}
	return c.Unit
}

func (c *ClientFacingMarker) GetPrice() *string {
	if c == nil {
		return nil
	}
	return c.Price
}

func (c *ClientFacingMarker) GetAoe() *AoE {
	if c == nil {
		return nil
	}
	return c.Aoe
}

func (c *ClientFacingMarker) GetALaCarteEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.ALaCarteEnabled
}

func (c *ClientFacingMarker) GetCommonTatDays() *int {
	if c == nil {
		return nil
	}
	return c.CommonTatDays
}

func (c *ClientFacingMarker) GetWorstCaseTatDays() *int {
	if c == nil {
		return nil
	}
	return c.WorstCaseTatDays
}

func (c *ClientFacingMarker) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingMarker) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingMarker
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingMarker(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingMarker) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingMealChanged struct {
	EventType    ClientFacingMealChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                           `json:"user_id" url:"user_id"`
	ClientUserId string                           `json:"client_user_id" url:"client_user_id"`
	TeamId       string                           `json:"team_id" url:"team_id"`
	Data         *MealInDbBaseClientFacingSource  `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingMealChanged) GetEventType() ClientFacingMealChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingMealChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingMealChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingMealChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingMealChanged) GetData() *MealInDbBaseClientFacingSource {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingMealChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingMealChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingMealChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingMealChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingMealChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingMealChangedEventType string

const (
	ClientFacingMealChangedEventTypeDailyDataMealCreated ClientFacingMealChangedEventType = "daily.data.meal.created"
	ClientFacingMealChangedEventTypeDailyDataMealUpdated ClientFacingMealChangedEventType = "daily.data.meal.updated"
)

func NewClientFacingMealChangedEventTypeFromString(s string) (ClientFacingMealChangedEventType, error) {
	switch s {
	case "daily.data.meal.created":
		return ClientFacingMealChangedEventTypeDailyDataMealCreated, nil
	case "daily.data.meal.updated":
		return ClientFacingMealChangedEventTypeDailyDataMealUpdated, nil
	}
	var t ClientFacingMealChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingMealChangedEventType) Ptr() *ClientFacingMealChangedEventType {
	return &c
}

type ClientFacingMealHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingMealHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingMealHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingMealHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingMealHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingMealHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingMealHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingMealHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingMealHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingMealHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.meal.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.meal.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingMealHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingMealHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.meal.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingMealHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingMenstrualCycleChanged struct {
	EventType    ClientFacingMenstrualCycleChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                     `json:"user_id" url:"user_id"`
	ClientUserId string                                     `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                     `json:"team_id" url:"team_id"`
	Data         *ClientFacingMenstrualCycle                `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingMenstrualCycleChanged) GetEventType() ClientFacingMenstrualCycleChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingMenstrualCycleChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingMenstrualCycleChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingMenstrualCycleChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingMenstrualCycleChanged) GetData() *ClientFacingMenstrualCycle {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingMenstrualCycleChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingMenstrualCycleChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingMenstrualCycleChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingMenstrualCycleChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingMenstrualCycleChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingMenstrualCycleChangedEventType string

const (
	ClientFacingMenstrualCycleChangedEventTypeDailyDataMenstrualCycleCreated ClientFacingMenstrualCycleChangedEventType = "daily.data.menstrual_cycle.created"
	ClientFacingMenstrualCycleChangedEventTypeDailyDataMenstrualCycleUpdated ClientFacingMenstrualCycleChangedEventType = "daily.data.menstrual_cycle.updated"
)

func NewClientFacingMenstrualCycleChangedEventTypeFromString(s string) (ClientFacingMenstrualCycleChangedEventType, error) {
	switch s {
	case "daily.data.menstrual_cycle.created":
		return ClientFacingMenstrualCycleChangedEventTypeDailyDataMenstrualCycleCreated, nil
	case "daily.data.menstrual_cycle.updated":
		return ClientFacingMenstrualCycleChangedEventTypeDailyDataMenstrualCycleUpdated, nil
	}
	var t ClientFacingMenstrualCycleChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingMenstrualCycleChangedEventType) Ptr() *ClientFacingMenstrualCycleChangedEventType {
	return &c
}

type ClientFacingMenstrualCycleHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingMenstrualCycleHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingMenstrualCycleHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingMenstrualCycleHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingMenstrualCycleHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingMenstrualCycleHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingMenstrualCycleHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingMenstrualCycleHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingMenstrualCycleHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingMenstrualCycleHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.menstrual_cycle.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.menstrual_cycle.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingMenstrualCycleHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingMenstrualCycleHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.menstrual_cycle.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingMenstrualCycleHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingMindfulnessMinutesChanged struct {
	EventType    ClientFacingMindfulnessMinutesChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                         `json:"user_id" url:"user_id"`
	ClientUserId string                                         `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                         `json:"team_id" url:"team_id"`
	Data         *GroupedMindfulnessMinutes                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingMindfulnessMinutesChanged) GetEventType() ClientFacingMindfulnessMinutesChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingMindfulnessMinutesChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingMindfulnessMinutesChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingMindfulnessMinutesChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingMindfulnessMinutesChanged) GetData() *GroupedMindfulnessMinutes {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingMindfulnessMinutesChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingMindfulnessMinutesChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingMindfulnessMinutesChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingMindfulnessMinutesChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingMindfulnessMinutesChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingMindfulnessMinutesChangedEventType string

const (
	ClientFacingMindfulnessMinutesChangedEventTypeDailyDataMindfulnessMinutesCreated ClientFacingMindfulnessMinutesChangedEventType = "daily.data.mindfulness_minutes.created"
	ClientFacingMindfulnessMinutesChangedEventTypeDailyDataMindfulnessMinutesUpdated ClientFacingMindfulnessMinutesChangedEventType = "daily.data.mindfulness_minutes.updated"
)

func NewClientFacingMindfulnessMinutesChangedEventTypeFromString(s string) (ClientFacingMindfulnessMinutesChangedEventType, error) {
	switch s {
	case "daily.data.mindfulness_minutes.created":
		return ClientFacingMindfulnessMinutesChangedEventTypeDailyDataMindfulnessMinutesCreated, nil
	case "daily.data.mindfulness_minutes.updated":
		return ClientFacingMindfulnessMinutesChangedEventTypeDailyDataMindfulnessMinutesUpdated, nil
	}
	var t ClientFacingMindfulnessMinutesChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingMindfulnessMinutesChangedEventType) Ptr() *ClientFacingMindfulnessMinutesChangedEventType {
	return &c
}

type ClientFacingMindfulnessMinutesHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingMindfulnessMinutesHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingMindfulnessMinutesHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingMindfulnessMinutesHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingMindfulnessMinutesHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingMindfulnessMinutesHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingMindfulnessMinutesHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingMindfulnessMinutesHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingMindfulnessMinutesHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingMindfulnessMinutesHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.mindfulness_minutes.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.mindfulness_minutes.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingMindfulnessMinutesHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingMindfulnessMinutesHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.mindfulness_minutes.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingMindfulnessMinutesHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingNoteChanged struct {
	EventType    ClientFacingNoteChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                           `json:"user_id" url:"user_id"`
	ClientUserId string                           `json:"client_user_id" url:"client_user_id"`
	TeamId       string                           `json:"team_id" url:"team_id"`
	Data         *GroupedNote                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingNoteChanged) GetEventType() ClientFacingNoteChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingNoteChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingNoteChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingNoteChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingNoteChanged) GetData() *GroupedNote {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingNoteChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingNoteChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingNoteChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingNoteChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingNoteChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingNoteChangedEventType string

const (
	ClientFacingNoteChangedEventTypeDailyDataNoteCreated ClientFacingNoteChangedEventType = "daily.data.note.created"
	ClientFacingNoteChangedEventTypeDailyDataNoteUpdated ClientFacingNoteChangedEventType = "daily.data.note.updated"
)

func NewClientFacingNoteChangedEventTypeFromString(s string) (ClientFacingNoteChangedEventType, error) {
	switch s {
	case "daily.data.note.created":
		return ClientFacingNoteChangedEventTypeDailyDataNoteCreated, nil
	case "daily.data.note.updated":
		return ClientFacingNoteChangedEventTypeDailyDataNoteUpdated, nil
	}
	var t ClientFacingNoteChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingNoteChangedEventType) Ptr() *ClientFacingNoteChangedEventType {
	return &c
}

type ClientFacingNoteHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingNoteHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingNoteHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingNoteHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingNoteHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingNoteHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingNoteHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingNoteHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingNoteHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingNoteHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.note.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.note.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingNoteHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingNoteHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.note.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingNoteHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Schema for an on-site collection order in the client facing API.
// To be used as part of a ClientFacingOrder.
type ClientFacingOnSiteCollectionOrder struct {
	// The Junction on-site collection Order ID
	Id        string    `json:"id" url:"id"`
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingOnSiteCollectionOrder) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ClientFacingOnSiteCollectionOrder) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientFacingOnSiteCollectionOrder) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ClientFacingOnSiteCollectionOrder) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingOnSiteCollectionOrder) UnmarshalJSON(data []byte) error {
	type embed ClientFacingOnSiteCollectionOrder
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingOnSiteCollectionOrder(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingOnSiteCollectionOrder) MarshalJSON() ([]byte, error) {
	type embed ClientFacingOnSiteCollectionOrder
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingOnSiteCollectionOrder) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingOnSiteCollectionOrderDetails struct {
	Data *ClientFacingOnSiteCollectionOrder `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingOnSiteCollectionOrderDetails) GetData() *ClientFacingOnSiteCollectionOrder {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingOnSiteCollectionOrderDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingOnSiteCollectionOrderDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingOnSiteCollectionOrderDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingOnSiteCollectionOrderDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingOnSiteCollectionOrderDetails) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingOrder struct {
	// User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
	UserId string `json:"user_id" url:"user_id"`
	// The Vital Order ID
	Id string `json:"id" url:"id"`
	// Your team id.
	TeamId string `json:"team_id" url:"team_id"`
	// Patient Details
	PatientDetails *ClientFacingPatientDetailsCompatible `json:"patient_details,omitempty" url:"patient_details,omitempty"`
	// Patient Address
	PatientAddress *PatientAddressCompatible `json:"patient_address,omitempty" url:"patient_address,omitempty"`
	// The Vital Test associated with the order
	LabTest *ClientFacingLabTest      `json:"lab_test" url:"lab_test"`
	Details *ClientFacingOrderDetails `json:"details" url:"details"`
	// Sample ID
	SampleId *string `json:"sample_id,omitempty" url:"sample_id,omitempty"`
	// Notes associated with the order
	Notes *string `json:"notes,omitempty" url:"notes,omitempty"`
	// When your order was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// When your order was last updated.
	UpdatedAt time.Time                 `json:"updated_at" url:"updated_at"`
	Events    []*ClientFacingOrderEvent `json:"events" url:"events"`
	Status    *OrderTopLevelStatus      `json:"status,omitempty" url:"status,omitempty"`
	Physician *ClientFacingPhysician    `json:"physician,omitempty" url:"physician,omitempty"`
	// Vital ID of the health insurance.
	HealthInsuranceId *string `json:"health_insurance_id,omitempty" url:"health_insurance_id,omitempty"`
	// DEPRECATED. Requistion form url.
	RequisitionFormUrl *string `json:"requisition_form_url,omitempty" url:"requisition_form_url,omitempty"`
	// Defines whether order is priority or not. For some labs, this refers to a STAT order.
	Priority *bool `json:"priority,omitempty" url:"priority,omitempty"`
	// Shipping Details. For unregistered testkit orders.
	ShippingDetails *ShippingAddress `json:"shipping_details,omitempty" url:"shipping_details,omitempty"`
	// Schedule an Order to be processed in a future date.
	ActivateBy  *string  `json:"activate_by,omitempty" url:"activate_by,omitempty"`
	Passthrough *string  `json:"passthrough,omitempty" url:"passthrough,omitempty"`
	BillingType *Billing `json:"billing_type,omitempty" url:"billing_type,omitempty"`
	IcdCodes    []string `json:"icd_codes,omitempty" url:"icd_codes,omitempty"`
	// Defines whether the order has an Advanced Beneficiary Notice (ABN) form or not.
	HasAbn bool `json:"has_abn" url:"has_abn"`
	// Interpretation of the order result. Can be one of (normal, abnormal, critical).
	Interpretation *Interpretation `json:"interpretation,omitempty" url:"interpretation,omitempty"`
	// Defines whether the order result has missing biomarkers.
	HasMissingResults *bool `json:"has_missing_results,omitempty" url:"has_missing_results,omitempty"`
	// The common-case date by which the order result is expected to be available.
	ExpectedResultByDate *string `json:"expected_result_by_date,omitempty" url:"expected_result_by_date,omitempty"`
	// The latest date by which the order result is expected to be available.
	WorstCaseResultByDate *string `json:"worst_case_result_by_date,omitempty" url:"worst_case_result_by_date,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingOrder) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingOrder) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ClientFacingOrder) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingOrder) GetPatientDetails() *ClientFacingPatientDetailsCompatible {
	if c == nil {
		return nil
	}
	return c.PatientDetails
}

func (c *ClientFacingOrder) GetPatientAddress() *PatientAddressCompatible {
	if c == nil {
		return nil
	}
	return c.PatientAddress
}

func (c *ClientFacingOrder) GetLabTest() *ClientFacingLabTest {
	if c == nil {
		return nil
	}
	return c.LabTest
}

func (c *ClientFacingOrder) GetDetails() *ClientFacingOrderDetails {
	if c == nil {
		return nil
	}
	return c.Details
}

func (c *ClientFacingOrder) GetSampleId() *string {
	if c == nil {
		return nil
	}
	return c.SampleId
}

func (c *ClientFacingOrder) GetNotes() *string {
	if c == nil {
		return nil
	}
	return c.Notes
}

func (c *ClientFacingOrder) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientFacingOrder) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ClientFacingOrder) GetEvents() []*ClientFacingOrderEvent {
	if c == nil {
		return nil
	}
	return c.Events
}

func (c *ClientFacingOrder) GetStatus() *OrderTopLevelStatus {
	if c == nil {
		return nil
	}
	return c.Status
}

func (c *ClientFacingOrder) GetPhysician() *ClientFacingPhysician {
	if c == nil {
		return nil
	}
	return c.Physician
}

func (c *ClientFacingOrder) GetHealthInsuranceId() *string {
	if c == nil {
		return nil
	}
	return c.HealthInsuranceId
}

func (c *ClientFacingOrder) GetRequisitionFormUrl() *string {
	if c == nil {
		return nil
	}
	return c.RequisitionFormUrl
}

func (c *ClientFacingOrder) GetPriority() *bool {
	if c == nil {
		return nil
	}
	return c.Priority
}

func (c *ClientFacingOrder) GetShippingDetails() *ShippingAddress {
	if c == nil {
		return nil
	}
	return c.ShippingDetails
}

func (c *ClientFacingOrder) GetActivateBy() *string {
	if c == nil {
		return nil
	}
	return c.ActivateBy
}

func (c *ClientFacingOrder) GetPassthrough() *string {
	if c == nil {
		return nil
	}
	return c.Passthrough
}

func (c *ClientFacingOrder) GetBillingType() *Billing {
	if c == nil {
		return nil
	}
	return c.BillingType
}

func (c *ClientFacingOrder) GetIcdCodes() []string {
	if c == nil {
		return nil
	}
	return c.IcdCodes
}

func (c *ClientFacingOrder) GetHasAbn() bool {
	if c == nil {
		return false
	}
	return c.HasAbn
}

func (c *ClientFacingOrder) GetInterpretation() *Interpretation {
	if c == nil {
		return nil
	}
	return c.Interpretation
}

func (c *ClientFacingOrder) GetHasMissingResults() *bool {
	if c == nil {
		return nil
	}
	return c.HasMissingResults
}

func (c *ClientFacingOrder) GetExpectedResultByDate() *string {
	if c == nil {
		return nil
	}
	return c.ExpectedResultByDate
}

func (c *ClientFacingOrder) GetWorstCaseResultByDate() *string {
	if c == nil {
		return nil
	}
	return c.WorstCaseResultByDate
}

func (c *ClientFacingOrder) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingOrder) UnmarshalJSON(data []byte) error {
	type embed ClientFacingOrder
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingOrder(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingOrder) MarshalJSON() ([]byte, error) {
	type embed ClientFacingOrder
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingOrder) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingOrderChanged struct {
	EventType    ClientFacingOrderChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                            `json:"user_id" url:"user_id"`
	ClientUserId string                            `json:"client_user_id" url:"client_user_id"`
	TeamId       string                            `json:"team_id" url:"team_id"`
	Data         *ClientFacingOrder                `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingOrderChanged) GetEventType() ClientFacingOrderChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingOrderChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingOrderChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingOrderChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingOrderChanged) GetData() *ClientFacingOrder {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingOrderChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingOrderChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingOrderChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingOrderChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingOrderChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingOrderChangedEventType string

const (
	ClientFacingOrderChangedEventTypeLabtestOrderCreated ClientFacingOrderChangedEventType = "labtest.order.created"
	ClientFacingOrderChangedEventTypeLabtestOrderUpdated ClientFacingOrderChangedEventType = "labtest.order.updated"
)

func NewClientFacingOrderChangedEventTypeFromString(s string) (ClientFacingOrderChangedEventType, error) {
	switch s {
	case "labtest.order.created":
		return ClientFacingOrderChangedEventTypeLabtestOrderCreated, nil
	case "labtest.order.updated":
		return ClientFacingOrderChangedEventTypeLabtestOrderUpdated, nil
	}
	var t ClientFacingOrderChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingOrderChangedEventType) Ptr() *ClientFacingOrderChangedEventType {
	return &c
}

type ClientFacingOrderDetails struct {
	Type             string
	WalkInTest       *ClientFacingWalkInOrderDetails
	Testkit          *ClientFacingTestKitOrderDetails
	AtHomePhlebotomy *ClientFacingAtHomePhlebotomyOrderDetails
	OnSiteCollection *ClientFacingOnSiteCollectionOrderDetails
}

func (c *ClientFacingOrderDetails) GetType() string {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *ClientFacingOrderDetails) GetWalkInTest() *ClientFacingWalkInOrderDetails {
	if c == nil {
		return nil
	}
	return c.WalkInTest
}

func (c *ClientFacingOrderDetails) GetTestkit() *ClientFacingTestKitOrderDetails {
	if c == nil {
		return nil
	}
	return c.Testkit
}

func (c *ClientFacingOrderDetails) GetAtHomePhlebotomy() *ClientFacingAtHomePhlebotomyOrderDetails {
	if c == nil {
		return nil
	}
	return c.AtHomePhlebotomy
}

func (c *ClientFacingOrderDetails) GetOnSiteCollection() *ClientFacingOnSiteCollectionOrderDetails {
	if c == nil {
		return nil
	}
	return c.OnSiteCollection
}

func (c *ClientFacingOrderDetails) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	c.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", c)
	}
	switch unmarshaler.Type {
	case "walk_in_test":
		value := new(ClientFacingWalkInOrderDetails)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.WalkInTest = value
	case "testkit":
		value := new(ClientFacingTestKitOrderDetails)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Testkit = value
	case "at_home_phlebotomy":
		value := new(ClientFacingAtHomePhlebotomyOrderDetails)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.AtHomePhlebotomy = value
	case "on_site_collection":
		value := new(ClientFacingOnSiteCollectionOrderDetails)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.OnSiteCollection = value
	}
	return nil
}

func (c ClientFacingOrderDetails) MarshalJSON() ([]byte, error) {
	if err := c.validate(); err != nil {
		return nil, err
	}
	if c.WalkInTest != nil {
		return internal.MarshalJSONWithExtraProperty(c.WalkInTest, "type", "walk_in_test")
	}
	if c.Testkit != nil {
		return internal.MarshalJSONWithExtraProperty(c.Testkit, "type", "testkit")
	}
	if c.AtHomePhlebotomy != nil {
		return internal.MarshalJSONWithExtraProperty(c.AtHomePhlebotomy, "type", "at_home_phlebotomy")
	}
	if c.OnSiteCollection != nil {
		return internal.MarshalJSONWithExtraProperty(c.OnSiteCollection, "type", "on_site_collection")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", c)
}

type ClientFacingOrderDetailsVisitor interface {
	VisitWalkInTest(*ClientFacingWalkInOrderDetails) error
	VisitTestkit(*ClientFacingTestKitOrderDetails) error
	VisitAtHomePhlebotomy(*ClientFacingAtHomePhlebotomyOrderDetails) error
	VisitOnSiteCollection(*ClientFacingOnSiteCollectionOrderDetails) error
}

func (c *ClientFacingOrderDetails) Accept(visitor ClientFacingOrderDetailsVisitor) error {
	if c.WalkInTest != nil {
		return visitor.VisitWalkInTest(c.WalkInTest)
	}
	if c.Testkit != nil {
		return visitor.VisitTestkit(c.Testkit)
	}
	if c.AtHomePhlebotomy != nil {
		return visitor.VisitAtHomePhlebotomy(c.AtHomePhlebotomy)
	}
	if c.OnSiteCollection != nil {
		return visitor.VisitOnSiteCollection(c.OnSiteCollection)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", c)
}

func (c *ClientFacingOrderDetails) validate() error {
	if c == nil {
		return fmt.Errorf("type %T is nil", c)
	}
	var fields []string
	if c.WalkInTest != nil {
		fields = append(fields, "walk_in_test")
	}
	if c.Testkit != nil {
		fields = append(fields, "testkit")
	}
	if c.AtHomePhlebotomy != nil {
		fields = append(fields, "at_home_phlebotomy")
	}
	if c.OnSiteCollection != nil {
		fields = append(fields, "on_site_collection")
	}
	if len(fields) == 0 {
		if c.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", c, c.Type)
		}
		return fmt.Errorf("type %T is empty", c)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", c, fields)
	}
	if c.Type != "" {
		field := fields[0]
		if c.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				c,
				c.Type,
				c,
			)
		}
	}
	return nil
}

type ClientFacingOrderEvent struct {
	Id        int         `json:"id" url:"id"`
	CreatedAt time.Time   `json:"created_at" url:"created_at"`
	Status    OrderStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingOrderEvent) GetId() int {
	if c == nil {
		return 0
	}
	return c.Id
}

func (c *ClientFacingOrderEvent) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientFacingOrderEvent) GetStatus() OrderStatus {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *ClientFacingOrderEvent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingOrderEvent) UnmarshalJSON(data []byte) error {
	type embed ClientFacingOrderEvent
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingOrderEvent(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingOrderEvent) MarshalJSON() ([]byte, error) {
	type embed ClientFacingOrderEvent
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingOrderEvent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingPatientDetailsCompatible struct {
	FirstName   *string   `json:"first_name,omitempty" url:"first_name,omitempty"`
	LastName    *string   `json:"last_name,omitempty" url:"last_name,omitempty"`
	Dob         time.Time `json:"dob" url:"dob"`
	Gender      string    `json:"gender" url:"gender"`
	PhoneNumber *string   `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	Email       *string   `json:"email,omitempty" url:"email,omitempty"`
	// Parent/medical_proxy details. Required if patient is a minor.
	MedicalProxy *GuarantorDetails `json:"medical_proxy,omitempty" url:"medical_proxy,omitempty"`
	// If not provided, will be set to 'Not Specified'
	Race *Race `json:"race,omitempty" url:"race,omitempty"`
	// If not provided, will be set to 'Not Specified'
	Ethnicity *Ethnicity `json:"ethnicity,omitempty" url:"ethnicity,omitempty"`
	// If not provided, will be set to 'Not Specified'
	SexualOrientation *SexualOrientation `json:"sexual_orientation,omitempty" url:"sexual_orientation,omitempty"`
	// If not provided, will be set to 'Not Specified'
	GenderIdentity *GenderIdentity `json:"gender_identity,omitempty" url:"gender_identity,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingPatientDetailsCompatible) GetFirstName() *string {
	if c == nil {
		return nil
	}
	return c.FirstName
}

func (c *ClientFacingPatientDetailsCompatible) GetLastName() *string {
	if c == nil {
		return nil
	}
	return c.LastName
}

func (c *ClientFacingPatientDetailsCompatible) GetDob() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Dob
}

func (c *ClientFacingPatientDetailsCompatible) GetGender() string {
	if c == nil {
		return ""
	}
	return c.Gender
}

func (c *ClientFacingPatientDetailsCompatible) GetPhoneNumber() *string {
	if c == nil {
		return nil
	}
	return c.PhoneNumber
}

func (c *ClientFacingPatientDetailsCompatible) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *ClientFacingPatientDetailsCompatible) GetMedicalProxy() *GuarantorDetails {
	if c == nil {
		return nil
	}
	return c.MedicalProxy
}

func (c *ClientFacingPatientDetailsCompatible) GetRace() *Race {
	if c == nil {
		return nil
	}
	return c.Race
}

func (c *ClientFacingPatientDetailsCompatible) GetEthnicity() *Ethnicity {
	if c == nil {
		return nil
	}
	return c.Ethnicity
}

func (c *ClientFacingPatientDetailsCompatible) GetSexualOrientation() *SexualOrientation {
	if c == nil {
		return nil
	}
	return c.SexualOrientation
}

func (c *ClientFacingPatientDetailsCompatible) GetGenderIdentity() *GenderIdentity {
	if c == nil {
		return nil
	}
	return c.GenderIdentity
}

func (c *ClientFacingPatientDetailsCompatible) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingPatientDetailsCompatible) UnmarshalJSON(data []byte) error {
	type embed ClientFacingPatientDetailsCompatible
	var unmarshaler = struct {
		embed
		Dob *internal.DateTime `json:"dob"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingPatientDetailsCompatible(unmarshaler.embed)
	c.Dob = unmarshaler.Dob.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingPatientDetailsCompatible) MarshalJSON() ([]byte, error) {
	type embed ClientFacingPatientDetailsCompatible
	var marshaler = struct {
		embed
		Dob *internal.DateTime `json:"dob"`
	}{
		embed: embed(*c),
		Dob:   internal.NewDateTime(c.Dob),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingPatientDetailsCompatible) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// ℹ️ This enum is non-exhaustive.
type ClientFacingPayorCodeSource string

const (
	ClientFacingPayorCodeSourcePlatform ClientFacingPayorCodeSource = "platform"
	ClientFacingPayorCodeSourceTeam     ClientFacingPayorCodeSource = "team"
)

func NewClientFacingPayorCodeSourceFromString(s string) (ClientFacingPayorCodeSource, error) {
	switch s {
	case "platform":
		return ClientFacingPayorCodeSourcePlatform, nil
	case "team":
		return ClientFacingPayorCodeSourceTeam, nil
	}
	var t ClientFacingPayorCodeSource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingPayorCodeSource) Ptr() *ClientFacingPayorCodeSource {
	return &c
}

type ClientFacingPeakExpiratoryFlowRateChanged struct {
	EventType    ClientFacingPeakExpiratoryFlowRateChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                             `json:"user_id" url:"user_id"`
	ClientUserId string                                             `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                             `json:"team_id" url:"team_id"`
	Data         *GroupedPeakExpiratoryFlowRate                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingPeakExpiratoryFlowRateChanged) GetEventType() ClientFacingPeakExpiratoryFlowRateChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingPeakExpiratoryFlowRateChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingPeakExpiratoryFlowRateChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingPeakExpiratoryFlowRateChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingPeakExpiratoryFlowRateChanged) GetData() *GroupedPeakExpiratoryFlowRate {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingPeakExpiratoryFlowRateChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingPeakExpiratoryFlowRateChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingPeakExpiratoryFlowRateChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingPeakExpiratoryFlowRateChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingPeakExpiratoryFlowRateChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingPeakExpiratoryFlowRateChangedEventType string

const (
	ClientFacingPeakExpiratoryFlowRateChangedEventTypeDailyDataPeakExpiratoryFlowRateCreated ClientFacingPeakExpiratoryFlowRateChangedEventType = "daily.data.peak_expiratory_flow_rate.created"
	ClientFacingPeakExpiratoryFlowRateChangedEventTypeDailyDataPeakExpiratoryFlowRateUpdated ClientFacingPeakExpiratoryFlowRateChangedEventType = "daily.data.peak_expiratory_flow_rate.updated"
)

func NewClientFacingPeakExpiratoryFlowRateChangedEventTypeFromString(s string) (ClientFacingPeakExpiratoryFlowRateChangedEventType, error) {
	switch s {
	case "daily.data.peak_expiratory_flow_rate.created":
		return ClientFacingPeakExpiratoryFlowRateChangedEventTypeDailyDataPeakExpiratoryFlowRateCreated, nil
	case "daily.data.peak_expiratory_flow_rate.updated":
		return ClientFacingPeakExpiratoryFlowRateChangedEventTypeDailyDataPeakExpiratoryFlowRateUpdated, nil
	}
	var t ClientFacingPeakExpiratoryFlowRateChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingPeakExpiratoryFlowRateChangedEventType) Ptr() *ClientFacingPeakExpiratoryFlowRateChangedEventType {
	return &c
}

type ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.peak_expiratory_flow_rate.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.peak_expiratory_flow_rate.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.peak_expiratory_flow_rate.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingPeakExpiratoryFlowRateHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingPhysician struct {
	FirstName string `json:"first_name" url:"first_name"`
	LastName  string `json:"last_name" url:"last_name"`
	Npi       string `json:"npi" url:"npi"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingPhysician) GetFirstName() string {
	if c == nil {
		return ""
	}
	return c.FirstName
}

func (c *ClientFacingPhysician) GetLastName() string {
	if c == nil {
		return ""
	}
	return c.LastName
}

func (c *ClientFacingPhysician) GetNpi() string {
	if c == nil {
		return ""
	}
	return c.Npi
}

func (c *ClientFacingPhysician) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingPhysician) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingPhysician
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingPhysician(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingPhysician) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingProfileChanged struct {
	EventType    ClientFacingProfileChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                              `json:"user_id" url:"user_id"`
	ClientUserId string                              `json:"client_user_id" url:"client_user_id"`
	TeamId       string                              `json:"team_id" url:"team_id"`
	Data         *ClientFacingProfile                `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingProfileChanged) GetEventType() ClientFacingProfileChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingProfileChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingProfileChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingProfileChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingProfileChanged) GetData() *ClientFacingProfile {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingProfileChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingProfileChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingProfileChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingProfileChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingProfileChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingProfileChangedEventType string

const (
	ClientFacingProfileChangedEventTypeDailyDataProfileCreated ClientFacingProfileChangedEventType = "daily.data.profile.created"
	ClientFacingProfileChangedEventTypeDailyDataProfileUpdated ClientFacingProfileChangedEventType = "daily.data.profile.updated"
)

func NewClientFacingProfileChangedEventTypeFromString(s string) (ClientFacingProfileChangedEventType, error) {
	switch s {
	case "daily.data.profile.created":
		return ClientFacingProfileChangedEventTypeDailyDataProfileCreated, nil
	case "daily.data.profile.updated":
		return ClientFacingProfileChangedEventTypeDailyDataProfileUpdated, nil
	}
	var t ClientFacingProfileChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingProfileChangedEventType) Ptr() *ClientFacingProfileChangedEventType {
	return &c
}

type ClientFacingProfileHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingProfileHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingProfileHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingProfileHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingProfileHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingProfileHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingProfileHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingProfileHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingProfileHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingProfileHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.profile.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.profile.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingProfileHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingProfileHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.profile.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingProfileHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A vendor, a service, or a platform which Vital can connect with.
type ClientFacingProvider struct {
	// Name of source of information
	Name string `json:"name" url:"name"`
	// Slug for designated source
	Slug string `json:"slug" url:"slug"`
	// URL for source logo
	Logo string `json:"logo" url:"logo"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingProvider) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ClientFacingProvider) GetSlug() string {
	if c == nil {
		return ""
	}
	return c.Slug
}

func (c *ClientFacingProvider) GetLogo() string {
	if c == nil {
		return ""
	}
	return c.Logo
}

func (c *ClientFacingProvider) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingProvider) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingProvider
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingProvider(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingProvider) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingProviderConnectionCreatedEvent struct {
	UserId       string                     `json:"user_id" url:"user_id"`
	ClientUserId string                     `json:"client_user_id" url:"client_user_id"`
	TeamId       string                     `json:"team_id" url:"team_id"`
	Data         *ProviderConnectionCreated `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingProviderConnectionCreatedEvent) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingProviderConnectionCreatedEvent) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingProviderConnectionCreatedEvent) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingProviderConnectionCreatedEvent) GetData() *ProviderConnectionCreated {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingProviderConnectionCreatedEvent) EventType() string {
	return c.eventType
}

func (c *ClientFacingProviderConnectionCreatedEvent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingProviderConnectionCreatedEvent) UnmarshalJSON(data []byte) error {
	type embed ClientFacingProviderConnectionCreatedEvent
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingProviderConnectionCreatedEvent(unmarshaler.embed)
	if unmarshaler.EventType != "provider.connection.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "provider.connection.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingProviderConnectionCreatedEvent) MarshalJSON() ([]byte, error) {
	type embed ClientFacingProviderConnectionCreatedEvent
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "provider.connection.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingProviderConnectionCreatedEvent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingProviderConnectionErrorEvent struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *ProviderConnectionError `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingProviderConnectionErrorEvent) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingProviderConnectionErrorEvent) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingProviderConnectionErrorEvent) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingProviderConnectionErrorEvent) GetData() *ProviderConnectionError {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingProviderConnectionErrorEvent) EventType() string {
	return c.eventType
}

func (c *ClientFacingProviderConnectionErrorEvent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingProviderConnectionErrorEvent) UnmarshalJSON(data []byte) error {
	type embed ClientFacingProviderConnectionErrorEvent
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingProviderConnectionErrorEvent(unmarshaler.embed)
	if unmarshaler.EventType != "provider.connection.error" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "provider.connection.error", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingProviderConnectionErrorEvent) MarshalJSON() ([]byte, error) {
	type embed ClientFacingProviderConnectionErrorEvent
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "provider.connection.error",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingProviderConnectionErrorEvent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// ℹ️ This enum is non-exhaustive.
type ClientFacingResource string

const (
	ClientFacingResourceProfile                    ClientFacingResource = "profile"
	ClientFacingResourceActivity                   ClientFacingResource = "activity"
	ClientFacingResourceSleep                      ClientFacingResource = "sleep"
	ClientFacingResourceBody                       ClientFacingResource = "body"
	ClientFacingResourceWorkouts                   ClientFacingResource = "workouts"
	ClientFacingResourceWorkoutStream              ClientFacingResource = "workout_stream"
	ClientFacingResourceConnection                 ClientFacingResource = "connection"
	ClientFacingResourceOrder                      ClientFacingResource = "order"
	ClientFacingResourceResult                     ClientFacingResource = "result"
	ClientFacingResourceAppointment                ClientFacingResource = "appointment"
	ClientFacingResourceGlucose                    ClientFacingResource = "glucose"
	ClientFacingResourceHeartrate                  ClientFacingResource = "heartrate"
	ClientFacingResourceHrv                        ClientFacingResource = "hrv"
	ClientFacingResourceIge                        ClientFacingResource = "ige"
	ClientFacingResourceIgg                        ClientFacingResource = "igg"
	ClientFacingResourceBloodOxygen                ClientFacingResource = "blood_oxygen"
	ClientFacingResourceBloodPressure              ClientFacingResource = "blood_pressure"
	ClientFacingResourceCholesterol                ClientFacingResource = "cholesterol"
	ClientFacingResourceDevice                     ClientFacingResource = "device"
	ClientFacingResourceWeight                     ClientFacingResource = "weight"
	ClientFacingResourceFat                        ClientFacingResource = "fat"
	ClientFacingResourceBodyTemperature            ClientFacingResource = "body_temperature"
	ClientFacingResourceBodyTemperatureDelta       ClientFacingResource = "body_temperature_delta"
	ClientFacingResourceMeal                       ClientFacingResource = "meal"
	ClientFacingResourceWater                      ClientFacingResource = "water"
	ClientFacingResourceCaffeine                   ClientFacingResource = "caffeine"
	ClientFacingResourceMindfulnessMinutes         ClientFacingResource = "mindfulness_minutes"
	ClientFacingResourceSteps                      ClientFacingResource = "steps"
	ClientFacingResourceCaloriesActive             ClientFacingResource = "calories_active"
	ClientFacingResourceDistance                   ClientFacingResource = "distance"
	ClientFacingResourceFloorsClimbed              ClientFacingResource = "floors_climbed"
	ClientFacingResourceRespiratoryRate            ClientFacingResource = "respiratory_rate"
	ClientFacingResourceVo2Max                     ClientFacingResource = "vo2_max"
	ClientFacingResourceCaloriesBasal              ClientFacingResource = "calories_basal"
	ClientFacingResourceStressLevel                ClientFacingResource = "stress_level"
	ClientFacingResourceMenstrualCycle             ClientFacingResource = "menstrual_cycle"
	ClientFacingResourceSleepCycle                 ClientFacingResource = "sleep_cycle"
	ClientFacingResourceElectrocardiogram          ClientFacingResource = "electrocardiogram"
	ClientFacingResourceElectrocardiogramVoltage   ClientFacingResource = "electrocardiogram_voltage"
	ClientFacingResourceAfibBurden                 ClientFacingResource = "afib_burden"
	ClientFacingResourceHeartRateAlert             ClientFacingResource = "heart_rate_alert"
	ClientFacingResourceStandHour                  ClientFacingResource = "stand_hour"
	ClientFacingResourceStandDuration              ClientFacingResource = "stand_duration"
	ClientFacingResourceSleepApneaAlert            ClientFacingResource = "sleep_apnea_alert"
	ClientFacingResourceSleepBreathingDisturbance  ClientFacingResource = "sleep_breathing_disturbance"
	ClientFacingResourceWheelchairPush             ClientFacingResource = "wheelchair_push"
	ClientFacingResourceForcedExpiratoryVolume1    ClientFacingResource = "forced_expiratory_volume_1"
	ClientFacingResourceForcedVitalCapacity        ClientFacingResource = "forced_vital_capacity"
	ClientFacingResourcePeakExpiratoryFlowRate     ClientFacingResource = "peak_expiratory_flow_rate"
	ClientFacingResourceInhalerUsage               ClientFacingResource = "inhaler_usage"
	ClientFacingResourceFall                       ClientFacingResource = "fall"
	ClientFacingResourceUvExposure                 ClientFacingResource = "uv_exposure"
	ClientFacingResourceDaylightExposure           ClientFacingResource = "daylight_exposure"
	ClientFacingResourceHandwashing                ClientFacingResource = "handwashing"
	ClientFacingResourceBasalBodyTemperature       ClientFacingResource = "basal_body_temperature"
	ClientFacingResourceHeartRateRecoveryOneMinute ClientFacingResource = "heart_rate_recovery_one_minute"
	ClientFacingResourceBodyMassIndex              ClientFacingResource = "body_mass_index"
	ClientFacingResourceLeanBodyMass               ClientFacingResource = "lean_body_mass"
	ClientFacingResourceWaistCircumference         ClientFacingResource = "waist_circumference"
	ClientFacingResourceWorkoutDistance            ClientFacingResource = "workout_distance"
	ClientFacingResourceWorkoutSwimmingStroke      ClientFacingResource = "workout_swimming_stroke"
	ClientFacingResourceWorkoutDuration            ClientFacingResource = "workout_duration"
	ClientFacingResourceInsulinInjection           ClientFacingResource = "insulin_injection"
	ClientFacingResourceCarbohydrates              ClientFacingResource = "carbohydrates"
	ClientFacingResourceNote                       ClientFacingResource = "note"
	ClientFacingResourceSleepStream                ClientFacingResource = "sleep_stream"
	ClientFacingResourceHypnogram                  ClientFacingResource = "hypnogram"
)

func NewClientFacingResourceFromString(s string) (ClientFacingResource, error) {
	switch s {
	case "profile":
		return ClientFacingResourceProfile, nil
	case "activity":
		return ClientFacingResourceActivity, nil
	case "sleep":
		return ClientFacingResourceSleep, nil
	case "body":
		return ClientFacingResourceBody, nil
	case "workouts":
		return ClientFacingResourceWorkouts, nil
	case "workout_stream":
		return ClientFacingResourceWorkoutStream, nil
	case "connection":
		return ClientFacingResourceConnection, nil
	case "order":
		return ClientFacingResourceOrder, nil
	case "result":
		return ClientFacingResourceResult, nil
	case "appointment":
		return ClientFacingResourceAppointment, nil
	case "glucose":
		return ClientFacingResourceGlucose, nil
	case "heartrate":
		return ClientFacingResourceHeartrate, nil
	case "hrv":
		return ClientFacingResourceHrv, nil
	case "ige":
		return ClientFacingResourceIge, nil
	case "igg":
		return ClientFacingResourceIgg, nil
	case "blood_oxygen":
		return ClientFacingResourceBloodOxygen, nil
	case "blood_pressure":
		return ClientFacingResourceBloodPressure, nil
	case "cholesterol":
		return ClientFacingResourceCholesterol, nil
	case "device":
		return ClientFacingResourceDevice, nil
	case "weight":
		return ClientFacingResourceWeight, nil
	case "fat":
		return ClientFacingResourceFat, nil
	case "body_temperature":
		return ClientFacingResourceBodyTemperature, nil
	case "body_temperature_delta":
		return ClientFacingResourceBodyTemperatureDelta, nil
	case "meal":
		return ClientFacingResourceMeal, nil
	case "water":
		return ClientFacingResourceWater, nil
	case "caffeine":
		return ClientFacingResourceCaffeine, nil
	case "mindfulness_minutes":
		return ClientFacingResourceMindfulnessMinutes, nil
	case "steps":
		return ClientFacingResourceSteps, nil
	case "calories_active":
		return ClientFacingResourceCaloriesActive, nil
	case "distance":
		return ClientFacingResourceDistance, nil
	case "floors_climbed":
		return ClientFacingResourceFloorsClimbed, nil
	case "respiratory_rate":
		return ClientFacingResourceRespiratoryRate, nil
	case "vo2_max":
		return ClientFacingResourceVo2Max, nil
	case "calories_basal":
		return ClientFacingResourceCaloriesBasal, nil
	case "stress_level":
		return ClientFacingResourceStressLevel, nil
	case "menstrual_cycle":
		return ClientFacingResourceMenstrualCycle, nil
	case "sleep_cycle":
		return ClientFacingResourceSleepCycle, nil
	case "electrocardiogram":
		return ClientFacingResourceElectrocardiogram, nil
	case "electrocardiogram_voltage":
		return ClientFacingResourceElectrocardiogramVoltage, nil
	case "afib_burden":
		return ClientFacingResourceAfibBurden, nil
	case "heart_rate_alert":
		return ClientFacingResourceHeartRateAlert, nil
	case "stand_hour":
		return ClientFacingResourceStandHour, nil
	case "stand_duration":
		return ClientFacingResourceStandDuration, nil
	case "sleep_apnea_alert":
		return ClientFacingResourceSleepApneaAlert, nil
	case "sleep_breathing_disturbance":
		return ClientFacingResourceSleepBreathingDisturbance, nil
	case "wheelchair_push":
		return ClientFacingResourceWheelchairPush, nil
	case "forced_expiratory_volume_1":
		return ClientFacingResourceForcedExpiratoryVolume1, nil
	case "forced_vital_capacity":
		return ClientFacingResourceForcedVitalCapacity, nil
	case "peak_expiratory_flow_rate":
		return ClientFacingResourcePeakExpiratoryFlowRate, nil
	case "inhaler_usage":
		return ClientFacingResourceInhalerUsage, nil
	case "fall":
		return ClientFacingResourceFall, nil
	case "uv_exposure":
		return ClientFacingResourceUvExposure, nil
	case "daylight_exposure":
		return ClientFacingResourceDaylightExposure, nil
	case "handwashing":
		return ClientFacingResourceHandwashing, nil
	case "basal_body_temperature":
		return ClientFacingResourceBasalBodyTemperature, nil
	case "heart_rate_recovery_one_minute":
		return ClientFacingResourceHeartRateRecoveryOneMinute, nil
	case "body_mass_index":
		return ClientFacingResourceBodyMassIndex, nil
	case "lean_body_mass":
		return ClientFacingResourceLeanBodyMass, nil
	case "waist_circumference":
		return ClientFacingResourceWaistCircumference, nil
	case "workout_distance":
		return ClientFacingResourceWorkoutDistance, nil
	case "workout_swimming_stroke":
		return ClientFacingResourceWorkoutSwimmingStroke, nil
	case "workout_duration":
		return ClientFacingResourceWorkoutDuration, nil
	case "insulin_injection":
		return ClientFacingResourceInsulinInjection, nil
	case "carbohydrates":
		return ClientFacingResourceCarbohydrates, nil
	case "note":
		return ClientFacingResourceNote, nil
	case "sleep_stream":
		return ClientFacingResourceSleepStream, nil
	case "hypnogram":
		return ClientFacingResourceHypnogram, nil
	}
	var t ClientFacingResource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingResource) Ptr() *ClientFacingResource {
	return &c
}

type ClientFacingRespiratoryRateChanged struct {
	EventType    ClientFacingRespiratoryRateChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                      `json:"user_id" url:"user_id"`
	ClientUserId string                                      `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                      `json:"team_id" url:"team_id"`
	Data         *GroupedRespiratoryRate                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingRespiratoryRateChanged) GetEventType() ClientFacingRespiratoryRateChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingRespiratoryRateChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingRespiratoryRateChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingRespiratoryRateChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingRespiratoryRateChanged) GetData() *GroupedRespiratoryRate {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingRespiratoryRateChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingRespiratoryRateChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingRespiratoryRateChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingRespiratoryRateChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingRespiratoryRateChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingRespiratoryRateChangedEventType string

const (
	ClientFacingRespiratoryRateChangedEventTypeDailyDataRespiratoryRateCreated ClientFacingRespiratoryRateChangedEventType = "daily.data.respiratory_rate.created"
	ClientFacingRespiratoryRateChangedEventTypeDailyDataRespiratoryRateUpdated ClientFacingRespiratoryRateChangedEventType = "daily.data.respiratory_rate.updated"
)

func NewClientFacingRespiratoryRateChangedEventTypeFromString(s string) (ClientFacingRespiratoryRateChangedEventType, error) {
	switch s {
	case "daily.data.respiratory_rate.created":
		return ClientFacingRespiratoryRateChangedEventTypeDailyDataRespiratoryRateCreated, nil
	case "daily.data.respiratory_rate.updated":
		return ClientFacingRespiratoryRateChangedEventTypeDailyDataRespiratoryRateUpdated, nil
	}
	var t ClientFacingRespiratoryRateChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingRespiratoryRateChangedEventType) Ptr() *ClientFacingRespiratoryRateChangedEventType {
	return &c
}

type ClientFacingRespiratoryRateHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingRespiratoryRateHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingRespiratoryRateHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingRespiratoryRateHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingRespiratoryRateHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingRespiratoryRateHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingRespiratoryRateHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingRespiratoryRateHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingRespiratoryRateHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingRespiratoryRateHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.respiratory_rate.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.respiratory_rate.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingRespiratoryRateHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingRespiratoryRateHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.respiratory_rate.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingRespiratoryRateHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingRespiratoryRateTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in bpm.
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// Average respiratory rate::breaths per minute
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingRespiratoryRateTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingRespiratoryRateTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingRespiratoryRateTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingRespiratoryRateTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingRespiratoryRateTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingRespiratoryRateTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingRespiratoryRateTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingRespiratoryRateTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingRespiratoryRateTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingRespiratoryRateTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingRespiratoryRateTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingRespiratoryRateTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingRespiratoryRateTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingShallowWorkoutStream struct {
	// User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
	UserId     string  `json:"user_id" url:"user_id"`
	WorkoutId  string  `json:"workout_id" url:"workout_id"`
	ProviderId string  `json:"provider_id" url:"provider_id"`
	Message    *string `json:"message,omitempty" url:"message,omitempty"`
	// Source the data has come from.
	Source *ClientFacingSource `json:"source" url:"source"`
	// Sport's name
	Sport *ClientFacingSport `json:"sport,omitempty" url:"sport,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingShallowWorkoutStream) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingShallowWorkoutStream) GetWorkoutId() string {
	if c == nil {
		return ""
	}
	return c.WorkoutId
}

func (c *ClientFacingShallowWorkoutStream) GetProviderId() string {
	if c == nil {
		return ""
	}
	return c.ProviderId
}

func (c *ClientFacingShallowWorkoutStream) GetMessage() *string {
	if c == nil {
		return nil
	}
	return c.Message
}

func (c *ClientFacingShallowWorkoutStream) GetSource() *ClientFacingSource {
	if c == nil {
		return nil
	}
	return c.Source
}

func (c *ClientFacingShallowWorkoutStream) GetSport() *ClientFacingSport {
	if c == nil {
		return nil
	}
	return c.Sport
}

func (c *ClientFacingShallowWorkoutStream) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingShallowWorkoutStream) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingShallowWorkoutStream
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingShallowWorkoutStream(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingShallowWorkoutStream) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Schema for a Shipment in the client facing API.
//
// To be used as part of a ClientFacingTestkitOrder.
type ClientFacingShipment struct {
	// The Vital Shipment ID
	Id string `json:"id" url:"id"`
	// Tracking number for delivery to customer
	OutboundTrackingNumber *string `json:"outbound_tracking_number,omitempty" url:"outbound_tracking_number,omitempty"`
	// Tracking url for delivery to customer
	OutboundTrackingUrl *string `json:"outbound_tracking_url,omitempty" url:"outbound_tracking_url,omitempty"`
	// Tracking number for delivery to lab
	InboundTrackingNumber *string `json:"inbound_tracking_number,omitempty" url:"inbound_tracking_number,omitempty"`
	// Tracking url for delivery to lab
	InboundTrackingUrl *string `json:"inbound_tracking_url,omitempty" url:"inbound_tracking_url,omitempty"`
	// Courier used for delivery to customer
	OutboundCourier *string `json:"outbound_courier,omitempty" url:"outbound_courier,omitempty"`
	// Courier used for delivery to lab
	InboundCourier *string `json:"inbound_courier,omitempty" url:"inbound_courier,omitempty"`
	// Notes associated to the Vital shipment
	Notes *string `json:"notes,omitempty" url:"notes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingShipment) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ClientFacingShipment) GetOutboundTrackingNumber() *string {
	if c == nil {
		return nil
	}
	return c.OutboundTrackingNumber
}

func (c *ClientFacingShipment) GetOutboundTrackingUrl() *string {
	if c == nil {
		return nil
	}
	return c.OutboundTrackingUrl
}

func (c *ClientFacingShipment) GetInboundTrackingNumber() *string {
	if c == nil {
		return nil
	}
	return c.InboundTrackingNumber
}

func (c *ClientFacingShipment) GetInboundTrackingUrl() *string {
	if c == nil {
		return nil
	}
	return c.InboundTrackingUrl
}

func (c *ClientFacingShipment) GetOutboundCourier() *string {
	if c == nil {
		return nil
	}
	return c.OutboundCourier
}

func (c *ClientFacingShipment) GetInboundCourier() *string {
	if c == nil {
		return nil
	}
	return c.InboundCourier
}

func (c *ClientFacingShipment) GetNotes() *string {
	if c == nil {
		return nil
	}
	return c.Notes
}

func (c *ClientFacingShipment) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingShipment) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingShipment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingShipment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingShipment) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepApneaAlertChanged struct {
	EventType    ClientFacingSleepApneaAlertChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                      `json:"user_id" url:"user_id"`
	ClientUserId string                                      `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                      `json:"team_id" url:"team_id"`
	Data         *GroupedSleepApneaAlert                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepApneaAlertChanged) GetEventType() ClientFacingSleepApneaAlertChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingSleepApneaAlertChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingSleepApneaAlertChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingSleepApneaAlertChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingSleepApneaAlertChanged) GetData() *GroupedSleepApneaAlert {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingSleepApneaAlertChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepApneaAlertChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingSleepApneaAlertChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingSleepApneaAlertChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepApneaAlertChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepApneaAlertChangedEventType string

const (
	ClientFacingSleepApneaAlertChangedEventTypeDailyDataSleepApneaAlertCreated ClientFacingSleepApneaAlertChangedEventType = "daily.data.sleep_apnea_alert.created"
	ClientFacingSleepApneaAlertChangedEventTypeDailyDataSleepApneaAlertUpdated ClientFacingSleepApneaAlertChangedEventType = "daily.data.sleep_apnea_alert.updated"
)

func NewClientFacingSleepApneaAlertChangedEventTypeFromString(s string) (ClientFacingSleepApneaAlertChangedEventType, error) {
	switch s {
	case "daily.data.sleep_apnea_alert.created":
		return ClientFacingSleepApneaAlertChangedEventTypeDailyDataSleepApneaAlertCreated, nil
	case "daily.data.sleep_apnea_alert.updated":
		return ClientFacingSleepApneaAlertChangedEventTypeDailyDataSleepApneaAlertUpdated, nil
	}
	var t ClientFacingSleepApneaAlertChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingSleepApneaAlertChangedEventType) Ptr() *ClientFacingSleepApneaAlertChangedEventType {
	return &c
}

type ClientFacingSleepApneaAlertHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepApneaAlertHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingSleepApneaAlertHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingSleepApneaAlertHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingSleepApneaAlertHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingSleepApneaAlertHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingSleepApneaAlertHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepApneaAlertHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingSleepApneaAlertHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingSleepApneaAlertHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.sleep_apnea_alert.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.sleep_apnea_alert.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepApneaAlertHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingSleepApneaAlertHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.sleep_apnea_alert.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingSleepApneaAlertHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepBreathingDisturbanceChanged struct {
	EventType    ClientFacingSleepBreathingDisturbanceChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                                `json:"user_id" url:"user_id"`
	ClientUserId string                                                `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                                `json:"team_id" url:"team_id"`
	Data         *GroupedSleepBreathingDisturbance                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepBreathingDisturbanceChanged) GetEventType() ClientFacingSleepBreathingDisturbanceChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingSleepBreathingDisturbanceChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingSleepBreathingDisturbanceChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingSleepBreathingDisturbanceChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingSleepBreathingDisturbanceChanged) GetData() *GroupedSleepBreathingDisturbance {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingSleepBreathingDisturbanceChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepBreathingDisturbanceChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingSleepBreathingDisturbanceChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingSleepBreathingDisturbanceChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepBreathingDisturbanceChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepBreathingDisturbanceChangedEventType string

const (
	ClientFacingSleepBreathingDisturbanceChangedEventTypeDailyDataSleepBreathingDisturbanceCreated ClientFacingSleepBreathingDisturbanceChangedEventType = "daily.data.sleep_breathing_disturbance.created"
	ClientFacingSleepBreathingDisturbanceChangedEventTypeDailyDataSleepBreathingDisturbanceUpdated ClientFacingSleepBreathingDisturbanceChangedEventType = "daily.data.sleep_breathing_disturbance.updated"
)

func NewClientFacingSleepBreathingDisturbanceChangedEventTypeFromString(s string) (ClientFacingSleepBreathingDisturbanceChangedEventType, error) {
	switch s {
	case "daily.data.sleep_breathing_disturbance.created":
		return ClientFacingSleepBreathingDisturbanceChangedEventTypeDailyDataSleepBreathingDisturbanceCreated, nil
	case "daily.data.sleep_breathing_disturbance.updated":
		return ClientFacingSleepBreathingDisturbanceChangedEventTypeDailyDataSleepBreathingDisturbanceUpdated, nil
	}
	var t ClientFacingSleepBreathingDisturbanceChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingSleepBreathingDisturbanceChangedEventType) Ptr() *ClientFacingSleepBreathingDisturbanceChangedEventType {
	return &c
}

type ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.sleep_breathing_disturbance.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.sleep_breathing_disturbance.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.sleep_breathing_disturbance.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingSleepBreathingDisturbanceHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepChanged struct {
	EventType    ClientFacingSleepChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                            `json:"user_id" url:"user_id"`
	ClientUserId string                            `json:"client_user_id" url:"client_user_id"`
	TeamId       string                            `json:"team_id" url:"team_id"`
	Data         *ClientFacingSleep                `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepChanged) GetEventType() ClientFacingSleepChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingSleepChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingSleepChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingSleepChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingSleepChanged) GetData() *ClientFacingSleep {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingSleepChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingSleepChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingSleepChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepChangedEventType string

const (
	ClientFacingSleepChangedEventTypeDailyDataSleepCreated ClientFacingSleepChangedEventType = "daily.data.sleep.created"
	ClientFacingSleepChangedEventTypeDailyDataSleepUpdated ClientFacingSleepChangedEventType = "daily.data.sleep.updated"
)

func NewClientFacingSleepChangedEventTypeFromString(s string) (ClientFacingSleepChangedEventType, error) {
	switch s {
	case "daily.data.sleep.created":
		return ClientFacingSleepChangedEventTypeDailyDataSleepCreated, nil
	case "daily.data.sleep.updated":
		return ClientFacingSleepChangedEventTypeDailyDataSleepUpdated, nil
	}
	var t ClientFacingSleepChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingSleepChangedEventType) Ptr() *ClientFacingSleepChangedEventType {
	return &c
}

type ClientFacingSleepCycleChanged struct {
	EventType    ClientFacingSleepCycleChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                 `json:"user_id" url:"user_id"`
	ClientUserId string                                 `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                 `json:"team_id" url:"team_id"`
	Data         *ClientFacingSleepCycle                `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepCycleChanged) GetEventType() ClientFacingSleepCycleChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingSleepCycleChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingSleepCycleChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingSleepCycleChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingSleepCycleChanged) GetData() *ClientFacingSleepCycle {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingSleepCycleChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepCycleChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingSleepCycleChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingSleepCycleChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepCycleChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepCycleChangedEventType string

const (
	ClientFacingSleepCycleChangedEventTypeDailyDataSleepCycleCreated ClientFacingSleepCycleChangedEventType = "daily.data.sleep_cycle.created"
	ClientFacingSleepCycleChangedEventTypeDailyDataSleepCycleUpdated ClientFacingSleepCycleChangedEventType = "daily.data.sleep_cycle.updated"
)

func NewClientFacingSleepCycleChangedEventTypeFromString(s string) (ClientFacingSleepCycleChangedEventType, error) {
	switch s {
	case "daily.data.sleep_cycle.created":
		return ClientFacingSleepCycleChangedEventTypeDailyDataSleepCycleCreated, nil
	case "daily.data.sleep_cycle.updated":
		return ClientFacingSleepCycleChangedEventTypeDailyDataSleepCycleUpdated, nil
	}
	var t ClientFacingSleepCycleChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingSleepCycleChangedEventType) Ptr() *ClientFacingSleepCycleChangedEventType {
	return &c
}

type ClientFacingSleepCycleHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepCycleHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingSleepCycleHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingSleepCycleHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingSleepCycleHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingSleepCycleHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingSleepCycleHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepCycleHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingSleepCycleHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingSleepCycleHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.sleep_cycle.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.sleep_cycle.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepCycleHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingSleepCycleHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.sleep_cycle.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingSleepCycleHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingSleepHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingSleepHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingSleepHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingSleepHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingSleepHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingSleepHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingSleepHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.sleep.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.sleep.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingSleepHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.sleep.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingSleepHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Source summarizes where a sample or a summary is sourced from.
// At minimum, the source provider is always included.
type ClientFacingSource struct {
	// Provider slug. e.g., `oura`, `fitbit`, `garmin`.
	Provider string `json:"provider" url:"provider"`
	// The type of the data source (app or device) by which the summary or the timeseries data were recorded. This defaults to `unknown` when Vital cannot extract or infer that information
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The identifier of the app which recorded this summary. This is only applicable to multi-source providers like Apple Health and Android Health Connect.
	AppId *string `json:"app_id,omitempty" url:"app_id,omitempty"`
	// The identifier of the device which recorded this summary.
	DeviceId *string `json:"device_id,omitempty" url:"device_id,omitempty"`
	// For workout stream timeseries, this is the standard sport slug of the workout with which the timeseries data are associated.
	//
	// For the `distance` timeseries, this is `wheelchair_pushing` if the user is a wheelchair user, or `null` otherwise.
	//
	// For all summary types and non-workout timeseries, this is always `null`.
	Sport *string `json:"sport,omitempty" url:"sport,omitempty"`
	// For workout stream timeseries, this is the workout ID with which the timeseries data are associated.
	//
	// For all other types, this is always `null`.
	WorkoutId *string `json:"workout_id,omitempty" url:"workout_id,omitempty"`
	// Deprecated. Subject to removal after 1 Jan 2024.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Deprecated. Use `provider` instead. Subject to removal after 1 Jan 2024.
	Slug *string `json:"slug,omitempty" url:"slug,omitempty"`
	// Deprecated. Subject to removal after 1 Jan 2024.
	Logo *string `json:"logo,omitempty" url:"logo,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSource) GetProvider() string {
	if c == nil {
		return ""
	}
	return c.Provider
}

func (c *ClientFacingSource) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingSource) GetAppId() *string {
	if c == nil {
		return nil
	}
	return c.AppId
}

func (c *ClientFacingSource) GetDeviceId() *string {
	if c == nil {
		return nil
	}
	return c.DeviceId
}

func (c *ClientFacingSource) GetSport() *string {
	if c == nil {
		return nil
	}
	return c.Sport
}

func (c *ClientFacingSource) GetWorkoutId() *string {
	if c == nil {
		return nil
	}
	return c.WorkoutId
}

func (c *ClientFacingSource) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *ClientFacingSource) GetSlug() *string {
	if c == nil {
		return nil
	}
	return c.Slug
}

func (c *ClientFacingSource) GetLogo() *string {
	if c == nil {
		return nil
	}
	return c.Logo
}

func (c *ClientFacingSource) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSource) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingSource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSource) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStandDurationChanged struct {
	EventType    ClientFacingStandDurationChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                    `json:"user_id" url:"user_id"`
	ClientUserId string                                    `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                    `json:"team_id" url:"team_id"`
	Data         *GroupedStandDuration                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStandDurationChanged) GetEventType() ClientFacingStandDurationChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingStandDurationChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingStandDurationChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingStandDurationChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingStandDurationChanged) GetData() *GroupedStandDuration {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingStandDurationChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStandDurationChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingStandDurationChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingStandDurationChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStandDurationChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStandDurationChangedEventType string

const (
	ClientFacingStandDurationChangedEventTypeDailyDataStandDurationCreated ClientFacingStandDurationChangedEventType = "daily.data.stand_duration.created"
	ClientFacingStandDurationChangedEventTypeDailyDataStandDurationUpdated ClientFacingStandDurationChangedEventType = "daily.data.stand_duration.updated"
)

func NewClientFacingStandDurationChangedEventTypeFromString(s string) (ClientFacingStandDurationChangedEventType, error) {
	switch s {
	case "daily.data.stand_duration.created":
		return ClientFacingStandDurationChangedEventTypeDailyDataStandDurationCreated, nil
	case "daily.data.stand_duration.updated":
		return ClientFacingStandDurationChangedEventTypeDailyDataStandDurationUpdated, nil
	}
	var t ClientFacingStandDurationChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingStandDurationChangedEventType) Ptr() *ClientFacingStandDurationChangedEventType {
	return &c
}

type ClientFacingStandDurationHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStandDurationHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingStandDurationHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingStandDurationHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingStandDurationHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingStandDurationHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingStandDurationHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStandDurationHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingStandDurationHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingStandDurationHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.stand_duration.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.stand_duration.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStandDurationHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingStandDurationHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.stand_duration.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingStandDurationHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStandHourChanged struct {
	EventType    ClientFacingStandHourChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                `json:"user_id" url:"user_id"`
	ClientUserId string                                `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                `json:"team_id" url:"team_id"`
	Data         *GroupedStandHour                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStandHourChanged) GetEventType() ClientFacingStandHourChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingStandHourChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingStandHourChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingStandHourChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingStandHourChanged) GetData() *GroupedStandHour {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingStandHourChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStandHourChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingStandHourChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingStandHourChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStandHourChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStandHourChangedEventType string

const (
	ClientFacingStandHourChangedEventTypeDailyDataStandHourCreated ClientFacingStandHourChangedEventType = "daily.data.stand_hour.created"
	ClientFacingStandHourChangedEventTypeDailyDataStandHourUpdated ClientFacingStandHourChangedEventType = "daily.data.stand_hour.updated"
)

func NewClientFacingStandHourChangedEventTypeFromString(s string) (ClientFacingStandHourChangedEventType, error) {
	switch s {
	case "daily.data.stand_hour.created":
		return ClientFacingStandHourChangedEventTypeDailyDataStandHourCreated, nil
	case "daily.data.stand_hour.updated":
		return ClientFacingStandHourChangedEventTypeDailyDataStandHourUpdated, nil
	}
	var t ClientFacingStandHourChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingStandHourChangedEventType) Ptr() *ClientFacingStandHourChangedEventType {
	return &c
}

type ClientFacingStandHourHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStandHourHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingStandHourHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingStandHourHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingStandHourHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingStandHourHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingStandHourHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStandHourHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingStandHourHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingStandHourHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.stand_hour.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.stand_hour.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStandHourHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingStandHourHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.stand_hour.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingStandHourHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStepsChanged struct {
	EventType    ClientFacingStepsChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                            `json:"user_id" url:"user_id"`
	ClientUserId string                            `json:"client_user_id" url:"client_user_id"`
	TeamId       string                            `json:"team_id" url:"team_id"`
	Data         *GroupedSteps                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStepsChanged) GetEventType() ClientFacingStepsChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingStepsChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingStepsChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingStepsChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingStepsChanged) GetData() *GroupedSteps {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingStepsChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStepsChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingStepsChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingStepsChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStepsChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStepsChangedEventType string

const (
	ClientFacingStepsChangedEventTypeDailyDataStepsCreated ClientFacingStepsChangedEventType = "daily.data.steps.created"
	ClientFacingStepsChangedEventTypeDailyDataStepsUpdated ClientFacingStepsChangedEventType = "daily.data.steps.updated"
)

func NewClientFacingStepsChangedEventTypeFromString(s string) (ClientFacingStepsChangedEventType, error) {
	switch s {
	case "daily.data.steps.created":
		return ClientFacingStepsChangedEventTypeDailyDataStepsCreated, nil
	case "daily.data.steps.updated":
		return ClientFacingStepsChangedEventTypeDailyDataStepsUpdated, nil
	}
	var t ClientFacingStepsChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingStepsChangedEventType) Ptr() *ClientFacingStepsChangedEventType {
	return &c
}

type ClientFacingStepsHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStepsHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingStepsHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingStepsHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingStepsHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingStepsHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingStepsHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStepsHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingStepsHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingStepsHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.steps.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.steps.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStepsHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingStepsHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.steps.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingStepsHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStressLevelChanged struct {
	EventType    ClientFacingStressLevelChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                  `json:"user_id" url:"user_id"`
	ClientUserId string                                  `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                  `json:"team_id" url:"team_id"`
	Data         *GroupedStressLevel                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStressLevelChanged) GetEventType() ClientFacingStressLevelChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingStressLevelChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingStressLevelChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingStressLevelChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingStressLevelChanged) GetData() *GroupedStressLevel {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingStressLevelChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStressLevelChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingStressLevelChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingStressLevelChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStressLevelChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStressLevelChangedEventType string

const (
	ClientFacingStressLevelChangedEventTypeDailyDataStressLevelCreated ClientFacingStressLevelChangedEventType = "daily.data.stress_level.created"
	ClientFacingStressLevelChangedEventTypeDailyDataStressLevelUpdated ClientFacingStressLevelChangedEventType = "daily.data.stress_level.updated"
)

func NewClientFacingStressLevelChangedEventTypeFromString(s string) (ClientFacingStressLevelChangedEventType, error) {
	switch s {
	case "daily.data.stress_level.created":
		return ClientFacingStressLevelChangedEventTypeDailyDataStressLevelCreated, nil
	case "daily.data.stress_level.updated":
		return ClientFacingStressLevelChangedEventTypeDailyDataStressLevelUpdated, nil
	}
	var t ClientFacingStressLevelChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingStressLevelChangedEventType) Ptr() *ClientFacingStressLevelChangedEventType {
	return &c
}

type ClientFacingStressLevelHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStressLevelHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingStressLevelHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingStressLevelHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingStressLevelHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingStressLevelHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingStressLevelHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStressLevelHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingStressLevelHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingStressLevelHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.stress_level.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.stress_level.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStressLevelHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingStressLevelHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.stress_level.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingStressLevelHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingTestKitOrderDetails struct {
	Data *ClientFacingTestkitOrder `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingTestKitOrderDetails) GetData() *ClientFacingTestkitOrder {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingTestKitOrderDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingTestKitOrderDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingTestKitOrderDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingTestKitOrderDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingTestKitOrderDetails) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Schema for a testkit order in the client facing API.
//
// To be used as part of a ClientFacingOrder.
type ClientFacingTestkitOrder struct {
	// The Vital TestKit Order ID
	Id string `json:"id" url:"id"`
	// Shipment object
	Shipment  *ClientFacingShipment `json:"shipment,omitempty" url:"shipment,omitempty"`
	CreatedAt time.Time             `json:"created_at" url:"created_at"`
	UpdatedAt time.Time             `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingTestkitOrder) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ClientFacingTestkitOrder) GetShipment() *ClientFacingShipment {
	if c == nil {
		return nil
	}
	return c.Shipment
}

func (c *ClientFacingTestkitOrder) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientFacingTestkitOrder) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ClientFacingTestkitOrder) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingTestkitOrder) UnmarshalJSON(data []byte) error {
	type embed ClientFacingTestkitOrder
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingTestkitOrder(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingTestkitOrder) MarshalJSON() ([]byte, error) {
	type embed ClientFacingTestkitOrder
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingTestkitOrder) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingUser struct {
	// User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
	UserId string `json:"user_id" url:"user_id"`
	// Your team id.
	TeamId string `json:"team_id" url:"team_id"`
	// A unique ID representing the end user. Typically this will be a user ID from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
	ClientUserId string `json:"client_user_id" url:"client_user_id"`
	// When your item is created
	CreatedOn time.Time `json:"created_on" url:"created_on"`
	// A list of the users connected sources.
	ConnectedSources []*ConnectedSourceClientFacing `json:"connected_sources" url:"connected_sources"`
	// Fallback time zone of the user, in the form of a valid IANA tzdatabase identifier (e.g., `Europe/London` or `America/Los_Angeles`).
	// Used when pulling data from sources that are completely time zone agnostic (e.g., all time is relative to UTC clock, without any time zone attributions on data points).
	FallbackTimeZone *FallbackTimeZone `json:"fallback_time_zone,omitempty" url:"fallback_time_zone,omitempty"`
	// Fallback date of birth of the user, in YYYY-mm-dd format. Used for calculating max heartrate for providers that don not provide users' age.
	FallbackBirthDate *FallbackBirthDate `json:"fallback_birth_date,omitempty" url:"fallback_birth_date,omitempty"`
	// Starting bound for user [data ingestion bounds](https://docs.tryvital.io/wearables/providers/data-ingestion-bounds).
	IngestionStart *string `json:"ingestion_start,omitempty" url:"ingestion_start,omitempty"`
	// Ending bound for user [data ingestion bounds](https://docs.tryvital.io/wearables/providers/data-ingestion-bounds).
	IngestionEnd *string `json:"ingestion_end,omitempty" url:"ingestion_end,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingUser) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingUser) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingUser) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingUser) GetCreatedOn() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedOn
}

func (c *ClientFacingUser) GetConnectedSources() []*ConnectedSourceClientFacing {
	if c == nil {
		return nil
	}
	return c.ConnectedSources
}

func (c *ClientFacingUser) GetFallbackTimeZone() *FallbackTimeZone {
	if c == nil {
		return nil
	}
	return c.FallbackTimeZone
}

func (c *ClientFacingUser) GetFallbackBirthDate() *FallbackBirthDate {
	if c == nil {
		return nil
	}
	return c.FallbackBirthDate
}

func (c *ClientFacingUser) GetIngestionStart() *string {
	if c == nil {
		return nil
	}
	return c.IngestionStart
}

func (c *ClientFacingUser) GetIngestionEnd() *string {
	if c == nil {
		return nil
	}
	return c.IngestionEnd
}

func (c *ClientFacingUser) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingUser) UnmarshalJSON(data []byte) error {
	type embed ClientFacingUser
	var unmarshaler = struct {
		embed
		CreatedOn *internal.DateTime `json:"created_on"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingUser(unmarshaler.embed)
	c.CreatedOn = unmarshaler.CreatedOn.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingUser) MarshalJSON() ([]byte, error) {
	type embed ClientFacingUser
	var marshaler = struct {
		embed
		CreatedOn *internal.DateTime `json:"created_on"`
	}{
		embed:     embed(*c),
		CreatedOn: internal.NewDateTime(c.CreatedOn),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingUser) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingUvExposureChanged struct {
	EventType    ClientFacingUvExposureChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                 `json:"user_id" url:"user_id"`
	ClientUserId string                                 `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                 `json:"team_id" url:"team_id"`
	Data         *GroupedUvExposure                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingUvExposureChanged) GetEventType() ClientFacingUvExposureChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingUvExposureChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingUvExposureChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingUvExposureChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingUvExposureChanged) GetData() *GroupedUvExposure {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingUvExposureChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingUvExposureChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingUvExposureChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingUvExposureChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingUvExposureChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingUvExposureChangedEventType string

const (
	ClientFacingUvExposureChangedEventTypeDailyDataUvExposureCreated ClientFacingUvExposureChangedEventType = "daily.data.uv_exposure.created"
	ClientFacingUvExposureChangedEventTypeDailyDataUvExposureUpdated ClientFacingUvExposureChangedEventType = "daily.data.uv_exposure.updated"
)

func NewClientFacingUvExposureChangedEventTypeFromString(s string) (ClientFacingUvExposureChangedEventType, error) {
	switch s {
	case "daily.data.uv_exposure.created":
		return ClientFacingUvExposureChangedEventTypeDailyDataUvExposureCreated, nil
	case "daily.data.uv_exposure.updated":
		return ClientFacingUvExposureChangedEventTypeDailyDataUvExposureUpdated, nil
	}
	var t ClientFacingUvExposureChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingUvExposureChangedEventType) Ptr() *ClientFacingUvExposureChangedEventType {
	return &c
}

type ClientFacingUvExposureHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingUvExposureHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingUvExposureHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingUvExposureHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingUvExposureHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingUvExposureHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingUvExposureHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingUvExposureHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingUvExposureHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingUvExposureHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.uv_exposure.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.uv_exposure.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingUvExposureHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingUvExposureHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.uv_exposure.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingUvExposureHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingVo2MaxChanged struct {
	EventType    ClientFacingVo2MaxChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                             `json:"user_id" url:"user_id"`
	ClientUserId string                             `json:"client_user_id" url:"client_user_id"`
	TeamId       string                             `json:"team_id" url:"team_id"`
	Data         *GroupedVo2Max                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingVo2MaxChanged) GetEventType() ClientFacingVo2MaxChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingVo2MaxChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingVo2MaxChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingVo2MaxChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingVo2MaxChanged) GetData() *GroupedVo2Max {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingVo2MaxChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingVo2MaxChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingVo2MaxChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingVo2MaxChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingVo2MaxChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingVo2MaxChangedEventType string

const (
	ClientFacingVo2MaxChangedEventTypeDailyDataVo2MaxCreated ClientFacingVo2MaxChangedEventType = "daily.data.vo2_max.created"
	ClientFacingVo2MaxChangedEventTypeDailyDataVo2MaxUpdated ClientFacingVo2MaxChangedEventType = "daily.data.vo2_max.updated"
)

func NewClientFacingVo2MaxChangedEventTypeFromString(s string) (ClientFacingVo2MaxChangedEventType, error) {
	switch s {
	case "daily.data.vo2_max.created":
		return ClientFacingVo2MaxChangedEventTypeDailyDataVo2MaxCreated, nil
	case "daily.data.vo2_max.updated":
		return ClientFacingVo2MaxChangedEventTypeDailyDataVo2MaxUpdated, nil
	}
	var t ClientFacingVo2MaxChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingVo2MaxChangedEventType) Ptr() *ClientFacingVo2MaxChangedEventType {
	return &c
}

type ClientFacingVo2MaxHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingVo2MaxHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingVo2MaxHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingVo2MaxHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingVo2MaxHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingVo2MaxHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingVo2MaxHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingVo2MaxHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingVo2MaxHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingVo2MaxHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.vo2_max.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.vo2_max.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingVo2MaxHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingVo2MaxHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.vo2_max.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingVo2MaxHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWaistCircumferenceChanged struct {
	EventType    ClientFacingWaistCircumferenceChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                         `json:"user_id" url:"user_id"`
	ClientUserId string                                         `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                         `json:"team_id" url:"team_id"`
	Data         *GroupedWaistCircumference                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWaistCircumferenceChanged) GetEventType() ClientFacingWaistCircumferenceChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingWaistCircumferenceChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWaistCircumferenceChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWaistCircumferenceChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWaistCircumferenceChanged) GetData() *GroupedWaistCircumference {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWaistCircumferenceChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWaistCircumferenceChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWaistCircumferenceChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWaistCircumferenceChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWaistCircumferenceChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWaistCircumferenceChangedEventType string

const (
	ClientFacingWaistCircumferenceChangedEventTypeDailyDataWaistCircumferenceCreated ClientFacingWaistCircumferenceChangedEventType = "daily.data.waist_circumference.created"
	ClientFacingWaistCircumferenceChangedEventTypeDailyDataWaistCircumferenceUpdated ClientFacingWaistCircumferenceChangedEventType = "daily.data.waist_circumference.updated"
)

func NewClientFacingWaistCircumferenceChangedEventTypeFromString(s string) (ClientFacingWaistCircumferenceChangedEventType, error) {
	switch s {
	case "daily.data.waist_circumference.created":
		return ClientFacingWaistCircumferenceChangedEventTypeDailyDataWaistCircumferenceCreated, nil
	case "daily.data.waist_circumference.updated":
		return ClientFacingWaistCircumferenceChangedEventTypeDailyDataWaistCircumferenceUpdated, nil
	}
	var t ClientFacingWaistCircumferenceChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWaistCircumferenceChangedEventType) Ptr() *ClientFacingWaistCircumferenceChangedEventType {
	return &c
}

type ClientFacingWaistCircumferenceHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWaistCircumferenceHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWaistCircumferenceHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWaistCircumferenceHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWaistCircumferenceHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWaistCircumferenceHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingWaistCircumferenceHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWaistCircumferenceHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWaistCircumferenceHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWaistCircumferenceHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.waist_circumference.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.waist_circumference.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWaistCircumferenceHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWaistCircumferenceHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.waist_circumference.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWaistCircumferenceHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWalkInOrderDetails struct {
	Data *ClientFacingWalkInTestOrder `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWalkInOrderDetails) GetData() *ClientFacingWalkInTestOrder {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWalkInOrderDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWalkInOrderDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWalkInOrderDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWalkInOrderDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWalkInOrderDetails) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Schema for a walk-in test order in the client facing API.
//
// To be used as part of a ClientFacingOrder.
type ClientFacingWalkInTestOrder struct {
	// The Vital walk-in test Order ID
	Id            string    `json:"id" url:"id"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`
	AppointmentId *string   `json:"appointment_id,omitempty" url:"appointment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWalkInTestOrder) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ClientFacingWalkInTestOrder) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ClientFacingWalkInTestOrder) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ClientFacingWalkInTestOrder) GetAppointmentId() *string {
	if c == nil {
		return nil
	}
	return c.AppointmentId
}

func (c *ClientFacingWalkInTestOrder) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWalkInTestOrder) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWalkInTestOrder
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWalkInTestOrder(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWalkInTestOrder) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWalkInTestOrder
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWalkInTestOrder) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWaterChanged struct {
	EventType    ClientFacingWaterChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                            `json:"user_id" url:"user_id"`
	ClientUserId string                            `json:"client_user_id" url:"client_user_id"`
	TeamId       string                            `json:"team_id" url:"team_id"`
	Data         *GroupedWater                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWaterChanged) GetEventType() ClientFacingWaterChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingWaterChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWaterChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWaterChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWaterChanged) GetData() *GroupedWater {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWaterChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWaterChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWaterChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWaterChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWaterChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWaterChangedEventType string

const (
	ClientFacingWaterChangedEventTypeDailyDataWaterCreated ClientFacingWaterChangedEventType = "daily.data.water.created"
	ClientFacingWaterChangedEventTypeDailyDataWaterUpdated ClientFacingWaterChangedEventType = "daily.data.water.updated"
)

func NewClientFacingWaterChangedEventTypeFromString(s string) (ClientFacingWaterChangedEventType, error) {
	switch s {
	case "daily.data.water.created":
		return ClientFacingWaterChangedEventTypeDailyDataWaterCreated, nil
	case "daily.data.water.updated":
		return ClientFacingWaterChangedEventTypeDailyDataWaterUpdated, nil
	}
	var t ClientFacingWaterChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWaterChangedEventType) Ptr() *ClientFacingWaterChangedEventType {
	return &c
}

type ClientFacingWaterHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWaterHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWaterHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWaterHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWaterHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWaterHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingWaterHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWaterHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWaterHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWaterHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.water.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.water.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWaterHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWaterHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.water.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWaterHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWeightChanged struct {
	EventType    ClientFacingWeightChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                             `json:"user_id" url:"user_id"`
	ClientUserId string                             `json:"client_user_id" url:"client_user_id"`
	TeamId       string                             `json:"team_id" url:"team_id"`
	Data         *GroupedBodyWeight                 `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWeightChanged) GetEventType() ClientFacingWeightChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingWeightChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWeightChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWeightChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWeightChanged) GetData() *GroupedBodyWeight {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWeightChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWeightChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWeightChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWeightChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWeightChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWeightChangedEventType string

const (
	ClientFacingWeightChangedEventTypeDailyDataWeightCreated ClientFacingWeightChangedEventType = "daily.data.weight.created"
	ClientFacingWeightChangedEventTypeDailyDataWeightUpdated ClientFacingWeightChangedEventType = "daily.data.weight.updated"
)

func NewClientFacingWeightChangedEventTypeFromString(s string) (ClientFacingWeightChangedEventType, error) {
	switch s {
	case "daily.data.weight.created":
		return ClientFacingWeightChangedEventTypeDailyDataWeightCreated, nil
	case "daily.data.weight.updated":
		return ClientFacingWeightChangedEventTypeDailyDataWeightUpdated, nil
	}
	var t ClientFacingWeightChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWeightChangedEventType) Ptr() *ClientFacingWeightChangedEventType {
	return &c
}

type ClientFacingWeightHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWeightHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWeightHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWeightHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWeightHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWeightHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingWeightHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWeightHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWeightHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWeightHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.weight.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.weight.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWeightHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWeightHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.weight.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWeightHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWheelchairPushChanged struct {
	EventType    ClientFacingWheelchairPushChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                     `json:"user_id" url:"user_id"`
	ClientUserId string                                     `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                     `json:"team_id" url:"team_id"`
	Data         *GroupedWheelchairPush                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWheelchairPushChanged) GetEventType() ClientFacingWheelchairPushChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingWheelchairPushChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWheelchairPushChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWheelchairPushChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWheelchairPushChanged) GetData() *GroupedWheelchairPush {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWheelchairPushChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWheelchairPushChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWheelchairPushChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWheelchairPushChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWheelchairPushChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWheelchairPushChangedEventType string

const (
	ClientFacingWheelchairPushChangedEventTypeDailyDataWheelchairPushCreated ClientFacingWheelchairPushChangedEventType = "daily.data.wheelchair_push.created"
	ClientFacingWheelchairPushChangedEventTypeDailyDataWheelchairPushUpdated ClientFacingWheelchairPushChangedEventType = "daily.data.wheelchair_push.updated"
)

func NewClientFacingWheelchairPushChangedEventTypeFromString(s string) (ClientFacingWheelchairPushChangedEventType, error) {
	switch s {
	case "daily.data.wheelchair_push.created":
		return ClientFacingWheelchairPushChangedEventTypeDailyDataWheelchairPushCreated, nil
	case "daily.data.wheelchair_push.updated":
		return ClientFacingWheelchairPushChangedEventTypeDailyDataWheelchairPushUpdated, nil
	}
	var t ClientFacingWheelchairPushChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWheelchairPushChangedEventType) Ptr() *ClientFacingWheelchairPushChangedEventType {
	return &c
}

type ClientFacingWheelchairPushHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWheelchairPushHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWheelchairPushHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWheelchairPushHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWheelchairPushHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWheelchairPushHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingWheelchairPushHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWheelchairPushHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWheelchairPushHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWheelchairPushHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.wheelchair_push.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.wheelchair_push.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWheelchairPushHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWheelchairPushHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.wheelchair_push.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWheelchairPushHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutDistanceChanged struct {
	EventType    ClientFacingWorkoutDistanceChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                      `json:"user_id" url:"user_id"`
	ClientUserId string                                      `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                      `json:"team_id" url:"team_id"`
	Data         *GroupedWorkoutDistance                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutDistanceChanged) GetEventType() ClientFacingWorkoutDistanceChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingWorkoutDistanceChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutDistanceChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutDistanceChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutDistanceChanged) GetData() *GroupedWorkoutDistance {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutDistanceChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutDistanceChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWorkoutDistanceChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWorkoutDistanceChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutDistanceChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutDistanceChangedEventType string

const (
	ClientFacingWorkoutDistanceChangedEventTypeDailyDataWorkoutDistanceCreated ClientFacingWorkoutDistanceChangedEventType = "daily.data.workout_distance.created"
	ClientFacingWorkoutDistanceChangedEventTypeDailyDataWorkoutDistanceUpdated ClientFacingWorkoutDistanceChangedEventType = "daily.data.workout_distance.updated"
)

func NewClientFacingWorkoutDistanceChangedEventTypeFromString(s string) (ClientFacingWorkoutDistanceChangedEventType, error) {
	switch s {
	case "daily.data.workout_distance.created":
		return ClientFacingWorkoutDistanceChangedEventTypeDailyDataWorkoutDistanceCreated, nil
	case "daily.data.workout_distance.updated":
		return ClientFacingWorkoutDistanceChangedEventTypeDailyDataWorkoutDistanceUpdated, nil
	}
	var t ClientFacingWorkoutDistanceChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWorkoutDistanceChangedEventType) Ptr() *ClientFacingWorkoutDistanceChangedEventType {
	return &c
}

type ClientFacingWorkoutDistanceHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutDistanceHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutDistanceHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutDistanceHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutDistanceHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutDistanceHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingWorkoutDistanceHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutDistanceHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWorkoutDistanceHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWorkoutDistanceHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.workout_distance.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.workout_distance.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutDistanceHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWorkoutDistanceHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.workout_distance.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWorkoutDistanceHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutDurationChanged struct {
	EventType    ClientFacingWorkoutDurationChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                      `json:"user_id" url:"user_id"`
	ClientUserId string                                      `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                      `json:"team_id" url:"team_id"`
	Data         *GroupedWorkoutDuration                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutDurationChanged) GetEventType() ClientFacingWorkoutDurationChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingWorkoutDurationChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutDurationChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutDurationChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutDurationChanged) GetData() *GroupedWorkoutDuration {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutDurationChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutDurationChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWorkoutDurationChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWorkoutDurationChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutDurationChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutDurationChangedEventType string

const (
	ClientFacingWorkoutDurationChangedEventTypeDailyDataWorkoutDurationCreated ClientFacingWorkoutDurationChangedEventType = "daily.data.workout_duration.created"
	ClientFacingWorkoutDurationChangedEventTypeDailyDataWorkoutDurationUpdated ClientFacingWorkoutDurationChangedEventType = "daily.data.workout_duration.updated"
)

func NewClientFacingWorkoutDurationChangedEventTypeFromString(s string) (ClientFacingWorkoutDurationChangedEventType, error) {
	switch s {
	case "daily.data.workout_duration.created":
		return ClientFacingWorkoutDurationChangedEventTypeDailyDataWorkoutDurationCreated, nil
	case "daily.data.workout_duration.updated":
		return ClientFacingWorkoutDurationChangedEventTypeDailyDataWorkoutDurationUpdated, nil
	}
	var t ClientFacingWorkoutDurationChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWorkoutDurationChangedEventType) Ptr() *ClientFacingWorkoutDurationChangedEventType {
	return &c
}

type ClientFacingWorkoutDurationHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutDurationHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutDurationHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutDurationHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutDurationHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutDurationHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingWorkoutDurationHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutDurationHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWorkoutDurationHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWorkoutDurationHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.workout_duration.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.workout_duration.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutDurationHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWorkoutDurationHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.workout_duration.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWorkoutDurationHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutStreamChanged struct {
	EventType    ClientFacingWorkoutStreamChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                    `json:"user_id" url:"user_id"`
	ClientUserId string                                    `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                    `json:"team_id" url:"team_id"`
	Data         *ClientFacingShallowWorkoutStream         `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutStreamChanged) GetEventType() ClientFacingWorkoutStreamChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingWorkoutStreamChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutStreamChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutStreamChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutStreamChanged) GetData() *ClientFacingShallowWorkoutStream {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutStreamChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutStreamChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWorkoutStreamChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWorkoutStreamChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutStreamChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutStreamChangedEventType string

const (
	ClientFacingWorkoutStreamChangedEventTypeDailyDataWorkoutStreamCreated ClientFacingWorkoutStreamChangedEventType = "daily.data.workout_stream.created"
	ClientFacingWorkoutStreamChangedEventTypeDailyDataWorkoutStreamUpdated ClientFacingWorkoutStreamChangedEventType = "daily.data.workout_stream.updated"
)

func NewClientFacingWorkoutStreamChangedEventTypeFromString(s string) (ClientFacingWorkoutStreamChangedEventType, error) {
	switch s {
	case "daily.data.workout_stream.created":
		return ClientFacingWorkoutStreamChangedEventTypeDailyDataWorkoutStreamCreated, nil
	case "daily.data.workout_stream.updated":
		return ClientFacingWorkoutStreamChangedEventTypeDailyDataWorkoutStreamUpdated, nil
	}
	var t ClientFacingWorkoutStreamChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWorkoutStreamChangedEventType) Ptr() *ClientFacingWorkoutStreamChangedEventType {
	return &c
}

type ClientFacingWorkoutStreamHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutStreamHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutStreamHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutStreamHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutStreamHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutStreamHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingWorkoutStreamHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutStreamHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWorkoutStreamHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWorkoutStreamHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.workout_stream.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.workout_stream.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutStreamHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWorkoutStreamHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.workout_stream.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWorkoutStreamHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutSwimmingStrokeChanged struct {
	EventType    ClientFacingWorkoutSwimmingStrokeChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                                            `json:"user_id" url:"user_id"`
	ClientUserId string                                            `json:"client_user_id" url:"client_user_id"`
	TeamId       string                                            `json:"team_id" url:"team_id"`
	Data         *GroupedWorkoutSwimmingStroke                     `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutSwimmingStrokeChanged) GetEventType() ClientFacingWorkoutSwimmingStrokeChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingWorkoutSwimmingStrokeChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutSwimmingStrokeChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutSwimmingStrokeChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutSwimmingStrokeChanged) GetData() *GroupedWorkoutSwimmingStroke {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutSwimmingStrokeChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutSwimmingStrokeChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWorkoutSwimmingStrokeChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWorkoutSwimmingStrokeChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutSwimmingStrokeChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutSwimmingStrokeChangedEventType string

const (
	ClientFacingWorkoutSwimmingStrokeChangedEventTypeDailyDataWorkoutSwimmingStrokeCreated ClientFacingWorkoutSwimmingStrokeChangedEventType = "daily.data.workout_swimming_stroke.created"
	ClientFacingWorkoutSwimmingStrokeChangedEventTypeDailyDataWorkoutSwimmingStrokeUpdated ClientFacingWorkoutSwimmingStrokeChangedEventType = "daily.data.workout_swimming_stroke.updated"
)

func NewClientFacingWorkoutSwimmingStrokeChangedEventTypeFromString(s string) (ClientFacingWorkoutSwimmingStrokeChangedEventType, error) {
	switch s {
	case "daily.data.workout_swimming_stroke.created":
		return ClientFacingWorkoutSwimmingStrokeChangedEventTypeDailyDataWorkoutSwimmingStrokeCreated, nil
	case "daily.data.workout_swimming_stroke.updated":
		return ClientFacingWorkoutSwimmingStrokeChangedEventTypeDailyDataWorkoutSwimmingStrokeUpdated, nil
	}
	var t ClientFacingWorkoutSwimmingStrokeChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWorkoutSwimmingStrokeChangedEventType) Ptr() *ClientFacingWorkoutSwimmingStrokeChangedEventType {
	return &c
}

type ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.workout_swimming_stroke.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.workout_swimming_stroke.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.workout_swimming_stroke.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWorkoutSwimmingStrokeHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutsChanged struct {
	EventType    ClientFacingWorkoutsChangedEventType `json:"event_type" url:"event_type"`
	UserId       string                               `json:"user_id" url:"user_id"`
	ClientUserId string                               `json:"client_user_id" url:"client_user_id"`
	TeamId       string                               `json:"team_id" url:"team_id"`
	Data         *ClientFacingWorkout                 `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutsChanged) GetEventType() ClientFacingWorkoutsChangedEventType {
	if c == nil {
		return ""
	}
	return c.EventType
}

func (c *ClientFacingWorkoutsChanged) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutsChanged) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutsChanged) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutsChanged) GetData() *ClientFacingWorkout {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutsChanged) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutsChanged) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientFacingWorkoutsChanged
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientFacingWorkoutsChanged(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutsChanged) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutsChangedEventType string

const (
	ClientFacingWorkoutsChangedEventTypeDailyDataWorkoutsCreated ClientFacingWorkoutsChangedEventType = "daily.data.workouts.created"
	ClientFacingWorkoutsChangedEventTypeDailyDataWorkoutsUpdated ClientFacingWorkoutsChangedEventType = "daily.data.workouts.updated"
)

func NewClientFacingWorkoutsChangedEventTypeFromString(s string) (ClientFacingWorkoutsChangedEventType, error) {
	switch s {
	case "daily.data.workouts.created":
		return ClientFacingWorkoutsChangedEventTypeDailyDataWorkoutsCreated, nil
	case "daily.data.workouts.updated":
		return ClientFacingWorkoutsChangedEventTypeDailyDataWorkoutsUpdated, nil
	}
	var t ClientFacingWorkoutsChangedEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWorkoutsChangedEventType) Ptr() *ClientFacingWorkoutsChangedEventType {
	return &c
}

type ClientFacingWorkoutsHistoricalPullCompleted struct {
	UserId       string                   `json:"user_id" url:"user_id"`
	ClientUserId string                   `json:"client_user_id" url:"client_user_id"`
	TeamId       string                   `json:"team_id" url:"team_id"`
	Data         *HistoricalPullCompleted `json:"data" url:"data"`
	eventType    string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutsHistoricalPullCompleted) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientFacingWorkoutsHistoricalPullCompleted) GetClientUserId() string {
	if c == nil {
		return ""
	}
	return c.ClientUserId
}

func (c *ClientFacingWorkoutsHistoricalPullCompleted) GetTeamId() string {
	if c == nil {
		return ""
	}
	return c.TeamId
}

func (c *ClientFacingWorkoutsHistoricalPullCompleted) GetData() *HistoricalPullCompleted {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ClientFacingWorkoutsHistoricalPullCompleted) EventType() string {
	return c.eventType
}

func (c *ClientFacingWorkoutsHistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutsHistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWorkoutsHistoricalPullCompleted
	var unmarshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWorkoutsHistoricalPullCompleted(unmarshaler.embed)
	if unmarshaler.EventType != "historical.data.workouts.created" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "historical.data.workouts.created", unmarshaler.EventType)
	}
	c.eventType = unmarshaler.EventType
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "event_type")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutsHistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWorkoutsHistoricalPullCompleted
	var marshaler = struct {
		embed
		EventType string `json:"event_type"`
	}{
		embed:     embed(*c),
		EventType: "historical.data.workouts.created",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWorkoutsHistoricalPullCompleted) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientUserIdConflict struct {
	ErrorType    string    `json:"error_type" url:"error_type"`
	ErrorMessage string    `json:"error_message" url:"error_message"`
	UserId       string    `json:"user_id" url:"user_id"`
	CreatedOn    time.Time `json:"created_on" url:"created_on"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientUserIdConflict) GetErrorType() string {
	if c == nil {
		return ""
	}
	return c.ErrorType
}

func (c *ClientUserIdConflict) GetErrorMessage() string {
	if c == nil {
		return ""
	}
	return c.ErrorMessage
}

func (c *ClientUserIdConflict) GetUserId() string {
	if c == nil {
		return ""
	}
	return c.UserId
}

func (c *ClientUserIdConflict) GetCreatedOn() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedOn
}

func (c *ClientUserIdConflict) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientUserIdConflict) UnmarshalJSON(data []byte) error {
	type embed ClientUserIdConflict
	var unmarshaler = struct {
		embed
		CreatedOn *internal.DateTime `json:"created_on"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientUserIdConflict(unmarshaler.embed)
	c.CreatedOn = unmarshaler.CreatedOn.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientUserIdConflict) MarshalJSON() ([]byte, error) {
	type embed ClientUserIdConflict
	var marshaler = struct {
		embed
		CreatedOn *internal.DateTime `json:"created_on"`
	}{
		embed:     embed(*c),
		CreatedOn: internal.NewDateTime(c.CreatedOn),
	}
	return json.Marshal(marshaler)
}

func (c *ClientUserIdConflict) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientUserIdConflictResponse struct {
	Detail *ClientUserIdConflict `json:"detail" url:"detail"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientUserIdConflictResponse) GetDetail() *ClientUserIdConflict {
	if c == nil {
		return nil
	}
	return c.Detail
}

func (c *ClientUserIdConflictResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientUserIdConflictResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientUserIdConflictResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientUserIdConflictResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientUserIdConflictResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectedSourceClientFacing struct {
	// The provider of this connected source.
	Provider *ClientFacingProvider `json:"provider" url:"provider"`
	// When your item is created
	CreatedOn time.Time `json:"created_on" url:"created_on"`
	// Deprecated. Use `provider` instead. Subject to removal after 1 Jan 2024.
	Source *ClientFacingProvider `json:"source" url:"source"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ConnectedSourceClientFacing) GetProvider() *ClientFacingProvider {
	if c == nil {
		return nil
	}
	return c.Provider
}

func (c *ConnectedSourceClientFacing) GetCreatedOn() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedOn
}

func (c *ConnectedSourceClientFacing) GetSource() *ClientFacingProvider {
	if c == nil {
		return nil
	}
	return c.Source
}

func (c *ConnectedSourceClientFacing) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ConnectedSourceClientFacing) UnmarshalJSON(data []byte) error {
	type embed ConnectedSourceClientFacing
	var unmarshaler = struct {
		embed
		CreatedOn *internal.DateTime `json:"created_on"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConnectedSourceClientFacing(unmarshaler.embed)
	c.CreatedOn = unmarshaler.CreatedOn.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedSourceClientFacing) MarshalJSON() ([]byte, error) {
	type embed ConnectedSourceClientFacing
	var marshaler = struct {
		embed
		CreatedOn *internal.DateTime `json:"created_on"`
	}{
		embed:     embed(*c),
		CreatedOn: internal.NewDateTime(c.CreatedOn),
	}
	return json.Marshal(marshaler)
}

func (c *ConnectedSourceClientFacing) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Consent struct {
	ConsentType   ConsentType `json:"consentType" url:"consentType"`
	Version       *string     `json:"version,omitempty" url:"version,omitempty"`
	TimeOfConsent *time.Time  `json:"timeOfConsent,omitempty" url:"timeOfConsent,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Consent) GetConsentType() ConsentType {
	if c == nil {
		return ""
	}
	return c.ConsentType
}

func (c *Consent) GetVersion() *string {
	if c == nil {
		return nil
	}
	return c.Version
}

func (c *Consent) GetTimeOfConsent() *time.Time {
	if c == nil {
		return nil
	}
	return c.TimeOfConsent
}

func (c *Consent) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Consent) UnmarshalJSON(data []byte) error {
	type embed Consent
	var unmarshaler = struct {
		embed
		TimeOfConsent *internal.DateTime `json:"timeOfConsent,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = Consent(unmarshaler.embed)
	c.TimeOfConsent = unmarshaler.TimeOfConsent.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Consent) MarshalJSON() ([]byte, error) {
	type embed Consent
	var marshaler = struct {
		embed
		TimeOfConsent *internal.DateTime `json:"timeOfConsent,omitempty"`
	}{
		embed:         embed(*c),
		TimeOfConsent: internal.NewOptionalDateTime(c.TimeOfConsent),
	}
	return json.Marshal(marshaler)
}

func (c *Consent) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// ℹ️ This enum is non-exhaustive.
type ConsentType string

const (
	ConsentTypeTermsOfUse                ConsentType = "terms-of-use"
	ConsentTypeTelehealthInformedConsent ConsentType = "telehealth-informed-consent"
	ConsentTypeMobileTermsAndConditions  ConsentType = "mobile-terms-and-conditions"
	ConsentTypeNoticeOfPrivacyPractices  ConsentType = "notice-of-privacy-practices"
	ConsentTypePrivacyPolicy             ConsentType = "privacy-policy"
	ConsentTypeHipaaAuthorization        ConsentType = "hipaa-authorization"
)

func NewConsentTypeFromString(s string) (ConsentType, error) {
	switch s {
	case "terms-of-use":
		return ConsentTypeTermsOfUse, nil
	case "telehealth-informed-consent":
		return ConsentTypeTelehealthInformedConsent, nil
	case "mobile-terms-and-conditions":
		return ConsentTypeMobileTermsAndConditions, nil
	case "notice-of-privacy-practices":
		return ConsentTypeNoticeOfPrivacyPractices, nil
	case "privacy-policy":
		return ConsentTypePrivacyPolicy, nil
	case "hipaa-authorization":
		return ConsentTypeHipaaAuthorization, nil
	}
	var t ConsentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConsentType) Ptr() *ConsentType {
	return &c
}

type ContinuousQueryResultTableChanges struct {
	QueryId   string                   `json:"query_id" url:"query_id"`
	QuerySlug string                   `json:"query_slug" url:"query_slug"`
	Data      map[string][]interface{} `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ContinuousQueryResultTableChanges) GetQueryId() string {
	if c == nil {
		return ""
	}
	return c.QueryId
}

func (c *ContinuousQueryResultTableChanges) GetQuerySlug() string {
	if c == nil {
		return ""
	}
	return c.QuerySlug
}

func (c *ContinuousQueryResultTableChanges) GetData() map[string][]interface{} {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *ContinuousQueryResultTableChanges) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContinuousQueryResultTableChanges) UnmarshalJSON(data []byte) error {
	type unmarshaler ContinuousQueryResultTableChanges
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContinuousQueryResultTableChanges(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContinuousQueryResultTableChanges) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// ℹ️ This enum is non-exhaustive.
type Ethnicity string

const (
	EthnicityHispanic        Ethnicity = "hispanic"
	EthnicityNonHispanic     Ethnicity = "non_hispanic"
	EthnicityAshkenaziJewish Ethnicity = "ashkenazi_jewish"
	EthnicityOther           Ethnicity = "other"
)

func NewEthnicityFromString(s string) (Ethnicity, error) {
	switch s {
	case "hispanic":
		return EthnicityHispanic, nil
	case "non_hispanic":
		return EthnicityNonHispanic, nil
	case "ashkenazi_jewish":
		return EthnicityAshkenaziJewish, nil
	case "other":
		return EthnicityOther, nil
	}
	var t Ethnicity
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e Ethnicity) Ptr() *Ethnicity {
	return &e
}

type FallbackBirthDate struct {
	// Fallback date of birth of the user, in YYYY-mm-dd format. Used for calculating max heartrate for providers that don not provide users' age.
	Value string `json:"value" url:"value"`
	// Slug for designated source
	SourceSlug string    `json:"source_slug" url:"source_slug"`
	UpdatedAt  time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FallbackBirthDate) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

func (f *FallbackBirthDate) GetSourceSlug() string {
	if f == nil {
		return ""
	}
	return f.SourceSlug
}

func (f *FallbackBirthDate) GetUpdatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.UpdatedAt
}

func (f *FallbackBirthDate) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FallbackBirthDate) UnmarshalJSON(data []byte) error {
	type embed FallbackBirthDate
	var unmarshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FallbackBirthDate(unmarshaler.embed)
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FallbackBirthDate) MarshalJSON() ([]byte, error) {
	type embed FallbackBirthDate
	var marshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*f),
		UpdatedAt: internal.NewDateTime(f.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FallbackBirthDate) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FallbackTimeZone struct {
	// Fallback time zone of the user, in the form of a valid IANA tzdatabase identifier (e.g., `Europe/London` or `America/Los_Angeles`).
	// Used when pulling data from sources that are completely time zone agnostic (e.g., all time is relative to UTC clock, without any time zone attributions on data points).
	Id string `json:"id" url:"id"`
	// Slug for designated source
	SourceSlug string    `json:"source_slug" url:"source_slug"`
	UpdatedAt  time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FallbackTimeZone) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FallbackTimeZone) GetSourceSlug() string {
	if f == nil {
		return ""
	}
	return f.SourceSlug
}

func (f *FallbackTimeZone) GetUpdatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.UpdatedAt
}

func (f *FallbackTimeZone) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FallbackTimeZone) UnmarshalJSON(data []byte) error {
	type embed FallbackTimeZone
	var unmarshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FallbackTimeZone(unmarshaler.embed)
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FallbackTimeZone) MarshalJSON() ([]byte, error) {
	type embed FallbackTimeZone
	var marshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*f),
		UpdatedAt: internal.NewDateTime(f.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FallbackTimeZone) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// ℹ️ This enum is non-exhaustive.
type Gender string

const (
	GenderFemale  Gender = "female"
	GenderMale    Gender = "male"
	GenderOther   Gender = "other"
	GenderUnknown Gender = "unknown"
)

func NewGenderFromString(s string) (Gender, error) {
	switch s {
	case "female":
		return GenderFemale, nil
	case "male":
		return GenderMale, nil
	case "other":
		return GenderOther, nil
	case "unknown":
		return GenderUnknown, nil
	}
	var t Gender
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g Gender) Ptr() *Gender {
	return &g
}

// ℹ️ This enum is non-exhaustive.
type GenderIdentity string

const (
	GenderIdentityMale                                       GenderIdentity = "male"
	GenderIdentityFemale                                     GenderIdentity = "female"
	GenderIdentityFemaleToMaleFtmTransgenderMaleTransMan     GenderIdentity = "female_to_male_ftm_transgender_male_trans_man"
	GenderIdentityMaleToFemaleMtfTransgenderFemaleTransWoman GenderIdentity = "male_to_female_mtf_transgender_female_trans_woman"
	GenderIdentityGenderqueer                                GenderIdentity = "genderqueer"
	GenderIdentityOther                                      GenderIdentity = "other"
)

func NewGenderIdentityFromString(s string) (GenderIdentity, error) {
	switch s {
	case "male":
		return GenderIdentityMale, nil
	case "female":
		return GenderIdentityFemale, nil
	case "female_to_male_ftm_transgender_male_trans_man":
		return GenderIdentityFemaleToMaleFtmTransgenderMaleTransMan, nil
	case "male_to_female_mtf_transgender_female_trans_woman":
		return GenderIdentityMaleToFemaleMtfTransgenderFemaleTransWoman, nil
	case "genderqueer":
		return GenderIdentityGenderqueer, nil
	case "other":
		return GenderIdentityOther, nil
	}
	var t GenderIdentity
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GenderIdentity) Ptr() *GenderIdentity {
	return &g
}

type GuarantorDetails struct {
	FirstName       string   `json:"first_name" url:"first_name"`
	LastName        string   `json:"last_name" url:"last_name"`
	Address         *Address `json:"address" url:"address"`
	PhoneNumber     string   `json:"phone_number" url:"phone_number"`
	HouseholdIncome *int     `json:"household_income,omitempty" url:"household_income,omitempty"`
	HouseholdSize   *int     `json:"household_size,omitempty" url:"household_size,omitempty"`
	Email           *string  `json:"email,omitempty" url:"email,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GuarantorDetails) GetFirstName() string {
	if g == nil {
		return ""
	}
	return g.FirstName
}

func (g *GuarantorDetails) GetLastName() string {
	if g == nil {
		return ""
	}
	return g.LastName
}

func (g *GuarantorDetails) GetAddress() *Address {
	if g == nil {
		return nil
	}
	return g.Address
}

func (g *GuarantorDetails) GetPhoneNumber() string {
	if g == nil {
		return ""
	}
	return g.PhoneNumber
}

func (g *GuarantorDetails) GetHouseholdIncome() *int {
	if g == nil {
		return nil
	}
	return g.HouseholdIncome
}

func (g *GuarantorDetails) GetHouseholdSize() *int {
	if g == nil {
		return nil
	}
	return g.HouseholdSize
}

func (g *GuarantorDetails) GetEmail() *string {
	if g == nil {
		return nil
	}
	return g.Email
}

func (g *GuarantorDetails) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GuarantorDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler GuarantorDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GuarantorDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GuarantorDetails) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type HealthInsuranceCreateRequest struct {
	// An image of the front of the patient insurance card.
	FrontImage *HealthInsuranceCreateRequestFrontImage `json:"front_image,omitempty" url:"front_image,omitempty"`
	// An image of the back of the patient insurance card.
	BackImage *HealthInsuranceCreateRequestBackImage `json:"back_image,omitempty" url:"back_image,omitempty"`
	// An image of the patient signature for health insurance billing.
	PatientSignatureImage *HealthInsuranceCreateRequestPatientSignatureImage `json:"patient_signature_image,omitempty" url:"patient_signature_image,omitempty"`
	// Textual description of what are the patient symptoms and attempted treatments.
	Subjective *string `json:"subjective,omitempty" url:"subjective,omitempty"`
	// Textual description of what are the physician assessments and testing plans.
	AssessmentPlan *string `json:"assessment_plan,omitempty" url:"assessment_plan,omitempty"`
	// Unique identifier representing a specific Health Insurance.
	PayorCode *string `json:"payor_code,omitempty" url:"payor_code,omitempty"`
	// Insurance unique number assigned to a patient, usually present on the insurance card.
	InsuranceId *string `json:"insurance_id,omitempty" url:"insurance_id,omitempty"`
	// Relationship between the patient and the insurance contractor. Values can be (Self, Spouse, Other Relationship).
	ResponsibleRelationship *ResponsibleRelationship `json:"responsible_relationship,omitempty" url:"responsible_relationship,omitempty"`
	// Responsible details when the value of responsible_relationship is not 'Self'.
	ResponsibleDetails *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails `json:"responsible_details,omitempty" url:"responsible_details,omitempty"`
	// Diagnosis codes for insurance billing.
	DiagnosisCodes []string `json:"diagnosis_codes,omitempty" url:"diagnosis_codes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HealthInsuranceCreateRequest) GetFrontImage() *HealthInsuranceCreateRequestFrontImage {
	if h == nil {
		return nil
	}
	return h.FrontImage
}

func (h *HealthInsuranceCreateRequest) GetBackImage() *HealthInsuranceCreateRequestBackImage {
	if h == nil {
		return nil
	}
	return h.BackImage
}

func (h *HealthInsuranceCreateRequest) GetPatientSignatureImage() *HealthInsuranceCreateRequestPatientSignatureImage {
	if h == nil {
		return nil
	}
	return h.PatientSignatureImage
}

func (h *HealthInsuranceCreateRequest) GetSubjective() *string {
	if h == nil {
		return nil
	}
	return h.Subjective
}

func (h *HealthInsuranceCreateRequest) GetAssessmentPlan() *string {
	if h == nil {
		return nil
	}
	return h.AssessmentPlan
}

func (h *HealthInsuranceCreateRequest) GetPayorCode() *string {
	if h == nil {
		return nil
	}
	return h.PayorCode
}

func (h *HealthInsuranceCreateRequest) GetInsuranceId() *string {
	if h == nil {
		return nil
	}
	return h.InsuranceId
}

func (h *HealthInsuranceCreateRequest) GetResponsibleRelationship() *ResponsibleRelationship {
	if h == nil {
		return nil
	}
	return h.ResponsibleRelationship
}

func (h *HealthInsuranceCreateRequest) GetResponsibleDetails() *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails {
	if h == nil {
		return nil
	}
	return h.ResponsibleDetails
}

func (h *HealthInsuranceCreateRequest) GetDiagnosisCodes() []string {
	if h == nil {
		return nil
	}
	return h.DiagnosisCodes
}

func (h *HealthInsuranceCreateRequest) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HealthInsuranceCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler HealthInsuranceCreateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HealthInsuranceCreateRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HealthInsuranceCreateRequest) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// An image of the back of the patient insurance card.
type HealthInsuranceCreateRequestBackImage struct {
	Jpeg *Jpeg
	Png  *Png

	typ string
}

func (h *HealthInsuranceCreateRequestBackImage) GetJpeg() *Jpeg {
	if h == nil {
		return nil
	}
	return h.Jpeg
}

func (h *HealthInsuranceCreateRequestBackImage) GetPng() *Png {
	if h == nil {
		return nil
	}
	return h.Png
}

func (h *HealthInsuranceCreateRequestBackImage) UnmarshalJSON(data []byte) error {
	valueJpeg := new(Jpeg)
	if err := json.Unmarshal(data, &valueJpeg); err == nil {
		h.typ = "Jpeg"
		h.Jpeg = valueJpeg
		return nil
	}
	valuePng := new(Png)
	if err := json.Unmarshal(data, &valuePng); err == nil {
		h.typ = "Png"
		h.Png = valuePng
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, h)
}

func (h HealthInsuranceCreateRequestBackImage) MarshalJSON() ([]byte, error) {
	if h.typ == "Jpeg" || h.Jpeg != nil {
		return json.Marshal(h.Jpeg)
	}
	if h.typ == "Png" || h.Png != nil {
		return json.Marshal(h.Png)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", h)
}

type HealthInsuranceCreateRequestBackImageVisitor interface {
	VisitJpeg(*Jpeg) error
	VisitPng(*Png) error
}

func (h *HealthInsuranceCreateRequestBackImage) Accept(visitor HealthInsuranceCreateRequestBackImageVisitor) error {
	if h.typ == "Jpeg" || h.Jpeg != nil {
		return visitor.VisitJpeg(h.Jpeg)
	}
	if h.typ == "Png" || h.Png != nil {
		return visitor.VisitPng(h.Png)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", h)
}

// An image of the front of the patient insurance card.
type HealthInsuranceCreateRequestFrontImage struct {
	Jpeg *Jpeg
	Png  *Png

	typ string
}

func (h *HealthInsuranceCreateRequestFrontImage) GetJpeg() *Jpeg {
	if h == nil {
		return nil
	}
	return h.Jpeg
}

func (h *HealthInsuranceCreateRequestFrontImage) GetPng() *Png {
	if h == nil {
		return nil
	}
	return h.Png
}

func (h *HealthInsuranceCreateRequestFrontImage) UnmarshalJSON(data []byte) error {
	valueJpeg := new(Jpeg)
	if err := json.Unmarshal(data, &valueJpeg); err == nil {
		h.typ = "Jpeg"
		h.Jpeg = valueJpeg
		return nil
	}
	valuePng := new(Png)
	if err := json.Unmarshal(data, &valuePng); err == nil {
		h.typ = "Png"
		h.Png = valuePng
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, h)
}

func (h HealthInsuranceCreateRequestFrontImage) MarshalJSON() ([]byte, error) {
	if h.typ == "Jpeg" || h.Jpeg != nil {
		return json.Marshal(h.Jpeg)
	}
	if h.typ == "Png" || h.Png != nil {
		return json.Marshal(h.Png)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", h)
}

type HealthInsuranceCreateRequestFrontImageVisitor interface {
	VisitJpeg(*Jpeg) error
	VisitPng(*Png) error
}

func (h *HealthInsuranceCreateRequestFrontImage) Accept(visitor HealthInsuranceCreateRequestFrontImageVisitor) error {
	if h.typ == "Jpeg" || h.Jpeg != nil {
		return visitor.VisitJpeg(h.Jpeg)
	}
	if h.typ == "Png" || h.Png != nil {
		return visitor.VisitPng(h.Png)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", h)
}

// An image of the patient signature for health insurance billing.
type HealthInsuranceCreateRequestPatientSignatureImage struct {
	Jpeg *Jpeg
	Png  *Png

	typ string
}

func (h *HealthInsuranceCreateRequestPatientSignatureImage) GetJpeg() *Jpeg {
	if h == nil {
		return nil
	}
	return h.Jpeg
}

func (h *HealthInsuranceCreateRequestPatientSignatureImage) GetPng() *Png {
	if h == nil {
		return nil
	}
	return h.Png
}

func (h *HealthInsuranceCreateRequestPatientSignatureImage) UnmarshalJSON(data []byte) error {
	valueJpeg := new(Jpeg)
	if err := json.Unmarshal(data, &valueJpeg); err == nil {
		h.typ = "Jpeg"
		h.Jpeg = valueJpeg
		return nil
	}
	valuePng := new(Png)
	if err := json.Unmarshal(data, &valuePng); err == nil {
		h.typ = "Png"
		h.Png = valuePng
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, h)
}

func (h HealthInsuranceCreateRequestPatientSignatureImage) MarshalJSON() ([]byte, error) {
	if h.typ == "Jpeg" || h.Jpeg != nil {
		return json.Marshal(h.Jpeg)
	}
	if h.typ == "Png" || h.Png != nil {
		return json.Marshal(h.Png)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", h)
}

type HealthInsuranceCreateRequestPatientSignatureImageVisitor interface {
	VisitJpeg(*Jpeg) error
	VisitPng(*Png) error
}

func (h *HealthInsuranceCreateRequestPatientSignatureImage) Accept(visitor HealthInsuranceCreateRequestPatientSignatureImageVisitor) error {
	if h.typ == "Jpeg" || h.Jpeg != nil {
		return visitor.VisitJpeg(h.Jpeg)
	}
	if h.typ == "Png" || h.Png != nil {
		return visitor.VisitPng(h.Png)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", h)
}

type HistoricalPullCompleted struct {
	UserId    string    `json:"user_id" url:"user_id"`
	StartDate time.Time `json:"start_date" url:"start_date"`
	EndDate   time.Time `json:"end_date" url:"end_date"`
	IsFinal   bool      `json:"is_final" url:"is_final"`
	Provider  string    `json:"provider" url:"provider"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HistoricalPullCompleted) GetUserId() string {
	if h == nil {
		return ""
	}
	return h.UserId
}

func (h *HistoricalPullCompleted) GetStartDate() time.Time {
	if h == nil {
		return time.Time{}
	}
	return h.StartDate
}

func (h *HistoricalPullCompleted) GetEndDate() time.Time {
	if h == nil {
		return time.Time{}
	}
	return h.EndDate
}

func (h *HistoricalPullCompleted) GetIsFinal() bool {
	if h == nil {
		return false
	}
	return h.IsFinal
}

func (h *HistoricalPullCompleted) GetProvider() string {
	if h == nil {
		return ""
	}
	return h.Provider
}

func (h *HistoricalPullCompleted) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HistoricalPullCompleted) UnmarshalJSON(data []byte) error {
	type embed HistoricalPullCompleted
	var unmarshaler = struct {
		embed
		StartDate *internal.DateTime `json:"start_date"`
		EndDate   *internal.DateTime `json:"end_date"`
	}{
		embed: embed(*h),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*h = HistoricalPullCompleted(unmarshaler.embed)
	h.StartDate = unmarshaler.StartDate.Time()
	h.EndDate = unmarshaler.EndDate.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HistoricalPullCompleted) MarshalJSON() ([]byte, error) {
	type embed HistoricalPullCompleted
	var marshaler = struct {
		embed
		StartDate *internal.DateTime `json:"start_date"`
		EndDate   *internal.DateTime `json:"end_date"`
	}{
		embed:     embed(*h),
		StartDate: internal.NewDateTime(h.StartDate),
		EndDate:   internal.NewDateTime(h.EndDate),
	}
	return json.Marshal(marshaler)
}

func (h *HistoricalPullCompleted) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HttpValidationError struct {
	Detail interface{} `json:"detail,omitempty" url:"detail,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HttpValidationError) GetDetail() interface{} {
	if h == nil {
		return nil
	}
	return h.Detail
}

func (h *HttpValidationError) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpValidationError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HttpValidationError) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// ℹ️ This enum is non-exhaustive.
type Interpretation string

const (
	InterpretationNormal   Interpretation = "normal"
	InterpretationAbnormal Interpretation = "abnormal"
	InterpretationCritical Interpretation = "critical"
)

func NewInterpretationFromString(s string) (Interpretation, error) {
	switch s {
	case "normal":
		return InterpretationNormal, nil
	case "abnormal":
		return InterpretationAbnormal, nil
	case "critical":
		return InterpretationCritical, nil
	}
	var t Interpretation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i Interpretation) Ptr() *Interpretation {
	return &i
}

type Jpeg struct {
	Content     string `json:"content" url:"content"`
	contentType string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *Jpeg) GetContent() string {
	if j == nil {
		return ""
	}
	return j.Content
}

func (j *Jpeg) ContentType() string {
	return j.contentType
}

func (j *Jpeg) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *Jpeg) UnmarshalJSON(data []byte) error {
	type embed Jpeg
	var unmarshaler = struct {
		embed
		ContentType string `json:"content_type"`
	}{
		embed: embed(*j),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*j = Jpeg(unmarshaler.embed)
	if unmarshaler.ContentType != "image/jpeg" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", j, "image/jpeg", unmarshaler.ContentType)
	}
	j.contentType = unmarshaler.ContentType
	extraProperties, err := internal.ExtractExtraProperties(data, *j, "content_type")
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *Jpeg) MarshalJSON() ([]byte, error) {
	type embed Jpeg
	var marshaler = struct {
		embed
		ContentType string `json:"content_type"`
	}{
		embed:       embed(*j),
		ContentType: "image/jpeg",
	}
	return json.Marshal(marshaler)
}

func (j *Jpeg) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// The method used to perform a lab test. ℹ️ This enum is non-exhaustive.
type LabTestCollectionMethod string

const (
	LabTestCollectionMethodTestkit          LabTestCollectionMethod = "testkit"
	LabTestCollectionMethodWalkInTest       LabTestCollectionMethod = "walk_in_test"
	LabTestCollectionMethodAtHomePhlebotomy LabTestCollectionMethod = "at_home_phlebotomy"
	LabTestCollectionMethodOnSiteCollection LabTestCollectionMethod = "on_site_collection"
)

func NewLabTestCollectionMethodFromString(s string) (LabTestCollectionMethod, error) {
	switch s {
	case "testkit":
		return LabTestCollectionMethodTestkit, nil
	case "walk_in_test":
		return LabTestCollectionMethodWalkInTest, nil
	case "at_home_phlebotomy":
		return LabTestCollectionMethodAtHomePhlebotomy, nil
	case "on_site_collection":
		return LabTestCollectionMethodOnSiteCollection, nil
	}
	var t LabTestCollectionMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LabTestCollectionMethod) Ptr() *LabTestCollectionMethod {
	return &l
}

// The type of sample used to perform a lab test. ℹ️ This enum is non-exhaustive.
type LabTestSampleType string

const (
	LabTestSampleTypeDriedBloodSpot LabTestSampleType = "dried_blood_spot"
	LabTestSampleTypeArmCollector   LabTestSampleType = "arm_collector"
	LabTestSampleTypeSerum          LabTestSampleType = "serum"
	LabTestSampleTypeSaliva         LabTestSampleType = "saliva"
	LabTestSampleTypeUrine          LabTestSampleType = "urine"
)

func NewLabTestSampleTypeFromString(s string) (LabTestSampleType, error) {
	switch s {
	case "dried_blood_spot":
		return LabTestSampleTypeDriedBloodSpot, nil
	case "arm_collector":
		return LabTestSampleTypeArmCollector, nil
	case "serum":
		return LabTestSampleTypeSerum, nil
	case "saliva":
		return LabTestSampleTypeSaliva, nil
	case "urine":
		return LabTestSampleTypeUrine, nil
	}
	var t LabTestSampleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LabTestSampleType) Ptr() *LabTestSampleType {
	return &l
}

// ℹ️ This enum is non-exhaustive.
type LabTestStatus string

const (
	LabTestStatusActive          LabTestStatus = "active"
	LabTestStatusPendingApproval LabTestStatus = "pending_approval"
	LabTestStatusInactive        LabTestStatus = "inactive"
)

func NewLabTestStatusFromString(s string) (LabTestStatus, error) {
	switch s {
	case "active":
		return LabTestStatusActive, nil
	case "pending_approval":
		return LabTestStatusPendingApproval, nil
	case "inactive":
		return LabTestStatusInactive, nil
	}
	var t LabTestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LabTestStatus) Ptr() *LabTestStatus {
	return &l
}

// ℹ️ This enum is non-exhaustive.
type Labs string

const (
	LabsAyumetrix    Labs = "ayumetrix"
	LabsSpiriplex    Labs = "spiriplex"
	LabsUssl         Labs = "ussl"
	LabsQuest        Labs = "quest"
	LabsLabcorp      Labs = "labcorp"
	LabsBioreference Labs = "bioreference"
	LabsUsBiotek     Labs = "us_biotek"
	LabsManual       Labs = "manual"
	LabsSanocardio   Labs = "sanocardio"
	LabsIhd          Labs = "ihd"
	LabsNexus        Labs = "nexus"
)

func NewLabsFromString(s string) (Labs, error) {
	switch s {
	case "ayumetrix":
		return LabsAyumetrix, nil
	case "spiriplex":
		return LabsSpiriplex, nil
	case "ussl":
		return LabsUssl, nil
	case "quest":
		return LabsQuest, nil
	case "labcorp":
		return LabsLabcorp, nil
	case "bioreference":
		return LabsBioreference, nil
	case "us_biotek":
		return LabsUsBiotek, nil
	case "manual":
		return LabsManual, nil
	case "sanocardio":
		return LabsSanocardio, nil
	case "ihd":
		return LabsIhd, nil
	case "nexus":
		return LabsNexus, nil
	}
	var t Labs
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l Labs) Ptr() *Labs {
	return &l
}

// ℹ️ This enum is non-exhaustive.
type MarkerType string

const (
	MarkerTypeBiomarker MarkerType = "biomarker"
	MarkerTypePanel     MarkerType = "panel"
)

func NewMarkerTypeFromString(s string) (MarkerType, error) {
	switch s {
	case "biomarker":
		return MarkerTypeBiomarker, nil
	case "panel":
		return MarkerTypePanel, nil
	}
	var t MarkerType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MarkerType) Ptr() *MarkerType {
	return &m
}

// ℹ️ This enum is non-exhaustive.
type Minerals string

const (
	MineralsSodium     Minerals = "sodium"
	MineralsPotassium  Minerals = "potassium"
	MineralsCalcium    Minerals = "calcium"
	MineralsPhosphorus Minerals = "phosphorus"
	MineralsMagnesium  Minerals = "magnesium"
	MineralsIron       Minerals = "iron"
	MineralsZinc       Minerals = "zinc"
	MineralsFluoride   Minerals = "fluoride"
	MineralsChloride   Minerals = "chloride"
)

func NewMineralsFromString(s string) (Minerals, error) {
	switch s {
	case "sodium":
		return MineralsSodium, nil
	case "potassium":
		return MineralsPotassium, nil
	case "calcium":
		return MineralsCalcium, nil
	case "phosphorus":
		return MineralsPhosphorus, nil
	case "magnesium":
		return MineralsMagnesium, nil
	case "iron":
		return MineralsIron, nil
	case "zinc":
		return MineralsZinc, nil
	case "fluoride":
		return MineralsFluoride, nil
	case "chloride":
		return MineralsChloride, nil
	}
	var t Minerals
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m Minerals) Ptr() *Minerals {
	return &m
}

// ℹ️ This enum is non-exhaustive.
type OrderStatus string

const (
	OrderStatusReceivedWalkInTestOrdered                            OrderStatus = "received.walk_in_test.ordered"
	OrderStatusReceivedWalkInTestRequisitionCreated                 OrderStatus = "received.walk_in_test.requisition_created"
	OrderStatusReceivedWalkInTestRequisitionBypassed                OrderStatus = "received.walk_in_test.requisition_bypassed"
	OrderStatusCompletedWalkInTestCompleted                         OrderStatus = "completed.walk_in_test.completed"
	OrderStatusSampleWithLabWalkInTestPartialResults                OrderStatus = "sample_with_lab.walk_in_test.partial_results"
	OrderStatusFailedWalkInTestSampleError                          OrderStatus = "failed.walk_in_test.sample_error"
	OrderStatusCancelledWalkInTestCancelled                         OrderStatus = "cancelled.walk_in_test.cancelled"
	OrderStatusCollectingSampleWalkInTestAppointmentPending         OrderStatus = "collecting_sample.walk_in_test.appointment_pending"
	OrderStatusCollectingSampleWalkInTestAppointmentScheduled       OrderStatus = "collecting_sample.walk_in_test.appointment_scheduled"
	OrderStatusCollectingSampleWalkInTestAppointmentCancelled       OrderStatus = "collecting_sample.walk_in_test.appointment_cancelled"
	OrderStatusCollectingSampleWalkInTestRedrawAvailable            OrderStatus = "collecting_sample.walk_in_test.redraw_available"
	OrderStatusReceivedAtHomePhlebotomyOrdered                      OrderStatus = "received.at_home_phlebotomy.ordered"
	OrderStatusReceivedAtHomePhlebotomyRequisitionCreated           OrderStatus = "received.at_home_phlebotomy.requisition_created"
	OrderStatusReceivedAtHomePhlebotomyRequisitionBypassed          OrderStatus = "received.at_home_phlebotomy.requisition_bypassed"
	OrderStatusCollectingSampleAtHomePhlebotomyAppointmentPending   OrderStatus = "collecting_sample.at_home_phlebotomy.appointment_pending"
	OrderStatusCollectingSampleAtHomePhlebotomyAppointmentScheduled OrderStatus = "collecting_sample.at_home_phlebotomy.appointment_scheduled"
	OrderStatusCollectingSampleAtHomePhlebotomyDrawCompleted        OrderStatus = "collecting_sample.at_home_phlebotomy.draw_completed"
	OrderStatusCollectingSampleAtHomePhlebotomyAppointmentCancelled OrderStatus = "collecting_sample.at_home_phlebotomy.appointment_cancelled"
	OrderStatusCompletedAtHomePhlebotomyCompleted                   OrderStatus = "completed.at_home_phlebotomy.completed"
	OrderStatusSampleWithLabAtHomePhlebotomyPartialResults          OrderStatus = "sample_with_lab.at_home_phlebotomy.partial_results"
	OrderStatusCancelledAtHomePhlebotomyCancelled                   OrderStatus = "cancelled.at_home_phlebotomy.cancelled"
	OrderStatusFailedAtHomePhlebotomySampleError                    OrderStatus = "failed.at_home_phlebotomy.sample_error"
	OrderStatusReceivedTestkitOrdered                               OrderStatus = "received.testkit.ordered"
	OrderStatusReceivedTestkitAwaitingRegistration                  OrderStatus = "received.testkit.awaiting_registration"
	OrderStatusReceivedTestkitRequisitionCreated                    OrderStatus = "received.testkit.requisition_created"
	OrderStatusReceivedTestkitRequisitionBypassed                   OrderStatus = "received.testkit.requisition_bypassed"
	OrderStatusReceivedTestkitRegistered                            OrderStatus = "received.testkit.registered"
	OrderStatusCollectingSampleTestkitTransitCustomer               OrderStatus = "collecting_sample.testkit.transit_customer"
	OrderStatusCollectingSampleTestkitOutForDelivery                OrderStatus = "collecting_sample.testkit.out_for_delivery"
	OrderStatusCollectingSampleTestkitWithCustomer                  OrderStatus = "collecting_sample.testkit.with_customer"
	OrderStatusCollectingSampleTestkitTransitLab                    OrderStatus = "collecting_sample.testkit.transit_lab"
	OrderStatusSampleWithLabTestkitDeliveredToLab                   OrderStatus = "sample_with_lab.testkit.delivered_to_lab"
	OrderStatusCompletedTestkitCompleted                            OrderStatus = "completed.testkit.completed"
	OrderStatusFailedTestkitFailureToDeliverToCustomer              OrderStatus = "failed.testkit.failure_to_deliver_to_customer"
	OrderStatusFailedTestkitFailureToDeliverToLab                   OrderStatus = "failed.testkit.failure_to_deliver_to_lab"
	OrderStatusFailedTestkitSampleError                             OrderStatus = "failed.testkit.sample_error"
	OrderStatusFailedTestkitLost                                    OrderStatus = "failed.testkit.lost"
	OrderStatusCancelledTestkitCancelled                            OrderStatus = "cancelled.testkit.cancelled"
	OrderStatusCancelledTestkitDoNotProcess                         OrderStatus = "cancelled.testkit.do_not_process"
	OrderStatusCollectingSampleTestkitProblemInTransitCustomer      OrderStatus = "collecting_sample.testkit.problem_in_transit_customer"
	OrderStatusCollectingSampleTestkitProblemInTransitLab           OrderStatus = "collecting_sample.testkit.problem_in_transit_lab"
	OrderStatusReceivedOnSiteCollectionOrdered                      OrderStatus = "received.on_site_collection.ordered"
	OrderStatusReceivedOnSiteCollectionRequisitionCreated           OrderStatus = "received.on_site_collection.requisition_created"
	OrderStatusReceivedOnSiteCollectionRequisitionBypassed          OrderStatus = "received.on_site_collection.requisition_bypassed"
	OrderStatusSampleWithLabOnSiteCollectionDrawCompleted           OrderStatus = "sample_with_lab.on_site_collection.draw_completed"
	OrderStatusCompletedOnSiteCollectionCompleted                   OrderStatus = "completed.on_site_collection.completed"
	OrderStatusCancelledOnSiteCollectionCancelled                   OrderStatus = "cancelled.on_site_collection.cancelled"
	OrderStatusSampleWithLabOnSiteCollectionPartialResults          OrderStatus = "sample_with_lab.on_site_collection.partial_results"
	OrderStatusFailedOnSiteCollectionSampleError                    OrderStatus = "failed.on_site_collection.sample_error"
)

func NewOrderStatusFromString(s string) (OrderStatus, error) {
	switch s {
	case "received.walk_in_test.ordered":
		return OrderStatusReceivedWalkInTestOrdered, nil
	case "received.walk_in_test.requisition_created":
		return OrderStatusReceivedWalkInTestRequisitionCreated, nil
	case "received.walk_in_test.requisition_bypassed":
		return OrderStatusReceivedWalkInTestRequisitionBypassed, nil
	case "completed.walk_in_test.completed":
		return OrderStatusCompletedWalkInTestCompleted, nil
	case "sample_with_lab.walk_in_test.partial_results":
		return OrderStatusSampleWithLabWalkInTestPartialResults, nil
	case "failed.walk_in_test.sample_error":
		return OrderStatusFailedWalkInTestSampleError, nil
	case "cancelled.walk_in_test.cancelled":
		return OrderStatusCancelledWalkInTestCancelled, nil
	case "collecting_sample.walk_in_test.appointment_pending":
		return OrderStatusCollectingSampleWalkInTestAppointmentPending, nil
	case "collecting_sample.walk_in_test.appointment_scheduled":
		return OrderStatusCollectingSampleWalkInTestAppointmentScheduled, nil
	case "collecting_sample.walk_in_test.appointment_cancelled":
		return OrderStatusCollectingSampleWalkInTestAppointmentCancelled, nil
	case "collecting_sample.walk_in_test.redraw_available":
		return OrderStatusCollectingSampleWalkInTestRedrawAvailable, nil
	case "received.at_home_phlebotomy.ordered":
		return OrderStatusReceivedAtHomePhlebotomyOrdered, nil
	case "received.at_home_phlebotomy.requisition_created":
		return OrderStatusReceivedAtHomePhlebotomyRequisitionCreated, nil
	case "received.at_home_phlebotomy.requisition_bypassed":
		return OrderStatusReceivedAtHomePhlebotomyRequisitionBypassed, nil
	case "collecting_sample.at_home_phlebotomy.appointment_pending":
		return OrderStatusCollectingSampleAtHomePhlebotomyAppointmentPending, nil
	case "collecting_sample.at_home_phlebotomy.appointment_scheduled":
		return OrderStatusCollectingSampleAtHomePhlebotomyAppointmentScheduled, nil
	case "collecting_sample.at_home_phlebotomy.draw_completed":
		return OrderStatusCollectingSampleAtHomePhlebotomyDrawCompleted, nil
	case "collecting_sample.at_home_phlebotomy.appointment_cancelled":
		return OrderStatusCollectingSampleAtHomePhlebotomyAppointmentCancelled, nil
	case "completed.at_home_phlebotomy.completed":
		return OrderStatusCompletedAtHomePhlebotomyCompleted, nil
	case "sample_with_lab.at_home_phlebotomy.partial_results":
		return OrderStatusSampleWithLabAtHomePhlebotomyPartialResults, nil
	case "cancelled.at_home_phlebotomy.cancelled":
		return OrderStatusCancelledAtHomePhlebotomyCancelled, nil
	case "failed.at_home_phlebotomy.sample_error":
		return OrderStatusFailedAtHomePhlebotomySampleError, nil
	case "received.testkit.ordered":
		return OrderStatusReceivedTestkitOrdered, nil
	case "received.testkit.awaiting_registration":
		return OrderStatusReceivedTestkitAwaitingRegistration, nil
	case "received.testkit.requisition_created":
		return OrderStatusReceivedTestkitRequisitionCreated, nil
	case "received.testkit.requisition_bypassed":
		return OrderStatusReceivedTestkitRequisitionBypassed, nil
	case "received.testkit.registered":
		return OrderStatusReceivedTestkitRegistered, nil
	case "collecting_sample.testkit.transit_customer":
		return OrderStatusCollectingSampleTestkitTransitCustomer, nil
	case "collecting_sample.testkit.out_for_delivery":
		return OrderStatusCollectingSampleTestkitOutForDelivery, nil
	case "collecting_sample.testkit.with_customer":
		return OrderStatusCollectingSampleTestkitWithCustomer, nil
	case "collecting_sample.testkit.transit_lab":
		return OrderStatusCollectingSampleTestkitTransitLab, nil
	case "sample_with_lab.testkit.delivered_to_lab":
		return OrderStatusSampleWithLabTestkitDeliveredToLab, nil
	case "completed.testkit.completed":
		return OrderStatusCompletedTestkitCompleted, nil
	case "failed.testkit.failure_to_deliver_to_customer":
		return OrderStatusFailedTestkitFailureToDeliverToCustomer, nil
	case "failed.testkit.failure_to_deliver_to_lab":
		return OrderStatusFailedTestkitFailureToDeliverToLab, nil
	case "failed.testkit.sample_error":
		return OrderStatusFailedTestkitSampleError, nil
	case "failed.testkit.lost":
		return OrderStatusFailedTestkitLost, nil
	case "cancelled.testkit.cancelled":
		return OrderStatusCancelledTestkitCancelled, nil
	case "cancelled.testkit.do_not_process":
		return OrderStatusCancelledTestkitDoNotProcess, nil
	case "collecting_sample.testkit.problem_in_transit_customer":
		return OrderStatusCollectingSampleTestkitProblemInTransitCustomer, nil
	case "collecting_sample.testkit.problem_in_transit_lab":
		return OrderStatusCollectingSampleTestkitProblemInTransitLab, nil
	case "received.on_site_collection.ordered":
		return OrderStatusReceivedOnSiteCollectionOrdered, nil
	case "received.on_site_collection.requisition_created":
		return OrderStatusReceivedOnSiteCollectionRequisitionCreated, nil
	case "received.on_site_collection.requisition_bypassed":
		return OrderStatusReceivedOnSiteCollectionRequisitionBypassed, nil
	case "sample_with_lab.on_site_collection.draw_completed":
		return OrderStatusSampleWithLabOnSiteCollectionDrawCompleted, nil
	case "completed.on_site_collection.completed":
		return OrderStatusCompletedOnSiteCollectionCompleted, nil
	case "cancelled.on_site_collection.cancelled":
		return OrderStatusCancelledOnSiteCollectionCancelled, nil
	case "sample_with_lab.on_site_collection.partial_results":
		return OrderStatusSampleWithLabOnSiteCollectionPartialResults, nil
	case "failed.on_site_collection.sample_error":
		return OrderStatusFailedOnSiteCollectionSampleError, nil
	}
	var t OrderStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrderStatus) Ptr() *OrderStatus {
	return &o
}

// ℹ️ This enum is non-exhaustive.
type OrderTopLevelStatus string

const (
	OrderTopLevelStatusReceived         OrderTopLevelStatus = "received"
	OrderTopLevelStatusCollectingSample OrderTopLevelStatus = "collecting_sample"
	OrderTopLevelStatusSampleWithLab    OrderTopLevelStatus = "sample_with_lab"
	OrderTopLevelStatusCompleted        OrderTopLevelStatus = "completed"
	OrderTopLevelStatusCancelled        OrderTopLevelStatus = "cancelled"
	OrderTopLevelStatusFailed           OrderTopLevelStatus = "failed"
)

func NewOrderTopLevelStatusFromString(s string) (OrderTopLevelStatus, error) {
	switch s {
	case "received":
		return OrderTopLevelStatusReceived, nil
	case "collecting_sample":
		return OrderTopLevelStatusCollectingSample, nil
	case "sample_with_lab":
		return OrderTopLevelStatusSampleWithLab, nil
	case "completed":
		return OrderTopLevelStatusCompleted, nil
	case "cancelled":
		return OrderTopLevelStatusCancelled, nil
	case "failed":
		return OrderTopLevelStatusFailed, nil
	}
	var t OrderTopLevelStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrderTopLevelStatus) Ptr() *OrderTopLevelStatus {
	return &o
}

type PatientAddressCompatible struct {
	ReceiverName *string `json:"receiver_name,omitempty" url:"receiver_name,omitempty"`
	FirstLine    string  `json:"first_line" url:"first_line"`
	SecondLine   *string `json:"second_line,omitempty" url:"second_line,omitempty"`
	City         string  `json:"city" url:"city"`
	State        string  `json:"state" url:"state"`
	Zip          string  `json:"zip" url:"zip"`
	Country      string  `json:"country" url:"country"`
	PhoneNumber  *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatientAddressCompatible) GetReceiverName() *string {
	if p == nil {
		return nil
	}
	return p.ReceiverName
}

func (p *PatientAddressCompatible) GetFirstLine() string {
	if p == nil {
		return ""
	}
	return p.FirstLine
}

func (p *PatientAddressCompatible) GetSecondLine() *string {
	if p == nil {
		return nil
	}
	return p.SecondLine
}

func (p *PatientAddressCompatible) GetCity() string {
	if p == nil {
		return ""
	}
	return p.City
}

func (p *PatientAddressCompatible) GetState() string {
	if p == nil {
		return ""
	}
	return p.State
}

func (p *PatientAddressCompatible) GetZip() string {
	if p == nil {
		return ""
	}
	return p.Zip
}

func (p *PatientAddressCompatible) GetCountry() string {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *PatientAddressCompatible) GetPhoneNumber() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumber
}

func (p *PatientAddressCompatible) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatientAddressCompatible) UnmarshalJSON(data []byte) error {
	type unmarshaler PatientAddressCompatible
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatientAddressCompatible(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatientAddressCompatible) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PatientAddressWithValidation struct {
	ReceiverName *string `json:"receiver_name,omitempty" url:"receiver_name,omitempty"`
	FirstLine    string  `json:"first_line" url:"first_line"`
	SecondLine   *string `json:"second_line,omitempty" url:"second_line,omitempty"`
	City         string  `json:"city" url:"city"`
	State        string  `json:"state" url:"state"`
	Zip          string  `json:"zip" url:"zip"`
	Country      string  `json:"country" url:"country"`
	PhoneNumber  *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatientAddressWithValidation) GetReceiverName() *string {
	if p == nil {
		return nil
	}
	return p.ReceiverName
}

func (p *PatientAddressWithValidation) GetFirstLine() string {
	if p == nil {
		return ""
	}
	return p.FirstLine
}

func (p *PatientAddressWithValidation) GetSecondLine() *string {
	if p == nil {
		return nil
	}
	return p.SecondLine
}

func (p *PatientAddressWithValidation) GetCity() string {
	if p == nil {
		return ""
	}
	return p.City
}

func (p *PatientAddressWithValidation) GetState() string {
	if p == nil {
		return ""
	}
	return p.State
}

func (p *PatientAddressWithValidation) GetZip() string {
	if p == nil {
		return ""
	}
	return p.Zip
}

func (p *PatientAddressWithValidation) GetCountry() string {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *PatientAddressWithValidation) GetPhoneNumber() *string {
	if p == nil {
		return nil
	}
	return p.PhoneNumber
}

func (p *PatientAddressWithValidation) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatientAddressWithValidation) UnmarshalJSON(data []byte) error {
	type unmarshaler PatientAddressWithValidation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatientAddressWithValidation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatientAddressWithValidation) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Patient details with validation for first_name, last_name, email, and dob.
type PatientDetailsWithValidation struct {
	FirstName   string `json:"first_name" url:"first_name"`
	LastName    string `json:"last_name" url:"last_name"`
	Dob         string `json:"dob" url:"dob"`
	Gender      Gender `json:"gender" url:"gender"`
	PhoneNumber string `json:"phone_number" url:"phone_number"`
	Email       string `json:"email" url:"email"`
	// Parent/medical_proxy details. Required if patient is a minor.
	MedicalProxy *GuarantorDetails `json:"medical_proxy,omitempty" url:"medical_proxy,omitempty"`
	// If not provided, will be set to 'Not Specified'
	Race *Race `json:"race,omitempty" url:"race,omitempty"`
	// If not provided, will be set to 'Not Specified'
	Ethnicity *Ethnicity `json:"ethnicity,omitempty" url:"ethnicity,omitempty"`
	// If not provided, will be set to 'Not Specified'
	SexualOrientation *SexualOrientation `json:"sexual_orientation,omitempty" url:"sexual_orientation,omitempty"`
	// If not provided, will be set to 'Not Specified'
	GenderIdentity *GenderIdentity `json:"gender_identity,omitempty" url:"gender_identity,omitempty"`
	// Household income in USD. If not provided, will be set to None
	HouseholdIncome *int `json:"household_income,omitempty" url:"household_income,omitempty"`
	// Household size. If not provided, will be set to None
	HouseholdSize *int `json:"household_size,omitempty" url:"household_size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PatientDetailsWithValidation) GetFirstName() string {
	if p == nil {
		return ""
	}
	return p.FirstName
}

func (p *PatientDetailsWithValidation) GetLastName() string {
	if p == nil {
		return ""
	}
	return p.LastName
}

func (p *PatientDetailsWithValidation) GetDob() string {
	if p == nil {
		return ""
	}
	return p.Dob
}

func (p *PatientDetailsWithValidation) GetGender() Gender {
	if p == nil {
		return ""
	}
	return p.Gender
}

func (p *PatientDetailsWithValidation) GetPhoneNumber() string {
	if p == nil {
		return ""
	}
	return p.PhoneNumber
}

func (p *PatientDetailsWithValidation) GetEmail() string {
	if p == nil {
		return ""
	}
	return p.Email
}

func (p *PatientDetailsWithValidation) GetMedicalProxy() *GuarantorDetails {
	if p == nil {
		return nil
	}
	return p.MedicalProxy
}

func (p *PatientDetailsWithValidation) GetRace() *Race {
	if p == nil {
		return nil
	}
	return p.Race
}

func (p *PatientDetailsWithValidation) GetEthnicity() *Ethnicity {
	if p == nil {
		return nil
	}
	return p.Ethnicity
}

func (p *PatientDetailsWithValidation) GetSexualOrientation() *SexualOrientation {
	if p == nil {
		return nil
	}
	return p.SexualOrientation
}

func (p *PatientDetailsWithValidation) GetGenderIdentity() *GenderIdentity {
	if p == nil {
		return nil
	}
	return p.GenderIdentity
}

func (p *PatientDetailsWithValidation) GetHouseholdIncome() *int {
	if p == nil {
		return nil
	}
	return p.HouseholdIncome
}

func (p *PatientDetailsWithValidation) GetHouseholdSize() *int {
	if p == nil {
		return nil
	}
	return p.HouseholdSize
}

func (p *PatientDetailsWithValidation) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PatientDetailsWithValidation) UnmarshalJSON(data []byte) error {
	type unmarshaler PatientDetailsWithValidation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatientDetailsWithValidation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatientDetailsWithValidation) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// ℹ️ This enum is non-exhaustive.
type PayorCodeExternalProvider string

const (
	PayorCodeExternalProviderChangeHealthcare PayorCodeExternalProvider = "change_healthcare"
	PayorCodeExternalProviderAvaility         PayorCodeExternalProvider = "availity"
	PayorCodeExternalProviderStedi            PayorCodeExternalProvider = "stedi"
)

func NewPayorCodeExternalProviderFromString(s string) (PayorCodeExternalProvider, error) {
	switch s {
	case "change_healthcare":
		return PayorCodeExternalProviderChangeHealthcare, nil
	case "availity":
		return PayorCodeExternalProviderAvaility, nil
	case "stedi":
		return PayorCodeExternalProviderStedi, nil
	}
	var t PayorCodeExternalProvider
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PayorCodeExternalProvider) Ptr() *PayorCodeExternalProvider {
	return &p
}

type Png struct {
	Content     string `json:"content" url:"content"`
	contentType string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Png) GetContent() string {
	if p == nil {
		return ""
	}
	return p.Content
}

func (p *Png) ContentType() string {
	return p.contentType
}

func (p *Png) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Png) UnmarshalJSON(data []byte) error {
	type embed Png
	var unmarshaler = struct {
		embed
		ContentType string `json:"content_type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = Png(unmarshaler.embed)
	if unmarshaler.ContentType != "image/png" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "image/png", unmarshaler.ContentType)
	}
	p.contentType = unmarshaler.ContentType
	extraProperties, err := internal.ExtractExtraProperties(data, *p, "content_type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Png) MarshalJSON() ([]byte, error) {
	type embed Png
	var marshaler = struct {
		embed
		ContentType string `json:"content_type"`
	}{
		embed:       embed(*p),
		ContentType: "image/png",
	}
	return json.Marshal(marshaler)
}

func (p *Png) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PostOrderResponse struct {
	Order   *ClientFacingOrder `json:"order" url:"order"`
	Status  string             `json:"status" url:"status"`
	Message string             `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PostOrderResponse) GetOrder() *ClientFacingOrder {
	if p == nil {
		return nil
	}
	return p.Order
}

func (p *PostOrderResponse) GetStatus() string {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *PostOrderResponse) GetMessage() string {
	if p == nil {
		return ""
	}
	return p.Message
}

func (p *PostOrderResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PostOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PostOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PostOrderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PostOrderResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProviderConnectionCreated struct {
	UserId string `json:"user_id" url:"user_id"`
	// Deprecated. Use `provider` instead. Subject to removal after 1 Jan 2024.
	Source   *ClientFacingProvider `json:"source" url:"source"`
	Provider *ClientFacingProvider `json:"provider" url:"provider"`
	// The unique identifier of the associated external data provider user.
	//
	// * OAuth Providers: User unique identifier; provider-specific formats
	// * Password Providers: Username
	// * Email Providers: Email
	// * Junction Mobile SDK Providers: `null` (not available)
	ExternalUserId       *string                          `json:"external_user_id,omitempty" url:"external_user_id,omitempty"`
	ResourceAvailability map[string]*ResourceAvailability `json:"resource_availability" url:"resource_availability"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProviderConnectionCreated) GetUserId() string {
	if p == nil {
		return ""
	}
	return p.UserId
}

func (p *ProviderConnectionCreated) GetSource() *ClientFacingProvider {
	if p == nil {
		return nil
	}
	return p.Source
}

func (p *ProviderConnectionCreated) GetProvider() *ClientFacingProvider {
	if p == nil {
		return nil
	}
	return p.Provider
}

func (p *ProviderConnectionCreated) GetExternalUserId() *string {
	if p == nil {
		return nil
	}
	return p.ExternalUserId
}

func (p *ProviderConnectionCreated) GetResourceAvailability() map[string]*ResourceAvailability {
	if p == nil {
		return nil
	}
	return p.ResourceAvailability
}

func (p *ProviderConnectionCreated) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProviderConnectionCreated) UnmarshalJSON(data []byte) error {
	type unmarshaler ProviderConnectionCreated
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProviderConnectionCreated(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProviderConnectionCreated) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProviderConnectionError struct {
	Provider string `json:"provider" url:"provider"`
	UserId   string `json:"user_id" url:"user_id"`
	Message  string `json:"message" url:"message"`
	// ℹ️ This enum is non-exhaustive.
	ErrorType    ProviderConnectionErrorErrorType `json:"error_type" url:"error_type"`
	ErrorDetails string                           `json:"error_details" url:"error_details"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProviderConnectionError) GetProvider() string {
	if p == nil {
		return ""
	}
	return p.Provider
}

func (p *ProviderConnectionError) GetUserId() string {
	if p == nil {
		return ""
	}
	return p.UserId
}

func (p *ProviderConnectionError) GetMessage() string {
	if p == nil {
		return ""
	}
	return p.Message
}

func (p *ProviderConnectionError) GetErrorType() ProviderConnectionErrorErrorType {
	if p == nil {
		return ""
	}
	return p.ErrorType
}

func (p *ProviderConnectionError) GetErrorDetails() string {
	if p == nil {
		return ""
	}
	return p.ErrorDetails
}

func (p *ProviderConnectionError) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProviderConnectionError) UnmarshalJSON(data []byte) error {
	type unmarshaler ProviderConnectionError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProviderConnectionError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProviderConnectionError) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// ℹ️ This enum is non-exhaustive.
type ProviderConnectionErrorErrorType string

const (
	ProviderConnectionErrorErrorTypeTokenRefreshFailed        ProviderConnectionErrorErrorType = "token_refresh_failed"
	ProviderConnectionErrorErrorTypeWebhookRegistrationFailed ProviderConnectionErrorErrorType = "webhook_registration_failed"
	ProviderConnectionErrorErrorTypeUserNotFound              ProviderConnectionErrorErrorType = "user_not_found"
	ProviderConnectionErrorErrorTypeDeregisteredPerProvider   ProviderConnectionErrorErrorType = "deregistered_per_provider"
	ProviderConnectionErrorErrorTypeRequiredScopesNotGranted  ProviderConnectionErrorErrorType = "required_scopes_not_granted"
	ProviderConnectionErrorErrorTypeProviderCredentialError   ProviderConnectionErrorErrorType = "provider_credential_error"
	ProviderConnectionErrorErrorTypeProviderPasswordExpired   ProviderConnectionErrorErrorType = "provider_password_expired"
	ProviderConnectionErrorErrorTypeUnknown                   ProviderConnectionErrorErrorType = "unknown"
)

func NewProviderConnectionErrorErrorTypeFromString(s string) (ProviderConnectionErrorErrorType, error) {
	switch s {
	case "token_refresh_failed":
		return ProviderConnectionErrorErrorTypeTokenRefreshFailed, nil
	case "webhook_registration_failed":
		return ProviderConnectionErrorErrorTypeWebhookRegistrationFailed, nil
	case "user_not_found":
		return ProviderConnectionErrorErrorTypeUserNotFound, nil
	case "deregistered_per_provider":
		return ProviderConnectionErrorErrorTypeDeregisteredPerProvider, nil
	case "required_scopes_not_granted":
		return ProviderConnectionErrorErrorTypeRequiredScopesNotGranted, nil
	case "provider_credential_error":
		return ProviderConnectionErrorErrorTypeProviderCredentialError, nil
	case "provider_password_expired":
		return ProviderConnectionErrorErrorTypeProviderPasswordExpired, nil
	case "unknown":
		return ProviderConnectionErrorErrorTypeUnknown, nil
	}
	var t ProviderConnectionErrorErrorType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProviderConnectionErrorErrorType) Ptr() *ProviderConnectionErrorErrorType {
	return &p
}

// ℹ️ This enum is non-exhaustive.
type Providers string

const (
	ProvidersOura              Providers = "oura"
	ProvidersFitbit            Providers = "fitbit"
	ProvidersGarmin            Providers = "garmin"
	ProvidersWhoop             Providers = "whoop"
	ProvidersStrava            Providers = "strava"
	ProvidersRenpho            Providers = "renpho"
	ProvidersPeloton           Providers = "peloton"
	ProvidersWahoo             Providers = "wahoo"
	ProvidersZwift             Providers = "zwift"
	ProvidersFreestyleLibre    Providers = "freestyle_libre"
	ProvidersAbbottLibreview   Providers = "abbott_libreview"
	ProvidersFreestyleLibreBle Providers = "freestyle_libre_ble"
	ProvidersEightSleep        Providers = "eight_sleep"
	ProvidersWithings          Providers = "withings"
	ProvidersAppleHealthKit    Providers = "apple_health_kit"
	ProvidersManual            Providers = "manual"
	ProvidersIhealth           Providers = "ihealth"
	ProvidersGoogleFit         Providers = "google_fit"
	ProvidersBeurerApi         Providers = "beurer_api"
	ProvidersBeurerBle         Providers = "beurer_ble"
	ProvidersOmron             Providers = "omron"
	ProvidersOmronBle          Providers = "omron_ble"
	ProvidersOnetouchBle       Providers = "onetouch_ble"
	ProvidersAccuchekBle       Providers = "accuchek_ble"
	ProvidersContourBle        Providers = "contour_ble"
	ProvidersDexcom            Providers = "dexcom"
	ProvidersDexcomV3          Providers = "dexcom_v3"
	ProvidersHammerhead        Providers = "hammerhead"
	ProvidersMyFitnessPal      Providers = "my_fitness_pal"
	ProvidersHealthConnect     Providers = "health_connect"
	ProvidersPolar             Providers = "polar"
	ProvidersCronometer        Providers = "cronometer"
	ProvidersKardia            Providers = "kardia"
	ProvidersWhoopV2           Providers = "whoop_v2"
	ProvidersUltrahuman        Providers = "ultrahuman"
	ProvidersMyFitnessPalV2    Providers = "my_fitness_pal_v2"
	ProvidersMapMyFitness      Providers = "map_my_fitness"
)

func NewProvidersFromString(s string) (Providers, error) {
	switch s {
	case "oura":
		return ProvidersOura, nil
	case "fitbit":
		return ProvidersFitbit, nil
	case "garmin":
		return ProvidersGarmin, nil
	case "whoop":
		return ProvidersWhoop, nil
	case "strava":
		return ProvidersStrava, nil
	case "renpho":
		return ProvidersRenpho, nil
	case "peloton":
		return ProvidersPeloton, nil
	case "wahoo":
		return ProvidersWahoo, nil
	case "zwift":
		return ProvidersZwift, nil
	case "freestyle_libre":
		return ProvidersFreestyleLibre, nil
	case "abbott_libreview":
		return ProvidersAbbottLibreview, nil
	case "freestyle_libre_ble":
		return ProvidersFreestyleLibreBle, nil
	case "eight_sleep":
		return ProvidersEightSleep, nil
	case "withings":
		return ProvidersWithings, nil
	case "apple_health_kit":
		return ProvidersAppleHealthKit, nil
	case "manual":
		return ProvidersManual, nil
	case "ihealth":
		return ProvidersIhealth, nil
	case "google_fit":
		return ProvidersGoogleFit, nil
	case "beurer_api":
		return ProvidersBeurerApi, nil
	case "beurer_ble":
		return ProvidersBeurerBle, nil
	case "omron":
		return ProvidersOmron, nil
	case "omron_ble":
		return ProvidersOmronBle, nil
	case "onetouch_ble":
		return ProvidersOnetouchBle, nil
	case "accuchek_ble":
		return ProvidersAccuchekBle, nil
	case "contour_ble":
		return ProvidersContourBle, nil
	case "dexcom":
		return ProvidersDexcom, nil
	case "dexcom_v3":
		return ProvidersDexcomV3, nil
	case "hammerhead":
		return ProvidersHammerhead, nil
	case "my_fitness_pal":
		return ProvidersMyFitnessPal, nil
	case "health_connect":
		return ProvidersHealthConnect, nil
	case "polar":
		return ProvidersPolar, nil
	case "cronometer":
		return ProvidersCronometer, nil
	case "kardia":
		return ProvidersKardia, nil
	case "whoop_v2":
		return ProvidersWhoopV2, nil
	case "ultrahuman":
		return ProvidersUltrahuman, nil
	case "my_fitness_pal_v2":
		return ProvidersMyFitnessPalV2, nil
	case "map_my_fitness":
		return ProvidersMapMyFitness, nil
	}
	var t Providers
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p Providers) Ptr() *Providers {
	return &p
}

type Question struct {
	Id         int64        `json:"id" url:"id"`
	Required   bool         `json:"required" url:"required"`
	Code       string       `json:"code" url:"code"`
	Value      string       `json:"value" url:"value"`
	Type       QuestionType `json:"type" url:"type"`
	Sequence   int          `json:"sequence" url:"sequence"`
	Answers    []*Answer    `json:"answers" url:"answers"`
	Constraint *string      `json:"constraint,omitempty" url:"constraint,omitempty"`
	Default    *string      `json:"default,omitempty" url:"default,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *Question) GetId() int64 {
	if q == nil {
		return 0
	}
	return q.Id
}

func (q *Question) GetRequired() bool {
	if q == nil {
		return false
	}
	return q.Required
}

func (q *Question) GetCode() string {
	if q == nil {
		return ""
	}
	return q.Code
}

func (q *Question) GetValue() string {
	if q == nil {
		return ""
	}
	return q.Value
}

func (q *Question) GetType() QuestionType {
	if q == nil {
		return ""
	}
	return q.Type
}

func (q *Question) GetSequence() int {
	if q == nil {
		return 0
	}
	return q.Sequence
}

func (q *Question) GetAnswers() []*Answer {
	if q == nil {
		return nil
	}
	return q.Answers
}

func (q *Question) GetConstraint() *string {
	if q == nil {
		return nil
	}
	return q.Constraint
}

func (q *Question) GetDefault() *string {
	if q == nil {
		return nil
	}
	return q.Default
}

func (q *Question) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *Question) UnmarshalJSON(data []byte) error {
	type unmarshaler Question
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = Question(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *Question) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// ℹ️ This enum is non-exhaustive.
type QuestionType string

const (
	QuestionTypeChoice      QuestionType = "choice"
	QuestionTypeText        QuestionType = "text"
	QuestionTypeNumeric     QuestionType = "numeric"
	QuestionTypeMultiChoice QuestionType = "multi_choice"
)

func NewQuestionTypeFromString(s string) (QuestionType, error) {
	switch s {
	case "choice":
		return QuestionTypeChoice, nil
	case "text":
		return QuestionTypeText, nil
	case "numeric":
		return QuestionTypeNumeric, nil
	case "multi_choice":
		return QuestionTypeMultiChoice, nil
	}
	var t QuestionType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (q QuestionType) Ptr() *QuestionType {
	return &q
}

// ℹ️ This enum is non-exhaustive.
type Race string

const (
	RaceAfricanAmericanOrBlack               Race = "african_american_or_black"
	RaceAsian                                Race = "asian"
	RaceIndigenousNativeAmericanAlaskaNative Race = "indigenous_native_american_alaska_native"
	RaceOther                                Race = "other"
	RacePacificIslanderOrHawaiian            Race = "pacific_islander_or_hawaiian"
	RaceWhiteCaucasian                       Race = "white_caucasian"
)

func NewRaceFromString(s string) (Race, error) {
	switch s {
	case "african_american_or_black":
		return RaceAfricanAmericanOrBlack, nil
	case "asian":
		return RaceAsian, nil
	case "indigenous_native_american_alaska_native":
		return RaceIndigenousNativeAmericanAlaskaNative, nil
	case "other":
		return RaceOther, nil
	case "pacific_islander_or_hawaiian":
		return RacePacificIslanderOrHawaiian, nil
	case "white_caucasian":
		return RaceWhiteCaucasian, nil
	}
	var t Race
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Race) Ptr() *Race {
	return &r
}

// ℹ️ This enum is non-exhaustive.
type ResponsibleRelationship string

const (
	ResponsibleRelationshipSelf   ResponsibleRelationship = "Self"
	ResponsibleRelationshipSpouse ResponsibleRelationship = "Spouse"
	ResponsibleRelationshipOther  ResponsibleRelationship = "Other"
)

func NewResponsibleRelationshipFromString(s string) (ResponsibleRelationship, error) {
	switch s {
	case "Self":
		return ResponsibleRelationshipSelf, nil
	case "Spouse":
		return ResponsibleRelationshipSpouse, nil
	case "Other":
		return ResponsibleRelationshipOther, nil
	}
	var t ResponsibleRelationship
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResponsibleRelationship) Ptr() *ResponsibleRelationship {
	return &r
}

// ℹ️ This enum is non-exhaustive.
type SexualOrientation string

const (
	SexualOrientationLesbianGayOrHomosexual SexualOrientation = "lesbian_gay_or_homosexual"
	SexualOrientationHeterosexualOrStraight SexualOrientation = "heterosexual_or_straight"
	SexualOrientationBisexual               SexualOrientation = "bisexual"
	SexualOrientationDontKnow               SexualOrientation = "dont_know"
	SexualOrientationOther                  SexualOrientation = "other"
)

func NewSexualOrientationFromString(s string) (SexualOrientation, error) {
	switch s {
	case "lesbian_gay_or_homosexual":
		return SexualOrientationLesbianGayOrHomosexual, nil
	case "heterosexual_or_straight":
		return SexualOrientationHeterosexualOrStraight, nil
	case "bisexual":
		return SexualOrientationBisexual, nil
	case "dont_know":
		return SexualOrientationDontKnow, nil
	case "other":
		return SexualOrientationOther, nil
	}
	var t SexualOrientation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SexualOrientation) Ptr() *SexualOrientation {
	return &s
}

type ShippingAddress struct {
	ReceiverName string  `json:"receiver_name" url:"receiver_name"`
	FirstLine    string  `json:"first_line" url:"first_line"`
	SecondLine   *string `json:"second_line,omitempty" url:"second_line,omitempty"`
	City         string  `json:"city" url:"city"`
	State        string  `json:"state" url:"state"`
	Zip          string  `json:"zip" url:"zip"`
	Country      string  `json:"country" url:"country"`
	PhoneNumber  string  `json:"phone_number" url:"phone_number"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShippingAddress) GetReceiverName() string {
	if s == nil {
		return ""
	}
	return s.ReceiverName
}

func (s *ShippingAddress) GetFirstLine() string {
	if s == nil {
		return ""
	}
	return s.FirstLine
}

func (s *ShippingAddress) GetSecondLine() *string {
	if s == nil {
		return nil
	}
	return s.SecondLine
}

func (s *ShippingAddress) GetCity() string {
	if s == nil {
		return ""
	}
	return s.City
}

func (s *ShippingAddress) GetState() string {
	if s == nil {
		return ""
	}
	return s.State
}

func (s *ShippingAddress) GetZip() string {
	if s == nil {
		return ""
	}
	return s.Zip
}

func (s *ShippingAddress) GetCountry() string {
	if s == nil {
		return ""
	}
	return s.Country
}

func (s *ShippingAddress) GetPhoneNumber() string {
	if s == nil {
		return ""
	}
	return s.PhoneNumber
}

func (s *ShippingAddress) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShippingAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler ShippingAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShippingAddress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShippingAddress) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// ℹ️ This enum is non-exhaustive.
type SourceAuthType string

const (
	SourceAuthTypeOauth     SourceAuthType = "oauth"
	SourceAuthTypeTeamOauth SourceAuthType = "team_oauth"
	SourceAuthTypeSdk       SourceAuthType = "sdk"
	SourceAuthTypePassword  SourceAuthType = "password"
	SourceAuthTypeEmail     SourceAuthType = "email"
	SourceAuthTypeApp       SourceAuthType = "app"
	SourceAuthTypeEmpty     SourceAuthType = ""
)

func NewSourceAuthTypeFromString(s string) (SourceAuthType, error) {
	switch s {
	case "oauth":
		return SourceAuthTypeOauth, nil
	case "team_oauth":
		return SourceAuthTypeTeamOauth, nil
	case "sdk":
		return SourceAuthTypeSdk, nil
	case "password":
		return SourceAuthTypePassword, nil
	case "email":
		return SourceAuthTypeEmail, nil
	case "app":
		return SourceAuthTypeApp, nil
	case "":
		return SourceAuthTypeEmpty, nil
	}
	var t SourceAuthType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceAuthType) Ptr() *SourceAuthType {
	return &s
}

// ℹ️ This enum is non-exhaustive.
type TimeseriesResource string

const (
	TimeseriesResourceCaloriesActive             TimeseriesResource = "calories_active"
	TimeseriesResourceCaloriesBasal              TimeseriesResource = "calories_basal"
	TimeseriesResourceDistance                   TimeseriesResource = "distance"
	TimeseriesResourceBloodOxygen                TimeseriesResource = "blood_oxygen"
	TimeseriesResourceBloodPressure              TimeseriesResource = "blood_pressure"
	TimeseriesResourceBodyFat                    TimeseriesResource = "body_fat"
	TimeseriesResourceBodyWeight                 TimeseriesResource = "body_weight"
	TimeseriesResourceBodyTemperature            TimeseriesResource = "body_temperature"
	TimeseriesResourceBodyTemperatureDelta       TimeseriesResource = "body_temperature_delta"
	TimeseriesResourceCholesterol                TimeseriesResource = "cholesterol"
	TimeseriesResourceCholesterolLdl             TimeseriesResource = "cholesterol/ldl"
	TimeseriesResourceCholesterolHdl             TimeseriesResource = "cholesterol/hdl"
	TimeseriesResourceCholesterolTotal           TimeseriesResource = "cholesterol/total"
	TimeseriesResourceCholesterolTriglycerides   TimeseriesResource = "cholesterol/triglycerides"
	TimeseriesResourceElectrocardiogramVoltage   TimeseriesResource = "electrocardiogram_voltage"
	TimeseriesResourceFloorsClimbed              TimeseriesResource = "floors_climbed"
	TimeseriesResourceGlucose                    TimeseriesResource = "glucose"
	TimeseriesResourceHeartrate                  TimeseriesResource = "heartrate"
	TimeseriesResourceHrv                        TimeseriesResource = "hrv"
	TimeseriesResourceHypnogram                  TimeseriesResource = "hypnogram"
	TimeseriesResourceIge                        TimeseriesResource = "ige"
	TimeseriesResourceIgg                        TimeseriesResource = "igg"
	TimeseriesResourceRespiratoryRate            TimeseriesResource = "respiratory_rate"
	TimeseriesResourceSteps                      TimeseriesResource = "steps"
	TimeseriesResourceStressLevel                TimeseriesResource = "stress_level"
	TimeseriesResourceVo2Max                     TimeseriesResource = "vo2_max"
	TimeseriesResourceWater                      TimeseriesResource = "water"
	TimeseriesResourceCaffeine                   TimeseriesResource = "caffeine"
	TimeseriesResourceMindfulnessMinutes         TimeseriesResource = "mindfulness_minutes"
	TimeseriesResourceAfibBurden                 TimeseriesResource = "afib_burden"
	TimeseriesResourceHeartRateAlert             TimeseriesResource = "heart_rate_alert"
	TimeseriesResourceStandHour                  TimeseriesResource = "stand_hour"
	TimeseriesResourceStandDuration              TimeseriesResource = "stand_duration"
	TimeseriesResourceSleepApneaAlert            TimeseriesResource = "sleep_apnea_alert"
	TimeseriesResourceSleepBreathingDisturbance  TimeseriesResource = "sleep_breathing_disturbance"
	TimeseriesResourceWheelchairPush             TimeseriesResource = "wheelchair_push"
	TimeseriesResourceForcedExpiratoryVolume1    TimeseriesResource = "forced_expiratory_volume_1"
	TimeseriesResourceForcedVitalCapacity        TimeseriesResource = "forced_vital_capacity"
	TimeseriesResourcePeakExpiratoryFlowRate     TimeseriesResource = "peak_expiratory_flow_rate"
	TimeseriesResourceInhalerUsage               TimeseriesResource = "inhaler_usage"
	TimeseriesResourceFall                       TimeseriesResource = "fall"
	TimeseriesResourceUvExposure                 TimeseriesResource = "uv_exposure"
	TimeseriesResourceDaylightExposure           TimeseriesResource = "daylight_exposure"
	TimeseriesResourceHandwashing                TimeseriesResource = "handwashing"
	TimeseriesResourceBasalBodyTemperature       TimeseriesResource = "basal_body_temperature"
	TimeseriesResourceBodyMassIndex              TimeseriesResource = "body_mass_index"
	TimeseriesResourceLeanBodyMass               TimeseriesResource = "lean_body_mass"
	TimeseriesResourceWaistCircumference         TimeseriesResource = "waist_circumference"
	TimeseriesResourceHeartRateRecoveryOneMinute TimeseriesResource = "heart_rate_recovery_one_minute"
	TimeseriesResourceWorkoutDistance            TimeseriesResource = "workout_distance"
	TimeseriesResourceWorkoutSwimmingStroke      TimeseriesResource = "workout_swimming_stroke"
	TimeseriesResourceWorkoutDuration            TimeseriesResource = "workout_duration"
	TimeseriesResourceInsulinInjection           TimeseriesResource = "insulin_injection"
	TimeseriesResourceCarbohydrates              TimeseriesResource = "carbohydrates"
	TimeseriesResourceNote                       TimeseriesResource = "note"
)

func NewTimeseriesResourceFromString(s string) (TimeseriesResource, error) {
	switch s {
	case "calories_active":
		return TimeseriesResourceCaloriesActive, nil
	case "calories_basal":
		return TimeseriesResourceCaloriesBasal, nil
	case "distance":
		return TimeseriesResourceDistance, nil
	case "blood_oxygen":
		return TimeseriesResourceBloodOxygen, nil
	case "blood_pressure":
		return TimeseriesResourceBloodPressure, nil
	case "body_fat":
		return TimeseriesResourceBodyFat, nil
	case "body_weight":
		return TimeseriesResourceBodyWeight, nil
	case "body_temperature":
		return TimeseriesResourceBodyTemperature, nil
	case "body_temperature_delta":
		return TimeseriesResourceBodyTemperatureDelta, nil
	case "cholesterol":
		return TimeseriesResourceCholesterol, nil
	case "cholesterol/ldl":
		return TimeseriesResourceCholesterolLdl, nil
	case "cholesterol/hdl":
		return TimeseriesResourceCholesterolHdl, nil
	case "cholesterol/total":
		return TimeseriesResourceCholesterolTotal, nil
	case "cholesterol/triglycerides":
		return TimeseriesResourceCholesterolTriglycerides, nil
	case "electrocardiogram_voltage":
		return TimeseriesResourceElectrocardiogramVoltage, nil
	case "floors_climbed":
		return TimeseriesResourceFloorsClimbed, nil
	case "glucose":
		return TimeseriesResourceGlucose, nil
	case "heartrate":
		return TimeseriesResourceHeartrate, nil
	case "hrv":
		return TimeseriesResourceHrv, nil
	case "hypnogram":
		return TimeseriesResourceHypnogram, nil
	case "ige":
		return TimeseriesResourceIge, nil
	case "igg":
		return TimeseriesResourceIgg, nil
	case "respiratory_rate":
		return TimeseriesResourceRespiratoryRate, nil
	case "steps":
		return TimeseriesResourceSteps, nil
	case "stress_level":
		return TimeseriesResourceStressLevel, nil
	case "vo2_max":
		return TimeseriesResourceVo2Max, nil
	case "water":
		return TimeseriesResourceWater, nil
	case "caffeine":
		return TimeseriesResourceCaffeine, nil
	case "mindfulness_minutes":
		return TimeseriesResourceMindfulnessMinutes, nil
	case "afib_burden":
		return TimeseriesResourceAfibBurden, nil
	case "heart_rate_alert":
		return TimeseriesResourceHeartRateAlert, nil
	case "stand_hour":
		return TimeseriesResourceStandHour, nil
	case "stand_duration":
		return TimeseriesResourceStandDuration, nil
	case "sleep_apnea_alert":
		return TimeseriesResourceSleepApneaAlert, nil
	case "sleep_breathing_disturbance":
		return TimeseriesResourceSleepBreathingDisturbance, nil
	case "wheelchair_push":
		return TimeseriesResourceWheelchairPush, nil
	case "forced_expiratory_volume_1":
		return TimeseriesResourceForcedExpiratoryVolume1, nil
	case "forced_vital_capacity":
		return TimeseriesResourceForcedVitalCapacity, nil
	case "peak_expiratory_flow_rate":
		return TimeseriesResourcePeakExpiratoryFlowRate, nil
	case "inhaler_usage":
		return TimeseriesResourceInhalerUsage, nil
	case "fall":
		return TimeseriesResourceFall, nil
	case "uv_exposure":
		return TimeseriesResourceUvExposure, nil
	case "daylight_exposure":
		return TimeseriesResourceDaylightExposure, nil
	case "handwashing":
		return TimeseriesResourceHandwashing, nil
	case "basal_body_temperature":
		return TimeseriesResourceBasalBodyTemperature, nil
	case "body_mass_index":
		return TimeseriesResourceBodyMassIndex, nil
	case "lean_body_mass":
		return TimeseriesResourceLeanBodyMass, nil
	case "waist_circumference":
		return TimeseriesResourceWaistCircumference, nil
	case "heart_rate_recovery_one_minute":
		return TimeseriesResourceHeartRateRecoveryOneMinute, nil
	case "workout_distance":
		return TimeseriesResourceWorkoutDistance, nil
	case "workout_swimming_stroke":
		return TimeseriesResourceWorkoutSwimmingStroke, nil
	case "workout_duration":
		return TimeseriesResourceWorkoutDuration, nil
	case "insulin_injection":
		return TimeseriesResourceInsulinInjection, nil
	case "carbohydrates":
		return TimeseriesResourceCarbohydrates, nil
	case "note":
		return TimeseriesResourceNote, nil
	}
	var t TimeseriesResource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TimeseriesResource) Ptr() *TimeseriesResource {
	return &t
}

// ℹ️ This enum is non-exhaustive.
type TraceElements string

const (
	TraceElementsChromium   TraceElements = "chromium"
	TraceElementsCopper     TraceElements = "copper"
	TraceElementsIodine     TraceElements = "iodine"
	TraceElementsManganese  TraceElements = "manganese"
	TraceElementsMolybdenum TraceElements = "molybdenum"
	TraceElementsSelenium   TraceElements = "selenium"
)

func NewTraceElementsFromString(s string) (TraceElements, error) {
	switch s {
	case "chromium":
		return TraceElementsChromium, nil
	case "copper":
		return TraceElementsCopper, nil
	case "iodine":
		return TraceElementsIodine, nil
	case "manganese":
		return TraceElementsManganese, nil
	case "molybdenum":
		return TraceElementsMolybdenum, nil
	case "selenium":
		return TraceElementsSelenium, nil
	}
	var t TraceElements
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TraceElements) Ptr() *TraceElements {
	return &t
}

type UserRefreshErrorResponse struct {
	// Whether operation was successful or not
	Success bool `json:"success" url:"success"`
	// A unique ID representing the end user. Typically this will be a user ID from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
	UserId        string   `json:"user_id" url:"user_id"`
	Error         string   `json:"error" url:"error"`
	FailedSources []string `json:"failed_sources,omitempty" url:"failed_sources,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserRefreshErrorResponse) GetSuccess() bool {
	if u == nil {
		return false
	}
	return u.Success
}

func (u *UserRefreshErrorResponse) GetUserId() string {
	if u == nil {
		return ""
	}
	return u.UserId
}

func (u *UserRefreshErrorResponse) GetError() string {
	if u == nil {
		return ""
	}
	return u.Error
}

func (u *UserRefreshErrorResponse) GetFailedSources() []string {
	if u == nil {
		return nil
	}
	return u.FailedSources
}

func (u *UserRefreshErrorResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserRefreshErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserRefreshErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserRefreshErrorResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserRefreshErrorResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ValidationError struct {
	Loc  []*ValidationErrorLocItem `json:"loc" url:"loc"`
	Msg  string                    `json:"msg" url:"msg"`
	Type string                    `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidationError) GetLoc() []*ValidationErrorLocItem {
	if v == nil {
		return nil
	}
	return v.Loc
}

func (v *ValidationError) GetMsg() string {
	if v == nil {
		return ""
	}
	return v.Msg
}

func (v *ValidationError) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *ValidationError) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidationError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationError) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidationErrorLocItem struct {
	String  string
	Integer int

	typ string
}

func (v *ValidationErrorLocItem) GetString() string {
	if v == nil {
		return ""
	}
	return v.String
}

func (v *ValidationErrorLocItem) GetInteger() int {
	if v == nil {
		return 0
	}
	return v.Integer
}

func (v *ValidationErrorLocItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typ = "String"
		v.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		v.typ = "Integer"
		v.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v ValidationErrorLocItem) MarshalJSON() ([]byte, error) {
	if v.typ == "String" || v.String != "" {
		return json.Marshal(v.String)
	}
	if v.typ == "Integer" || v.Integer != 0 {
		return json.Marshal(v.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type ValidationErrorLocItemVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (v *ValidationErrorLocItem) Accept(visitor ValidationErrorLocItemVisitor) error {
	if v.typ == "String" || v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.typ == "Integer" || v.Integer != 0 {
		return visitor.VisitInteger(v.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails struct {
	FirstName   string   `json:"first_name" url:"first_name"`
	LastName    string   `json:"last_name" url:"last_name"`
	Address     *Address `json:"address" url:"address"`
	PhoneNumber string   `json:"phone_number" url:"phone_number"`
	PhoneType   *string  `json:"phone_type,omitempty" url:"phone_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails) GetFirstName() string {
	if v == nil {
		return ""
	}
	return v.FirstName
}

func (v *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails) GetLastName() string {
	if v == nil {
		return ""
	}
	return v.LastName
}

func (v *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails) GetAddress() *Address {
	if v == nil {
		return nil
	}
	return v.Address
}

func (v *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails) GetPhoneNumber() string {
	if v == nil {
		return ""
	}
	return v.PhoneNumber
}

func (v *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails) GetPhoneType() *string {
	if v == nil {
		return nil
	}
	return v.PhoneType
}

func (v *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VitalCoreSchemasDbSchemasLabTestHealthInsurancePersonDetails) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// ℹ️ This enum is non-exhaustive.
type Vitamins string

const (
	VitaminsVitaminA        Vitamins = "vitamin_a"
	VitaminsVitaminB1       Vitamins = "vitamin_b1"
	VitaminsRiboflavin      Vitamins = "riboflavin"
	VitaminsNiacin          Vitamins = "niacin"
	VitaminsPantothenicAcid Vitamins = "pantothenic_acid"
	VitaminsVitaminB6       Vitamins = "vitamin_b6"
	VitaminsBiotin          Vitamins = "biotin"
	VitaminsVitaminB12      Vitamins = "vitamin_b12"
	VitaminsVitaminC        Vitamins = "vitamin_c"
	VitaminsVitaminD        Vitamins = "vitamin_d"
	VitaminsVitaminE        Vitamins = "vitamin_e"
	VitaminsVitaminK        Vitamins = "vitamin_k"
	VitaminsFolicAcid       Vitamins = "folic_acid"
)

func NewVitaminsFromString(s string) (Vitamins, error) {
	switch s {
	case "vitamin_a":
		return VitaminsVitaminA, nil
	case "vitamin_b1":
		return VitaminsVitaminB1, nil
	case "riboflavin":
		return VitaminsRiboflavin, nil
	case "niacin":
		return VitaminsNiacin, nil
	case "pantothenic_acid":
		return VitaminsPantothenicAcid, nil
	case "vitamin_b6":
		return VitaminsVitaminB6, nil
	case "biotin":
		return VitaminsBiotin, nil
	case "vitamin_b12":
		return VitaminsVitaminB12, nil
	case "vitamin_c":
		return VitaminsVitaminC, nil
	case "vitamin_d":
		return VitaminsVitaminD, nil
	case "vitamin_e":
		return VitaminsVitaminE, nil
	case "vitamin_k":
		return VitaminsVitaminK, nil
	case "folic_acid":
		return VitaminsFolicAcid, nil
	}
	var t Vitamins
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v Vitamins) Ptr() *Vitamins {
	return &v
}
