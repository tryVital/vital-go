// Code generated by Fern. DO NOT EDIT.

package labtests

import (
	context "context"
	vital "github.com/tryVital/vital-go"
	core "github.com/tryVital/vital-go/core"
	internal "github.com/tryVital/vital-go/internal"
	option "github.com/tryVital/vital-go/option"
	io "io"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// GET all the lab tests the team has access to.
func (c *Client) Get(
	ctx context.Context,
	request *vital.LabTestsGetRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingLabTest, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Create(
	ctx context.Context,
	request *vital.CreateLabTestRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingLabTest, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET all the lab tests the team has access to.
func (c *Client) GetById(
	ctx context.Context,
	labTestId string,
	opts ...option.RequestOption,
) (*vital.ClientFacingLabTest, error) {
	response, err := c.WithRawResponse.GetById(
		ctx,
		labTestId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) UpdateLabTest(
	ctx context.Context,
	labTestId string,
	request *vital.UpdateLabTestRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingLabTest, error) {
	response, err := c.WithRawResponse.UpdateLabTest(
		ctx,
		labTestId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET all the markers for the given lab.
func (c *Client) GetMarkers(
	ctx context.Context,
	request *vital.LabTestsGetMarkersRequest,
	opts ...option.RequestOption,
) (*vital.GetMarkersResponse, error) {
	response, err := c.WithRawResponse.GetMarkers(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetMarkersForOrderSet(
	ctx context.Context,
	request *vital.LabTestsGetMarkersForOrderSetRequest,
	opts ...option.RequestOption,
) (*vital.GetMarkersResponse, error) {
	response, err := c.WithRawResponse.GetMarkersForOrderSet(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetMarkersForLabTest(
	ctx context.Context,
	labTestId string,
	request *vital.LabTestsGetMarkersForLabTestRequest,
	opts ...option.RequestOption,
) (*vital.GetMarkersResponse, error) {
	response, err := c.WithRawResponse.GetMarkersForLabTest(
		ctx,
		labTestId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET a specific marker for the given lab and provider_id
func (c *Client) GetMarkersByLabAndProviderId(
	ctx context.Context,
	providerId string,
	labId int,
	opts ...option.RequestOption,
) (*vital.ClientFacingMarker, error) {
	response, err := c.WithRawResponse.GetMarkersByLabAndProviderId(
		ctx,
		providerId,
		labId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET all the labs.
func (c *Client) GetLabs(
	ctx context.Context,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingLab, error) {
	response, err := c.WithRawResponse.GetLabs(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET lab tests the team has access to as a paginated list.
func (c *Client) GetPaginated(
	ctx context.Context,
	request *vital.LabTestsGetPaginatedRequest,
	opts ...option.RequestOption,
) (*vital.LabTestResourcesResponse, error) {
	response, err := c.WithRawResponse.GetPaginated(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET collection instructions for a lab test
func (c *Client) GetLabTestCollectionInstructionPdf(
	ctx context.Context,
	labTestId string,
	opts ...option.RequestOption,
) (io.Reader, error) {
	response, err := c.WithRawResponse.GetLabTestCollectionInstructionPdf(
		ctx,
		labTestId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Return the available time slots to book an appointment with a phlebotomist
// for the given address and order.
func (c *Client) GetPhlebotomyAppointmentAvailability(
	ctx context.Context,
	request *vital.LabTestsGetPhlebotomyAppointmentAvailabilityRequest,
	opts ...option.RequestOption,
) (*vital.AppointmentAvailabilitySlots, error) {
	response, err := c.WithRawResponse.GetPhlebotomyAppointmentAvailability(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Book an at-home phlebotomy appointment.
func (c *Client) BookPhlebotomyAppointment(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	request *vital.AppointmentBookingRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingAppointment, error) {
	response, err := c.WithRawResponse.BookPhlebotomyAppointment(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Request an at-home phlebotomy appointment.
func (c *Client) RequestPhlebotomyAppointment(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	request *vital.RequestAppointmentRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingAppointment, error) {
	response, err := c.WithRawResponse.RequestPhlebotomyAppointment(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Reschedule a previously booked at-home phlebotomy appointment.
func (c *Client) ReschedulePhlebotomyAppointment(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	request *vital.AppointmentRescheduleRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingAppointment, error) {
	response, err := c.WithRawResponse.ReschedulePhlebotomyAppointment(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Cancel a previously booked at-home phlebotomy appointment.
func (c *Client) CancelPhlebotomyAppointment(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	request *vital.ApiApiV1EndpointsVitalApiLabTestingOrdersHelpersAppointmentCancelRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingAppointment, error) {
	response, err := c.WithRawResponse.CancelPhlebotomyAppointment(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get the list of reasons for cancelling an at-home phlebotomy appointment.
func (c *Client) GetPhlebotomyAppointmentCancellationReason(
	ctx context.Context,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingAppointmentCancellationReason, error) {
	response, err := c.WithRawResponse.GetPhlebotomyAppointmentCancellationReason(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get the appointment associated with an order.
func (c *Client) GetPhlebotomyAppointment(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	opts ...option.RequestOption,
) (*vital.ClientFacingAppointment, error) {
	response, err := c.WithRawResponse.GetPhlebotomyAppointment(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET information about an area with respect to lab-testing.
//
// Information returned:
// * Whether a given zip code is served by our Phlebotomy network.
// * List of Lab locations in the area.
func (c *Client) GetAreaInfo(
	ctx context.Context,
	request *vital.LabTestsGetAreaInfoRequest,
	opts ...option.RequestOption,
) (*vital.AreaInfo, error) {
	response, err := c.WithRawResponse.GetAreaInfo(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetPscInfo(
	ctx context.Context,
	request *vital.LabTestsGetPscInfoRequest,
	opts ...option.RequestOption,
) (*vital.PscInfo, error) {
	response, err := c.WithRawResponse.GetPscInfo(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetOrderPscInfo(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	request *vital.LabTestsGetOrderPscInfoRequest,
	opts ...option.RequestOption,
) (*vital.PscInfo, error) {
	response, err := c.WithRawResponse.GetOrderPscInfo(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// This endpoint returns the lab results for the order.
func (c *Client) GetResultPdf(
	ctx context.Context,
	orderId string,
	opts ...option.RequestOption,
) (io.Reader, error) {
	response, err := c.WithRawResponse.GetResultPdf(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Return metadata related to order results, such as lab metadata,
// provider and sample dates.
func (c *Client) GetResultMetadata(
	ctx context.Context,
	orderId string,
	opts ...option.RequestOption,
) (*vital.LabResultsMetadata, error) {
	response, err := c.WithRawResponse.GetResultMetadata(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Return both metadata and raw json test data
func (c *Client) GetResultRaw(
	ctx context.Context,
	orderId string,
	opts ...option.RequestOption,
) (*vital.LabResultsRaw, error) {
	response, err := c.WithRawResponse.GetResultRaw(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// This endpoint returns the printed labels for the order.
func (c *Client) GetLabelsPdf(
	ctx context.Context,
	orderId string,
	request *vital.LabTestsGetLabelsPdfRequest,
	opts ...option.RequestOption,
) (io.Reader, error) {
	response, err := c.WithRawResponse.GetLabelsPdf(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetPscAppointmentAvailability(
	ctx context.Context,
	request *vital.LabTestsGetPscAppointmentAvailabilityRequest,
	opts ...option.RequestOption,
) (*vital.AppointmentAvailabilitySlots, error) {
	response, err := c.WithRawResponse.GetPscAppointmentAvailability(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BookPscAppointment(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	request *vital.AppointmentBookingRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingAppointment, error) {
	response, err := c.WithRawResponse.BookPscAppointment(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ReschedulePscAppointment(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	request *vital.AppointmentRescheduleRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingAppointment, error) {
	response, err := c.WithRawResponse.ReschedulePscAppointment(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CancelPscAppointment(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	request *vital.VitalCoreClientsLabTestGetlabsSchemaAppointmentCancelRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingAppointment, error) {
	response, err := c.WithRawResponse.CancelPscAppointment(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetPscAppointmentCancellationReason(
	ctx context.Context,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingAppointmentCancellationReason, error) {
	response, err := c.WithRawResponse.GetPscAppointmentCancellationReason(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get the appointment associated with an order.
func (c *Client) GetPscAppointment(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	opts ...option.RequestOption,
) (*vital.ClientFacingAppointment, error) {
	response, err := c.WithRawResponse.GetPscAppointment(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET collection instructions for an order
func (c *Client) GetOrderCollectionInstructionPdf(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	opts ...option.RequestOption,
) (io.Reader, error) {
	response, err := c.WithRawResponse.GetOrderCollectionInstructionPdf(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET requisition pdf for an order
func (c *Client) GetOrderRequistionPdf(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	opts ...option.RequestOption,
) (io.Reader, error) {
	response, err := c.WithRawResponse.GetOrderRequistionPdf(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET ABN pdf for an order
func (c *Client) GetOrderAbnPdf(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	opts ...option.RequestOption,
) (io.Reader, error) {
	response, err := c.WithRawResponse.GetOrderAbnPdf(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET individual order by ID.
func (c *Client) GetOrder(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	opts ...option.RequestOption,
) (*vital.ClientFacingOrder, error) {
	response, err := c.WithRawResponse.GetOrder(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CreateOrder(
	ctx context.Context,
	request *vital.CreateOrderRequestCompatible,
	opts ...option.RequestOption,
) (*vital.PostOrderResponse, error) {
	response, err := c.WithRawResponse.CreateOrder(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ImportOrder(
	ctx context.Context,
	request *vital.ImportOrderBody,
	opts ...option.RequestOption,
) (*vital.PostOrderResponse, error) {
	response, err := c.WithRawResponse.ImportOrder(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// POST cancel order
func (c *Client) CancelOrder(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	opts ...option.RequestOption,
) (*vital.PostOrderResponse, error) {
	response, err := c.WithRawResponse.CancelOrder(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get available test kits.
func (c *Client) SimulateOrderProcess(
	ctx context.Context,
	orderId string,
	request *vital.LabTestsSimulateOrderProcessRequest,
	opts ...option.RequestOption,
) (any, error) {
	response, err := c.WithRawResponse.SimulateOrderProcess(
		ctx,
		orderId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// PATCH update on site collection order when draw is completed
func (c *Client) UpdateOnSiteCollectionOrderDrawCompleted(
	ctx context.Context,
	// Your Order ID.
	orderId string,
	opts ...option.RequestOption,
) (*vital.PostOrderResponse, error) {
	response, err := c.WithRawResponse.UpdateOnSiteCollectionOrderDrawCompleted(
		ctx,
		orderId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET many orders with filters.
func (c *Client) GetOrders(
	ctx context.Context,
	request *vital.LabTestsGetOrdersRequest,
	opts ...option.RequestOption,
) (*vital.GetOrdersResponse, error) {
	response, err := c.WithRawResponse.GetOrders(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
