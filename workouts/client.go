// Code generated by Fern. DO NOT EDIT.

package workouts

import (
	context "context"
	vital "github.com/tryVital/vital-go"
	core "github.com/tryVital/vital-go/core"
	internal "github.com/tryVital/vital-go/internal"
	option "github.com/tryVital/vital-go/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Get workout summary for user_id
func (c *Client) Get(
	ctx context.Context,
	userId string,
	request *vital.WorkoutsGetRequest,
	opts ...option.RequestOption,
) (*vital.ClientWorkoutResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get raw workout summary for user_id
func (c *Client) GetRaw(
	ctx context.Context,
	userId string,
	request *vital.WorkoutsGetRawRequest,
	opts ...option.RequestOption,
) (*vital.RawWorkout, error) {
	response, err := c.WithRawResponse.GetRaw(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetByWorkoutId(
	ctx context.Context,
	// The Vital ID for the workout
	workoutId string,
	opts ...option.RequestOption,
) (*vital.ClientFacingStream, error) {
	response, err := c.WithRawResponse.GetByWorkoutId(
		ctx,
		workoutId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
