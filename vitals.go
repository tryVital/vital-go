// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tryVital/vital-go/internal"
	time "time"
)

type VitalsAfibBurdenGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBasalBodyTemperatureGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBloodOxygenRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBloodOxygenGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBloodPressureRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBloodPressureGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBodyFatRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBodyFatGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBodyMassIndexGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBodyTemperatureDeltaGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBodyTemperatureGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBodyWeightRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsBodyWeightGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCaffeineRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCaffeineGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCaloriesActiveRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCaloriesActiveGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCaloriesBasalRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCaloriesBasalGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCarbohydratesGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCholesterolRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCholesterolHdlRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCholesterolLdlRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCholesterolTotalRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCholesterolTriglyceridesRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsCholesterolGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsDaylightExposureGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsDistanceRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsDistanceGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsElectrocardiogramVoltageRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsElectrocardiogramVoltageGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsFallGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsFloorsClimbedRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsFloorsClimbedGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsForcedExpiratoryVolume1GroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsForcedVitalCapacityGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsGlucoseRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsGlucoseGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsHandwashingGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsHeartRateAlertGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsHeartRateRecoveryOneMinuteGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsHeartrateRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsHeartrateGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsHrvRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsHrvGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsHypnogramRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsHypnogramGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsIgeRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsIgeGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsIggRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsIggGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsInhalerUsageGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsInsulinInjectionGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsLeanBodyMassGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsMindfulnessMinutesRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsMindfulnessMinutesGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsNoteGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsPeakExpiratoryFlowRateGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsRespiratoryRateRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsRespiratoryRateGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsSleepApneaAlertGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsSleepBreathingDisturbanceGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsStandDurationGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsStandHourGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsStepsRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsStepsGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsStressLevelRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsStressLevelGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type ClientFacingAFibBurdenSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingAFibBurdenSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingAFibBurdenSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingAFibBurdenSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingAFibBurdenSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingAFibBurdenSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingAFibBurdenSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingAFibBurdenSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingAFibBurdenSample) Unit() string {
	return c.unit
}

func (c *ClientFacingAFibBurdenSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingAFibBurdenSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingAFibBurdenSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingAFibBurdenSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "%" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "%", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingAFibBurdenSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingAFibBurdenSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "%",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingAFibBurdenSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBasalBodyTemperatureSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBasalBodyTemperatureSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingBasalBodyTemperatureSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingBasalBodyTemperatureSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingBasalBodyTemperatureSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingBasalBodyTemperatureSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingBasalBodyTemperatureSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingBasalBodyTemperatureSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingBasalBodyTemperatureSample) Unit() string {
	return c.unit
}

func (c *ClientFacingBasalBodyTemperatureSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBasalBodyTemperatureSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBasalBodyTemperatureSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBasalBodyTemperatureSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "°C" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "°C", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBasalBodyTemperatureSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBasalBodyTemperatureSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "°C",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBasalBodyTemperatureSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBloodOxygenTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in percentage (spo2).
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The value of the measurement.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBloodOxygenTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingBloodOxygenTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingBloodOxygenTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingBloodOxygenTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingBloodOxygenTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingBloodOxygenTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingBloodOxygenTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBloodOxygenTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBloodOxygenTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBloodOxygenTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBloodOxygenTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBloodOxygenTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBloodOxygenTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBloodPressureTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The unit of the value. We use SI units where possible, e.g. mmol/L for glucose/cholesterol, bpm for heart rate, etc.
	Unit      string                          `json:"unit" url:"unit"`
	Grouping  *ClientFacingSampleGroupingKeys `json:"grouping,omitempty" url:"grouping,omitempty"`
	Timestamp time.Time                       `json:"timestamp" url:"timestamp"`
	Systolic  float64                         `json:"systolic" url:"systolic"`
	Diastolic float64                         `json:"diastolic" url:"diastolic"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBloodPressureTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingBloodPressureTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingBloodPressureTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingBloodPressureTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingBloodPressureTimeseries) GetGrouping() *ClientFacingSampleGroupingKeys {
	if c == nil {
		return nil
	}
	return c.Grouping
}

func (c *ClientFacingBloodPressureTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingBloodPressureTimeseries) GetSystolic() float64 {
	if c == nil {
		return 0
	}
	return c.Systolic
}

func (c *ClientFacingBloodPressureTimeseries) GetDiastolic() float64 {
	if c == nil {
		return 0
	}
	return c.Diastolic
}

func (c *ClientFacingBloodPressureTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBloodPressureTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBloodPressureTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBloodPressureTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBloodPressureTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBloodPressureTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBloodPressureTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyFatTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in percentage (0-100).
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The value of the measurement.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyFatTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingBodyFatTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingBodyFatTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingBodyFatTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingBodyFatTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingBodyFatTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingBodyFatTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyFatTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBodyFatTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBodyFatTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyFatTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBodyFatTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBodyFatTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyMassIndexSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyMassIndexSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingBodyMassIndexSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingBodyMassIndexSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingBodyMassIndexSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingBodyMassIndexSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingBodyMassIndexSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingBodyMassIndexSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingBodyMassIndexSample) Unit() string {
	return c.unit
}

func (c *ClientFacingBodyMassIndexSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyMassIndexSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBodyMassIndexSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBodyMassIndexSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "index" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "index", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyMassIndexSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBodyMassIndexSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "index",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBodyMassIndexSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyTemperatureDeltaSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	// Location of the temperature sensor. ℹ️ This enum is non-exhaustive.
	SensorLocation *ClientFacingBodyTemperatureDeltaSampleSensorLocation `json:"sensor_location,omitempty" url:"sensor_location,omitempty"`
	unit           string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyTemperatureDeltaSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingBodyTemperatureDeltaSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingBodyTemperatureDeltaSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingBodyTemperatureDeltaSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingBodyTemperatureDeltaSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingBodyTemperatureDeltaSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingBodyTemperatureDeltaSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingBodyTemperatureDeltaSample) GetSensorLocation() *ClientFacingBodyTemperatureDeltaSampleSensorLocation {
	if c == nil {
		return nil
	}
	return c.SensorLocation
}

func (c *ClientFacingBodyTemperatureDeltaSample) Unit() string {
	return c.unit
}

func (c *ClientFacingBodyTemperatureDeltaSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyTemperatureDeltaSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBodyTemperatureDeltaSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBodyTemperatureDeltaSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "°C" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "°C", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyTemperatureDeltaSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBodyTemperatureDeltaSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "°C",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBodyTemperatureDeltaSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyTemperatureDeltaSampleSensorLocation string

const (
	ClientFacingBodyTemperatureDeltaSampleSensorLocationArmpit           ClientFacingBodyTemperatureDeltaSampleSensorLocation = "armpit"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationBody             ClientFacingBodyTemperatureDeltaSampleSensorLocation = "body"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationEar              ClientFacingBodyTemperatureDeltaSampleSensorLocation = "ear"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationFinger           ClientFacingBodyTemperatureDeltaSampleSensorLocation = "finger"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationGastrointestinal ClientFacingBodyTemperatureDeltaSampleSensorLocation = "gastrointestinal"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationMouth            ClientFacingBodyTemperatureDeltaSampleSensorLocation = "mouth"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationRectum           ClientFacingBodyTemperatureDeltaSampleSensorLocation = "rectum"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationToe              ClientFacingBodyTemperatureDeltaSampleSensorLocation = "toe"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationEardrum          ClientFacingBodyTemperatureDeltaSampleSensorLocation = "eardrum"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationTemporalArtery   ClientFacingBodyTemperatureDeltaSampleSensorLocation = "temporal_artery"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationForehead         ClientFacingBodyTemperatureDeltaSampleSensorLocation = "forehead"
	ClientFacingBodyTemperatureDeltaSampleSensorLocationWrist            ClientFacingBodyTemperatureDeltaSampleSensorLocation = "wrist"
)

func NewClientFacingBodyTemperatureDeltaSampleSensorLocationFromString(s string) (ClientFacingBodyTemperatureDeltaSampleSensorLocation, error) {
	switch s {
	case "armpit":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationArmpit, nil
	case "body":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationBody, nil
	case "ear":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationEar, nil
	case "finger":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationFinger, nil
	case "gastrointestinal":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationGastrointestinal, nil
	case "mouth":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationMouth, nil
	case "rectum":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationRectum, nil
	case "toe":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationToe, nil
	case "eardrum":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationEardrum, nil
	case "temporal_artery":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationTemporalArtery, nil
	case "forehead":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationForehead, nil
	case "wrist":
		return ClientFacingBodyTemperatureDeltaSampleSensorLocationWrist, nil
	}
	var t ClientFacingBodyTemperatureDeltaSampleSensorLocation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingBodyTemperatureDeltaSampleSensorLocation) Ptr() *ClientFacingBodyTemperatureDeltaSampleSensorLocation {
	return &c
}

type ClientFacingBodyTemperatureSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	// Location of the temperature sensor. ℹ️ This enum is non-exhaustive.
	SensorLocation *ClientFacingBodyTemperatureSampleSensorLocation `json:"sensor_location,omitempty" url:"sensor_location,omitempty"`
	unit           string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyTemperatureSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingBodyTemperatureSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingBodyTemperatureSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingBodyTemperatureSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingBodyTemperatureSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingBodyTemperatureSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingBodyTemperatureSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingBodyTemperatureSample) GetSensorLocation() *ClientFacingBodyTemperatureSampleSensorLocation {
	if c == nil {
		return nil
	}
	return c.SensorLocation
}

func (c *ClientFacingBodyTemperatureSample) Unit() string {
	return c.unit
}

func (c *ClientFacingBodyTemperatureSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyTemperatureSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBodyTemperatureSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBodyTemperatureSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "°C" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "°C", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyTemperatureSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBodyTemperatureSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "°C",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBodyTemperatureSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingBodyTemperatureSampleSensorLocation string

const (
	ClientFacingBodyTemperatureSampleSensorLocationArmpit           ClientFacingBodyTemperatureSampleSensorLocation = "armpit"
	ClientFacingBodyTemperatureSampleSensorLocationBody             ClientFacingBodyTemperatureSampleSensorLocation = "body"
	ClientFacingBodyTemperatureSampleSensorLocationEar              ClientFacingBodyTemperatureSampleSensorLocation = "ear"
	ClientFacingBodyTemperatureSampleSensorLocationFinger           ClientFacingBodyTemperatureSampleSensorLocation = "finger"
	ClientFacingBodyTemperatureSampleSensorLocationGastrointestinal ClientFacingBodyTemperatureSampleSensorLocation = "gastrointestinal"
	ClientFacingBodyTemperatureSampleSensorLocationMouth            ClientFacingBodyTemperatureSampleSensorLocation = "mouth"
	ClientFacingBodyTemperatureSampleSensorLocationRectum           ClientFacingBodyTemperatureSampleSensorLocation = "rectum"
	ClientFacingBodyTemperatureSampleSensorLocationToe              ClientFacingBodyTemperatureSampleSensorLocation = "toe"
	ClientFacingBodyTemperatureSampleSensorLocationEardrum          ClientFacingBodyTemperatureSampleSensorLocation = "eardrum"
	ClientFacingBodyTemperatureSampleSensorLocationTemporalArtery   ClientFacingBodyTemperatureSampleSensorLocation = "temporal_artery"
	ClientFacingBodyTemperatureSampleSensorLocationForehead         ClientFacingBodyTemperatureSampleSensorLocation = "forehead"
	ClientFacingBodyTemperatureSampleSensorLocationWrist            ClientFacingBodyTemperatureSampleSensorLocation = "wrist"
)

func NewClientFacingBodyTemperatureSampleSensorLocationFromString(s string) (ClientFacingBodyTemperatureSampleSensorLocation, error) {
	switch s {
	case "armpit":
		return ClientFacingBodyTemperatureSampleSensorLocationArmpit, nil
	case "body":
		return ClientFacingBodyTemperatureSampleSensorLocationBody, nil
	case "ear":
		return ClientFacingBodyTemperatureSampleSensorLocationEar, nil
	case "finger":
		return ClientFacingBodyTemperatureSampleSensorLocationFinger, nil
	case "gastrointestinal":
		return ClientFacingBodyTemperatureSampleSensorLocationGastrointestinal, nil
	case "mouth":
		return ClientFacingBodyTemperatureSampleSensorLocationMouth, nil
	case "rectum":
		return ClientFacingBodyTemperatureSampleSensorLocationRectum, nil
	case "toe":
		return ClientFacingBodyTemperatureSampleSensorLocationToe, nil
	case "eardrum":
		return ClientFacingBodyTemperatureSampleSensorLocationEardrum, nil
	case "temporal_artery":
		return ClientFacingBodyTemperatureSampleSensorLocationTemporalArtery, nil
	case "forehead":
		return ClientFacingBodyTemperatureSampleSensorLocationForehead, nil
	case "wrist":
		return ClientFacingBodyTemperatureSampleSensorLocationWrist, nil
	}
	var t ClientFacingBodyTemperatureSampleSensorLocation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingBodyTemperatureSampleSensorLocation) Ptr() *ClientFacingBodyTemperatureSampleSensorLocation {
	return &c
}

type ClientFacingBodyWeightTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in kilograms (kg).
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The value of the measurement.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingBodyWeightTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingBodyWeightTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingBodyWeightTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingBodyWeightTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingBodyWeightTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingBodyWeightTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingBodyWeightTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingBodyWeightTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingBodyWeightTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingBodyWeightTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingBodyWeightTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingBodyWeightTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingBodyWeightTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCaffeineTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in grams.
	Unit string `json:"unit" url:"unit"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// Quantity of caffeine consumed during the time period.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCaffeineTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingCaffeineTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingCaffeineTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingCaffeineTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingCaffeineTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingCaffeineTimeseries) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingCaffeineTimeseries) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingCaffeineTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingCaffeineTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCaffeineTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCaffeineTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCaffeineTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCaffeineTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCaffeineTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCaffeineTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCaloriesActiveTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in kilocalories (kcal)
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// Energy consumption caused by the physical activity at the time or interval::kilocalories
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCaloriesActiveTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingCaloriesActiveTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingCaloriesActiveTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingCaloriesActiveTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingCaloriesActiveTimeseries) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingCaloriesActiveTimeseries) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingCaloriesActiveTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingCaloriesActiveTimeseries) Unit() string {
	return c.unit
}

func (c *ClientFacingCaloriesActiveTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCaloriesActiveTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCaloriesActiveTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCaloriesActiveTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "kcal" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "kcal", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCaloriesActiveTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCaloriesActiveTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "kcal",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCaloriesActiveTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCaloriesBasalTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in kilocalories (kcal)
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// Basal Metabolic Rate at the time or interval::kilocalories
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCaloriesBasalTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingCaloriesBasalTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingCaloriesBasalTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingCaloriesBasalTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingCaloriesBasalTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingCaloriesBasalTimeseries) Unit() string {
	return c.unit
}

func (c *ClientFacingCaloriesBasalTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCaloriesBasalTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCaloriesBasalTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCaloriesBasalTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Unit != "kcal" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "kcal", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCaloriesBasalTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCaloriesBasalTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Unit:      "kcal",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCaloriesBasalTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCarbohydratesSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in grams.
	Unit string `json:"unit" url:"unit"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCarbohydratesSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingCarbohydratesSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingCarbohydratesSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingCarbohydratesSample) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingCarbohydratesSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingCarbohydratesSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingCarbohydratesSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingCarbohydratesSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingCarbohydratesSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCarbohydratesSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCarbohydratesSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCarbohydratesSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCarbohydratesSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCarbohydratesSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCarbohydratesSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingCholesterolTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in mmol/L.
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The value of the measurement.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingCholesterolTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingCholesterolTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingCholesterolTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingCholesterolTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingCholesterolTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingCholesterolTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingCholesterolTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingCholesterolTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingCholesterolTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingCholesterolTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingCholesterolTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingCholesterolTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingCholesterolTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingDaylightExposureSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingDaylightExposureSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingDaylightExposureSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingDaylightExposureSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingDaylightExposureSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingDaylightExposureSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingDaylightExposureSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingDaylightExposureSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingDaylightExposureSample) Unit() string {
	return c.unit
}

func (c *ClientFacingDaylightExposureSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingDaylightExposureSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingDaylightExposureSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingDaylightExposureSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "min" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "min", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingDaylightExposureSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingDaylightExposureSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "min",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingDaylightExposureSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingDistanceTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in meters (m)
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// Distance traveled during activities at the time or interval::steps
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingDistanceTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingDistanceTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingDistanceTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingDistanceTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingDistanceTimeseries) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingDistanceTimeseries) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingDistanceTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingDistanceTimeseries) Unit() string {
	return c.unit
}

func (c *ClientFacingDistanceTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingDistanceTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingDistanceTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingDistanceTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "m" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "m", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingDistanceTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingDistanceTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "m",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingDistanceTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingElectrocardiogramVoltageTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The lead of the measurement.
	Type string `json:"type" url:"type"`
	// Measured in mV.
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The value of the measurement.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) GetType() string {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingElectrocardiogramVoltageTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingElectrocardiogramVoltageTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingElectrocardiogramVoltageTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingElectrocardiogramVoltageTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingFallSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingFallSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingFallSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingFallSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingFallSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingFallSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingFallSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingFallSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingFallSample) Unit() string {
	return c.unit
}

func (c *ClientFacingFallSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingFallSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingFallSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingFallSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingFallSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingFallSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingFallSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingFloorsClimbedTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in counts
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// Number of floors climbed at the time or interval::count
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingFloorsClimbedTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingFloorsClimbedTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingFloorsClimbedTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingFloorsClimbedTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingFloorsClimbedTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingFloorsClimbedTimeseries) Unit() string {
	return c.unit
}

func (c *ClientFacingFloorsClimbedTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingFloorsClimbedTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingFloorsClimbedTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingFloorsClimbedTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingFloorsClimbedTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingFloorsClimbedTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingFloorsClimbedTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingForcedExpiratoryVolume1Sample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) Unit() string {
	return c.unit
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingForcedExpiratoryVolume1Sample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingForcedExpiratoryVolume1Sample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "L" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "L", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingForcedExpiratoryVolume1Sample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "L",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingForcedExpiratoryVolume1Sample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingForcedVitalCapacitySample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingForcedVitalCapacitySample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingForcedVitalCapacitySample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingForcedVitalCapacitySample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingForcedVitalCapacitySample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingForcedVitalCapacitySample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingForcedVitalCapacitySample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingForcedVitalCapacitySample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingForcedVitalCapacitySample) Unit() string {
	return c.unit
}

func (c *ClientFacingForcedVitalCapacitySample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingForcedVitalCapacitySample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingForcedVitalCapacitySample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingForcedVitalCapacitySample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "L" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "L", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingForcedVitalCapacitySample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingForcedVitalCapacitySample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "L",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingForcedVitalCapacitySample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingGlucoseTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in mmol/L.
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The value of the measurement.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingGlucoseTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingGlucoseTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingGlucoseTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingGlucoseTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingGlucoseTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingGlucoseTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingGlucoseTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingGlucoseTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingGlucoseTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingGlucoseTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingGlucoseTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingGlucoseTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingGlucoseTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHandwashingSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHandwashingSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingHandwashingSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingHandwashingSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingHandwashingSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingHandwashingSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingHandwashingSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingHandwashingSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingHandwashingSample) Unit() string {
	return c.unit
}

func (c *ClientFacingHandwashingSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHandwashingSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHandwashingSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHandwashingSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHandwashingSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHandwashingSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHandwashingSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingHeartRateAlertSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// ℹ️ This enum is non-exhaustive.
	Type ClientFacingHeartRateAlertSampleType `json:"type" url:"type"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End   time.Time `json:"end" url:"end"`
	Value int       `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHeartRateAlertSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingHeartRateAlertSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingHeartRateAlertSample) GetType() ClientFacingHeartRateAlertSampleType {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *ClientFacingHeartRateAlertSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingHeartRateAlertSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingHeartRateAlertSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingHeartRateAlertSample) GetValue() int {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingHeartRateAlertSample) Unit() string {
	return c.unit
}

func (c *ClientFacingHeartRateAlertSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHeartRateAlertSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHeartRateAlertSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHeartRateAlertSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHeartRateAlertSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHeartRateAlertSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHeartRateAlertSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// ℹ️ This enum is non-exhaustive.
type ClientFacingHeartRateAlertSampleType string

const (
	ClientFacingHeartRateAlertSampleTypeLowHeartRate    ClientFacingHeartRateAlertSampleType = "low_heart_rate"
	ClientFacingHeartRateAlertSampleTypeHighHeartRate   ClientFacingHeartRateAlertSampleType = "high_heart_rate"
	ClientFacingHeartRateAlertSampleTypeIrregularRhythm ClientFacingHeartRateAlertSampleType = "irregular_rhythm"
)

func NewClientFacingHeartRateAlertSampleTypeFromString(s string) (ClientFacingHeartRateAlertSampleType, error) {
	switch s {
	case "low_heart_rate":
		return ClientFacingHeartRateAlertSampleTypeLowHeartRate, nil
	case "high_heart_rate":
		return ClientFacingHeartRateAlertSampleTypeHighHeartRate, nil
	case "irregular_rhythm":
		return ClientFacingHeartRateAlertSampleTypeIrregularRhythm, nil
	}
	var t ClientFacingHeartRateAlertSampleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingHeartRateAlertSampleType) Ptr() *ClientFacingHeartRateAlertSampleType {
	return &c
}

type ClientFacingHeartRateRecoveryOneMinuteSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) Unit() string {
	return c.unit
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingHeartRateRecoveryOneMinuteSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingHeartRateRecoveryOneMinuteSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingHeartRateRecoveryOneMinuteSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingHeartRateRecoveryOneMinuteSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingIgeTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in FSU.
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The value of the measurement.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingIgeTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingIgeTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingIgeTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingIgeTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingIgeTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingIgeTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingIgeTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingIgeTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingIgeTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingIgeTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingIgeTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingIgeTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingIgeTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingIggTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in FSU.
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The value of the measurement.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingIggTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingIggTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingIggTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingIggTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingIggTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingIggTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingIggTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingIggTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingIggTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingIggTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingIggTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingIggTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingIggTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingInhalerUsageSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingInhalerUsageSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingInhalerUsageSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingInhalerUsageSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingInhalerUsageSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingInhalerUsageSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingInhalerUsageSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingInhalerUsageSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingInhalerUsageSample) Unit() string {
	return c.unit
}

func (c *ClientFacingInhalerUsageSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingInhalerUsageSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingInhalerUsageSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingInhalerUsageSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingInhalerUsageSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingInhalerUsageSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingInhalerUsageSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingInsulinInjectionSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// Insulin type: rapid vs long acting ℹ️ This enum is non-exhaustive.
	Type ClientFacingInsulinInjectionSampleType `json:"type" url:"type"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingInsulinInjectionSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingInsulinInjectionSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingInsulinInjectionSample) GetType() ClientFacingInsulinInjectionSampleType {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *ClientFacingInsulinInjectionSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingInsulinInjectionSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingInsulinInjectionSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingInsulinInjectionSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingInsulinInjectionSample) Unit() string {
	return c.unit
}

func (c *ClientFacingInsulinInjectionSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingInsulinInjectionSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingInsulinInjectionSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingInsulinInjectionSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "unit" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "unit", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingInsulinInjectionSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingInsulinInjectionSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "unit",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingInsulinInjectionSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Insulin type: rapid vs long acting ℹ️ This enum is non-exhaustive.
type ClientFacingInsulinInjectionSampleType string

const (
	ClientFacingInsulinInjectionSampleTypeRapidActing ClientFacingInsulinInjectionSampleType = "rapid_acting"
	ClientFacingInsulinInjectionSampleTypeLongActing  ClientFacingInsulinInjectionSampleType = "long_acting"
)

func NewClientFacingInsulinInjectionSampleTypeFromString(s string) (ClientFacingInsulinInjectionSampleType, error) {
	switch s {
	case "rapid_acting":
		return ClientFacingInsulinInjectionSampleTypeRapidActing, nil
	case "long_acting":
		return ClientFacingInsulinInjectionSampleTypeLongActing, nil
	}
	var t ClientFacingInsulinInjectionSampleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingInsulinInjectionSampleType) Ptr() *ClientFacingInsulinInjectionSampleType {
	return &c
}

type ClientFacingLeanBodyMassSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingLeanBodyMassSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingLeanBodyMassSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingLeanBodyMassSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingLeanBodyMassSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingLeanBodyMassSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingLeanBodyMassSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingLeanBodyMassSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingLeanBodyMassSample) Unit() string {
	return c.unit
}

func (c *ClientFacingLeanBodyMassSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingLeanBodyMassSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingLeanBodyMassSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingLeanBodyMassSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "kg" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "kg", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingLeanBodyMassSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingLeanBodyMassSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "kg",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingLeanBodyMassSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingMindfulnessMinutesTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in minutes.
	Unit string `json:"unit" url:"unit"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// Number of minutes spent in a mindful state.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingMindfulnessMinutesTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingMindfulnessMinutesTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingMindfulnessMinutesTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingMindfulnessMinutesTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingMindfulnessMinutesTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingMindfulnessMinutesTimeseries) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingMindfulnessMinutesTimeseries) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingMindfulnessMinutesTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingMindfulnessMinutesTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingMindfulnessMinutesTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingMindfulnessMinutesTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingMindfulnessMinutesTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingMindfulnessMinutesTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingMindfulnessMinutesTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingMindfulnessMinutesTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingNoteSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// User notes as text.
	Unit string `json:"unit" url:"unit"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value string `json:"value" url:"value"`
	// What the note refers to.
	Tags []ClientFacingNoteSampleTagsItem `json:"tags,omitempty" url:"tags,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingNoteSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingNoteSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingNoteSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingNoteSample) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingNoteSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingNoteSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingNoteSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingNoteSample) GetValue() string {
	if c == nil {
		return ""
	}
	return c.Value
}

func (c *ClientFacingNoteSample) GetTags() []ClientFacingNoteSampleTagsItem {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *ClientFacingNoteSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingNoteSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingNoteSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingNoteSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingNoteSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingNoteSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingNoteSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingNoteSampleTagsItem string

const (
	ClientFacingNoteSampleTagsItemFood             ClientFacingNoteSampleTagsItem = "food"
	ClientFacingNoteSampleTagsItemExercise         ClientFacingNoteSampleTagsItem = "exercise"
	ClientFacingNoteSampleTagsItemInsulinInjection ClientFacingNoteSampleTagsItem = "insulin_injection"
	ClientFacingNoteSampleTagsItemUnspecified      ClientFacingNoteSampleTagsItem = "unspecified"
)

func NewClientFacingNoteSampleTagsItemFromString(s string) (ClientFacingNoteSampleTagsItem, error) {
	switch s {
	case "food":
		return ClientFacingNoteSampleTagsItemFood, nil
	case "exercise":
		return ClientFacingNoteSampleTagsItemExercise, nil
	case "insulin_injection":
		return ClientFacingNoteSampleTagsItemInsulinInjection, nil
	case "unspecified":
		return ClientFacingNoteSampleTagsItemUnspecified, nil
	}
	var t ClientFacingNoteSampleTagsItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingNoteSampleTagsItem) Ptr() *ClientFacingNoteSampleTagsItem {
	return &c
}

type ClientFacingPeakExpiratoryFlowRateSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) Unit() string {
	return c.unit
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingPeakExpiratoryFlowRateSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingPeakExpiratoryFlowRateSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "L/min" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "L/min", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingPeakExpiratoryFlowRateSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "L/min",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingPeakExpiratoryFlowRateSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSampleGroupingKeys = []interface{}

type ClientFacingSleepApneaAlertSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepApneaAlertSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingSleepApneaAlertSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingSleepApneaAlertSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingSleepApneaAlertSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingSleepApneaAlertSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingSleepApneaAlertSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingSleepApneaAlertSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingSleepApneaAlertSample) Unit() string {
	return c.unit
}

func (c *ClientFacingSleepApneaAlertSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepApneaAlertSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingSleepApneaAlertSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingSleepApneaAlertSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepApneaAlertSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingSleepApneaAlertSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingSleepApneaAlertSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepBreathingDisturbanceSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// ℹ️ This enum is non-exhaustive.
	Type *ClientFacingSleepBreathingDisturbanceSampleType `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingSleepBreathingDisturbanceSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingSleepBreathingDisturbanceSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingSleepBreathingDisturbanceSample) GetType() *ClientFacingSleepBreathingDisturbanceSampleType {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingSleepBreathingDisturbanceSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingSleepBreathingDisturbanceSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingSleepBreathingDisturbanceSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingSleepBreathingDisturbanceSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingSleepBreathingDisturbanceSample) Unit() string {
	return c.unit
}

func (c *ClientFacingSleepBreathingDisturbanceSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingSleepBreathingDisturbanceSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingSleepBreathingDisturbanceSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingSleepBreathingDisturbanceSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingSleepBreathingDisturbanceSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingSleepBreathingDisturbanceSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingSleepBreathingDisturbanceSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingSleepBreathingDisturbanceSampleType string

const (
	ClientFacingSleepBreathingDisturbanceSampleTypeElevated    ClientFacingSleepBreathingDisturbanceSampleType = "elevated"
	ClientFacingSleepBreathingDisturbanceSampleTypeNotElevated ClientFacingSleepBreathingDisturbanceSampleType = "not_elevated"
)

func NewClientFacingSleepBreathingDisturbanceSampleTypeFromString(s string) (ClientFacingSleepBreathingDisturbanceSampleType, error) {
	switch s {
	case "elevated":
		return ClientFacingSleepBreathingDisturbanceSampleTypeElevated, nil
	case "not_elevated":
		return ClientFacingSleepBreathingDisturbanceSampleTypeNotElevated, nil
	}
	var t ClientFacingSleepBreathingDisturbanceSampleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingSleepBreathingDisturbanceSampleType) Ptr() *ClientFacingSleepBreathingDisturbanceSampleType {
	return &c
}

type ClientFacingStandDurationSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStandDurationSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingStandDurationSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingStandDurationSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingStandDurationSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingStandDurationSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingStandDurationSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingStandDurationSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingStandDurationSample) Unit() string {
	return c.unit
}

func (c *ClientFacingStandDurationSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStandDurationSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingStandDurationSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingStandDurationSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "min" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "min", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStandDurationSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingStandDurationSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "min",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingStandDurationSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStandHourSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// ℹ️ This enum is non-exhaustive.
	Type ClientFacingStandHourSampleType `json:"type" url:"type"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStandHourSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingStandHourSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingStandHourSample) GetType() ClientFacingStandHourSampleType {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *ClientFacingStandHourSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingStandHourSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingStandHourSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingStandHourSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingStandHourSample) Unit() string {
	return c.unit
}

func (c *ClientFacingStandHourSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStandHourSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingStandHourSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingStandHourSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStandHourSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingStandHourSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingStandHourSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// ℹ️ This enum is non-exhaustive.
type ClientFacingStandHourSampleType string

const (
	ClientFacingStandHourSampleTypeStood ClientFacingStandHourSampleType = "stood"
	ClientFacingStandHourSampleTypeIdle  ClientFacingStandHourSampleType = "idle"
)

func NewClientFacingStandHourSampleTypeFromString(s string) (ClientFacingStandHourSampleType, error) {
	switch s {
	case "stood":
		return ClientFacingStandHourSampleTypeStood, nil
	case "idle":
		return ClientFacingStandHourSampleTypeIdle, nil
	}
	var t ClientFacingStandHourSampleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingStandHourSampleType) Ptr() *ClientFacingStandHourSampleType {
	return &c
}

type ClientFacingStepsTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in counts
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The number of steps sampled at the time or interval::count
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStepsTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingStepsTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingStepsTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingStepsTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingStepsTimeseries) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingStepsTimeseries) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingStepsTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingStepsTimeseries) Unit() string {
	return c.unit
}

func (c *ClientFacingStepsTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStepsTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingStepsTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingStepsTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStepsTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingStepsTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingStepsTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingStressLevelTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in percentage (0-100).
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	Value     float64   `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingStressLevelTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingStressLevelTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingStressLevelTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingStressLevelTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingStressLevelTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingStressLevelTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingStressLevelTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingStressLevelTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingStressLevelTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingStressLevelTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingStressLevelTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingStressLevelTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingStressLevelTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingUvExposureSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingUvExposureSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingUvExposureSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingUvExposureSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingUvExposureSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingUvExposureSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingUvExposureSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingUvExposureSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingUvExposureSample) Unit() string {
	return c.unit
}

func (c *ClientFacingUvExposureSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingUvExposureSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingUvExposureSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingUvExposureSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "index" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "index", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingUvExposureSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingUvExposureSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "index",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingUvExposureSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingVo2MaxTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in mL/kg/min.
	Unit string `json:"unit" url:"unit"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingVo2MaxTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingVo2MaxTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingVo2MaxTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingVo2MaxTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingVo2MaxTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingVo2MaxTimeseries) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingVo2MaxTimeseries) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingVo2MaxTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingVo2MaxTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingVo2MaxTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingVo2MaxTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingVo2MaxTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingVo2MaxTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingVo2MaxTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingVo2MaxTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWaistCircumferenceSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWaistCircumferenceSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingWaistCircumferenceSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingWaistCircumferenceSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingWaistCircumferenceSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingWaistCircumferenceSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingWaistCircumferenceSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingWaistCircumferenceSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingWaistCircumferenceSample) Unit() string {
	return c.unit
}

func (c *ClientFacingWaistCircumferenceSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWaistCircumferenceSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWaistCircumferenceSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWaistCircumferenceSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "cm" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "cm", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWaistCircumferenceSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWaistCircumferenceSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "cm",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWaistCircumferenceSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWaterTimeseries struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Measured in milliters.
	Unit string `json:"unit" url:"unit"`
	// The timestamp of the measurement.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// Quantity of water drank during the time period.
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWaterTimeseries) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingWaterTimeseries) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingWaterTimeseries) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingWaterTimeseries) GetUnit() string {
	if c == nil {
		return ""
	}
	return c.Unit
}

func (c *ClientFacingWaterTimeseries) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingWaterTimeseries) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingWaterTimeseries) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWaterTimeseries) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWaterTimeseries
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWaterTimeseries(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWaterTimeseries) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWaterTimeseries
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWaterTimeseries) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWheelchairPushSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWheelchairPushSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingWheelchairPushSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingWheelchairPushSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingWheelchairPushSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingWheelchairPushSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingWheelchairPushSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingWheelchairPushSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingWheelchairPushSample) Unit() string {
	return c.unit
}

func (c *ClientFacingWheelchairPushSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWheelchairPushSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWheelchairPushSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWheelchairPushSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWheelchairPushSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWheelchairPushSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWheelchairPushSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutDistanceSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutDistanceSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingWorkoutDistanceSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingWorkoutDistanceSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingWorkoutDistanceSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingWorkoutDistanceSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingWorkoutDistanceSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingWorkoutDistanceSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingWorkoutDistanceSample) Unit() string {
	return c.unit
}

func (c *ClientFacingWorkoutDistanceSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutDistanceSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWorkoutDistanceSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWorkoutDistanceSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "m" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "m", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutDistanceSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWorkoutDistanceSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "m",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWorkoutDistanceSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutDurationSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	// Workout intensity. ℹ️ This enum is non-exhaustive.
	Intensity *ClientFacingWorkoutDurationSampleIntensity `json:"intensity,omitempty" url:"intensity,omitempty"`
	unit      string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutDurationSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingWorkoutDurationSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingWorkoutDurationSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingWorkoutDurationSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingWorkoutDurationSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingWorkoutDurationSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingWorkoutDurationSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingWorkoutDurationSample) GetIntensity() *ClientFacingWorkoutDurationSampleIntensity {
	if c == nil {
		return nil
	}
	return c.Intensity
}

func (c *ClientFacingWorkoutDurationSample) Unit() string {
	return c.unit
}

func (c *ClientFacingWorkoutDurationSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutDurationSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWorkoutDurationSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWorkoutDurationSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "min" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "min", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutDurationSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWorkoutDurationSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "min",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWorkoutDurationSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientFacingWorkoutDurationSampleIntensity string

const (
	ClientFacingWorkoutDurationSampleIntensityLow    ClientFacingWorkoutDurationSampleIntensity = "low"
	ClientFacingWorkoutDurationSampleIntensityMedium ClientFacingWorkoutDurationSampleIntensity = "medium"
	ClientFacingWorkoutDurationSampleIntensityHigh   ClientFacingWorkoutDurationSampleIntensity = "high"
)

func NewClientFacingWorkoutDurationSampleIntensityFromString(s string) (ClientFacingWorkoutDurationSampleIntensity, error) {
	switch s {
	case "low":
		return ClientFacingWorkoutDurationSampleIntensityLow, nil
	case "medium":
		return ClientFacingWorkoutDurationSampleIntensityMedium, nil
	case "high":
		return ClientFacingWorkoutDurationSampleIntensityHigh, nil
	}
	var t ClientFacingWorkoutDurationSampleIntensity
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientFacingWorkoutDurationSampleIntensity) Ptr() *ClientFacingWorkoutDurationSampleIntensity {
	return &c
}

type ClientFacingWorkoutSwimmingStrokeSample struct {
	// Deprecated
	Id *int `json:"id,omitempty" url:"id,omitempty"`
	// Time zone UTC offset in seconds. Positive offset indicates east of UTC; negative offset indicates west of UTC; and null indicates the time zone information is unavailable at source.
	TimezoneOffset *int `json:"timezone_offset,omitempty" url:"timezone_offset,omitempty"`
	// The reading type of the measurement. This is applicable only to Cholesterol, IGG, IGE and InsulinInjection.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// Depracated. The start time (inclusive) of the interval.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`
	// The start time (inclusive) of the interval.
	Start time.Time `json:"start" url:"start"`
	// The end time (exclusive) of the interval.
	End time.Time `json:"end" url:"end"`
	// The recorded value for the interval.
	Value float64 `json:"value" url:"value"`
	unit  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) GetId() *int {
	if c == nil {
		return nil
	}
	return c.Id
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) GetTimezoneOffset() *int {
	if c == nil {
		return nil
	}
	return c.TimezoneOffset
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) GetTimestamp() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Timestamp
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) GetStart() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.Start
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) GetEnd() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.End
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) GetValue() float64 {
	if c == nil {
		return 0
	}
	return c.Value
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) Unit() string {
	return c.unit
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) UnmarshalJSON(data []byte) error {
	type embed ClientFacingWorkoutSwimmingStrokeSample
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientFacingWorkoutSwimmingStrokeSample(unmarshaler.embed)
	c.Timestamp = unmarshaler.Timestamp.Time()
	c.Start = unmarshaler.Start.Time()
	c.End = unmarshaler.End.Time()
	if unmarshaler.Unit != "count" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "count", unmarshaler.Unit)
	}
	c.unit = unmarshaler.Unit
	extraProperties, err := internal.ExtractExtraProperties(data, *c, "unit")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) MarshalJSON() ([]byte, error) {
	type embed ClientFacingWorkoutSwimmingStrokeSample
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
		Start     *internal.DateTime `json:"start"`
		End       *internal.DateTime `json:"end"`
		Unit      string             `json:"unit"`
	}{
		embed:     embed(*c),
		Timestamp: internal.NewDateTime(c.Timestamp),
		Start:     internal.NewDateTime(c.Start),
		End:       internal.NewDateTime(c.End),
		Unit:      "count",
	}
	return json.Marshal(marshaler)
}

func (c *ClientFacingWorkoutSwimmingStrokeSample) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GroupedAFibBurden struct {
	Source *ClientFacingSource             `json:"source" url:"source"`
	Data   []*ClientFacingAFibBurdenSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedAFibBurden) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedAFibBurden) GetData() []*ClientFacingAFibBurdenSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedAFibBurden) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedAFibBurden) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedAFibBurden
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedAFibBurden(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedAFibBurden) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedAFibBurdenResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedAFibBurden `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedAFibBurdenResponse) GetGroups() map[string][]*GroupedAFibBurden {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedAFibBurdenResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedAFibBurdenResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedAFibBurdenResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedAFibBurdenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedAFibBurdenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedAFibBurdenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedAFibBurdenResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBasalBodyTemperature struct {
	Source *ClientFacingSource                       `json:"source" url:"source"`
	Data   []*ClientFacingBasalBodyTemperatureSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBasalBodyTemperature) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedBasalBodyTemperature) GetData() []*ClientFacingBasalBodyTemperatureSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedBasalBodyTemperature) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBasalBodyTemperature) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBasalBodyTemperature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBasalBodyTemperature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBasalBodyTemperature) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBasalBodyTemperatureResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedBasalBodyTemperature `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBasalBodyTemperatureResponse) GetGroups() map[string][]*GroupedBasalBodyTemperature {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedBasalBodyTemperatureResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedBasalBodyTemperatureResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedBasalBodyTemperatureResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBasalBodyTemperatureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBasalBodyTemperatureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBasalBodyTemperatureResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBasalBodyTemperatureResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBloodOxygen struct {
	Source *ClientFacingSource                  `json:"source" url:"source"`
	Data   []*ClientFacingBloodOxygenTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBloodOxygen) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedBloodOxygen) GetData() []*ClientFacingBloodOxygenTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedBloodOxygen) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBloodOxygen) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBloodOxygen
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBloodOxygen(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBloodOxygen) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBloodOxygenResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedBloodOxygen `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBloodOxygenResponse) GetGroups() map[string][]*GroupedBloodOxygen {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedBloodOxygenResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedBloodOxygenResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedBloodOxygenResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBloodOxygenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBloodOxygenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBloodOxygenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBloodOxygenResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBloodPressure struct {
	Source *ClientFacingSource                    `json:"source" url:"source"`
	Data   []*ClientFacingBloodPressureTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBloodPressure) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedBloodPressure) GetData() []*ClientFacingBloodPressureTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedBloodPressure) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBloodPressure) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBloodPressure
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBloodPressure(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBloodPressure) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBloodPressureResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedBloodPressure `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBloodPressureResponse) GetGroups() map[string][]*GroupedBloodPressure {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedBloodPressureResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedBloodPressureResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedBloodPressureResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBloodPressureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBloodPressureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBloodPressureResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBloodPressureResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyFat struct {
	Source *ClientFacingSource              `json:"source" url:"source"`
	Data   []*ClientFacingBodyFatTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyFat) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedBodyFat) GetData() []*ClientFacingBodyFatTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedBodyFat) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyFat) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyFat
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyFat(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyFat) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyFatResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedBodyFat `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyFatResponse) GetGroups() map[string][]*GroupedBodyFat {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedBodyFatResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedBodyFatResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedBodyFatResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyFatResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyFatResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyFatResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyFatResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyMassIndex struct {
	Source *ClientFacingSource                `json:"source" url:"source"`
	Data   []*ClientFacingBodyMassIndexSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyMassIndex) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedBodyMassIndex) GetData() []*ClientFacingBodyMassIndexSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedBodyMassIndex) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyMassIndex) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyMassIndex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyMassIndex(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyMassIndex) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyMassIndexResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedBodyMassIndex `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyMassIndexResponse) GetGroups() map[string][]*GroupedBodyMassIndex {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedBodyMassIndexResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedBodyMassIndexResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedBodyMassIndexResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyMassIndexResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyMassIndexResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyMassIndexResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyMassIndexResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyTemperature struct {
	Source *ClientFacingSource                  `json:"source" url:"source"`
	Data   []*ClientFacingBodyTemperatureSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyTemperature) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedBodyTemperature) GetData() []*ClientFacingBodyTemperatureSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedBodyTemperature) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyTemperature) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyTemperature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyTemperature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyTemperature) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyTemperatureDelta struct {
	Source *ClientFacingSource                       `json:"source" url:"source"`
	Data   []*ClientFacingBodyTemperatureDeltaSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyTemperatureDelta) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedBodyTemperatureDelta) GetData() []*ClientFacingBodyTemperatureDeltaSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedBodyTemperatureDelta) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyTemperatureDelta) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyTemperatureDelta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyTemperatureDelta(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyTemperatureDelta) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyTemperatureDeltaResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedBodyTemperatureDelta `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyTemperatureDeltaResponse) GetGroups() map[string][]*GroupedBodyTemperatureDelta {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedBodyTemperatureDeltaResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedBodyTemperatureDeltaResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedBodyTemperatureDeltaResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyTemperatureDeltaResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyTemperatureDeltaResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyTemperatureDeltaResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyTemperatureDeltaResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyTemperatureResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedBodyTemperature `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyTemperatureResponse) GetGroups() map[string][]*GroupedBodyTemperature {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedBodyTemperatureResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedBodyTemperatureResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedBodyTemperatureResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyTemperatureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyTemperatureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyTemperatureResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyTemperatureResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyWeight struct {
	Source *ClientFacingSource                 `json:"source" url:"source"`
	Data   []*ClientFacingBodyWeightTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyWeight) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedBodyWeight) GetData() []*ClientFacingBodyWeightTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedBodyWeight) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyWeight) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyWeight
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyWeight(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyWeight) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedBodyWeightResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedBodyWeight `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedBodyWeightResponse) GetGroups() map[string][]*GroupedBodyWeight {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedBodyWeightResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedBodyWeightResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedBodyWeightResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedBodyWeightResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedBodyWeightResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedBodyWeightResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedBodyWeightResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCaffeine struct {
	Source *ClientFacingSource               `json:"source" url:"source"`
	Data   []*ClientFacingCaffeineTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCaffeine) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedCaffeine) GetData() []*ClientFacingCaffeineTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedCaffeine) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCaffeine) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCaffeine
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCaffeine(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCaffeine) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCaffeineResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedCaffeine `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCaffeineResponse) GetGroups() map[string][]*GroupedCaffeine {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedCaffeineResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedCaffeineResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedCaffeineResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCaffeineResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCaffeineResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCaffeineResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCaffeineResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCaloriesActive struct {
	Source *ClientFacingSource                     `json:"source" url:"source"`
	Data   []*ClientFacingCaloriesActiveTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCaloriesActive) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedCaloriesActive) GetData() []*ClientFacingCaloriesActiveTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedCaloriesActive) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCaloriesActive) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCaloriesActive
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCaloriesActive(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCaloriesActive) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCaloriesActiveResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedCaloriesActive `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCaloriesActiveResponse) GetGroups() map[string][]*GroupedCaloriesActive {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedCaloriesActiveResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedCaloriesActiveResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedCaloriesActiveResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCaloriesActiveResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCaloriesActiveResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCaloriesActiveResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCaloriesActiveResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCaloriesBasal struct {
	Source *ClientFacingSource                    `json:"source" url:"source"`
	Data   []*ClientFacingCaloriesBasalTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCaloriesBasal) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedCaloriesBasal) GetData() []*ClientFacingCaloriesBasalTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedCaloriesBasal) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCaloriesBasal) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCaloriesBasal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCaloriesBasal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCaloriesBasal) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCaloriesBasalResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedCaloriesBasal `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCaloriesBasalResponse) GetGroups() map[string][]*GroupedCaloriesBasal {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedCaloriesBasalResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedCaloriesBasalResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedCaloriesBasalResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCaloriesBasalResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCaloriesBasalResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCaloriesBasalResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCaloriesBasalResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCarbohydrates struct {
	Source *ClientFacingSource                `json:"source" url:"source"`
	Data   []*ClientFacingCarbohydratesSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCarbohydrates) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedCarbohydrates) GetData() []*ClientFacingCarbohydratesSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedCarbohydrates) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCarbohydrates) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCarbohydrates
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCarbohydrates(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCarbohydrates) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCarbohydratesResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedCarbohydrates `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCarbohydratesResponse) GetGroups() map[string][]*GroupedCarbohydrates {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedCarbohydratesResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedCarbohydratesResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedCarbohydratesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCarbohydratesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCarbohydratesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCarbohydratesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCarbohydratesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCholesterol struct {
	Source *ClientFacingSource                  `json:"source" url:"source"`
	Data   []*ClientFacingCholesterolTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCholesterol) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedCholesterol) GetData() []*ClientFacingCholesterolTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedCholesterol) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCholesterol) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCholesterol
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCholesterol(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCholesterol) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedCholesterolResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedCholesterol `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedCholesterolResponse) GetGroups() map[string][]*GroupedCholesterol {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedCholesterolResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedCholesterolResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedCholesterolResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedCholesterolResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedCholesterolResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedCholesterolResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedCholesterolResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedDaylightExposure struct {
	Source *ClientFacingSource                   `json:"source" url:"source"`
	Data   []*ClientFacingDaylightExposureSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedDaylightExposure) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedDaylightExposure) GetData() []*ClientFacingDaylightExposureSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedDaylightExposure) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedDaylightExposure) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedDaylightExposure
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedDaylightExposure(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedDaylightExposure) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedDaylightExposureResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedDaylightExposure `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedDaylightExposureResponse) GetGroups() map[string][]*GroupedDaylightExposure {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedDaylightExposureResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedDaylightExposureResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedDaylightExposureResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedDaylightExposureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedDaylightExposureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedDaylightExposureResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedDaylightExposureResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedDistance struct {
	Source *ClientFacingSource               `json:"source" url:"source"`
	Data   []*ClientFacingDistanceTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedDistance) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedDistance) GetData() []*ClientFacingDistanceTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedDistance) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedDistance) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedDistance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedDistance(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedDistance) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedDistanceResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedDistance `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedDistanceResponse) GetGroups() map[string][]*GroupedDistance {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedDistanceResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedDistanceResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedDistanceResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedDistanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedDistanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedDistanceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedDistanceResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedElectrocardiogramVoltage struct {
	Source *ClientFacingSource                               `json:"source" url:"source"`
	Data   []*ClientFacingElectrocardiogramVoltageTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedElectrocardiogramVoltage) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedElectrocardiogramVoltage) GetData() []*ClientFacingElectrocardiogramVoltageTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedElectrocardiogramVoltage) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedElectrocardiogramVoltage) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedElectrocardiogramVoltage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedElectrocardiogramVoltage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedElectrocardiogramVoltage) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedElectrocardiogramVoltageResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedElectrocardiogramVoltage `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedElectrocardiogramVoltageResponse) GetGroups() map[string][]*GroupedElectrocardiogramVoltage {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedElectrocardiogramVoltageResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedElectrocardiogramVoltageResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedElectrocardiogramVoltageResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedElectrocardiogramVoltageResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedElectrocardiogramVoltageResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedElectrocardiogramVoltageResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedElectrocardiogramVoltageResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedFall struct {
	Source *ClientFacingSource       `json:"source" url:"source"`
	Data   []*ClientFacingFallSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedFall) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedFall) GetData() []*ClientFacingFallSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedFall) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedFall) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedFall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedFall(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedFall) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedFallResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedFall `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedFallResponse) GetGroups() map[string][]*GroupedFall {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedFallResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedFallResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedFallResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedFallResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedFallResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedFallResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedFallResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedFloorsClimbed struct {
	Source *ClientFacingSource                    `json:"source" url:"source"`
	Data   []*ClientFacingFloorsClimbedTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedFloorsClimbed) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedFloorsClimbed) GetData() []*ClientFacingFloorsClimbedTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedFloorsClimbed) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedFloorsClimbed) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedFloorsClimbed
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedFloorsClimbed(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedFloorsClimbed) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedFloorsClimbedResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedFloorsClimbed `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedFloorsClimbedResponse) GetGroups() map[string][]*GroupedFloorsClimbed {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedFloorsClimbedResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedFloorsClimbedResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedFloorsClimbedResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedFloorsClimbedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedFloorsClimbedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedFloorsClimbedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedFloorsClimbedResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedForcedExpiratoryVolume1 struct {
	Source *ClientFacingSource                          `json:"source" url:"source"`
	Data   []*ClientFacingForcedExpiratoryVolume1Sample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedForcedExpiratoryVolume1) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedForcedExpiratoryVolume1) GetData() []*ClientFacingForcedExpiratoryVolume1Sample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedForcedExpiratoryVolume1) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedForcedExpiratoryVolume1) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedForcedExpiratoryVolume1
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedForcedExpiratoryVolume1(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedForcedExpiratoryVolume1) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedForcedExpiratoryVolume1Response struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedForcedExpiratoryVolume1 `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedForcedExpiratoryVolume1Response) GetGroups() map[string][]*GroupedForcedExpiratoryVolume1 {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedForcedExpiratoryVolume1Response) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedForcedExpiratoryVolume1Response) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedForcedExpiratoryVolume1Response) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedForcedExpiratoryVolume1Response) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedForcedExpiratoryVolume1Response
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedForcedExpiratoryVolume1Response(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedForcedExpiratoryVolume1Response) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedForcedVitalCapacity struct {
	Source *ClientFacingSource                      `json:"source" url:"source"`
	Data   []*ClientFacingForcedVitalCapacitySample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedForcedVitalCapacity) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedForcedVitalCapacity) GetData() []*ClientFacingForcedVitalCapacitySample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedForcedVitalCapacity) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedForcedVitalCapacity) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedForcedVitalCapacity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedForcedVitalCapacity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedForcedVitalCapacity) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedForcedVitalCapacityResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedForcedVitalCapacity `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedForcedVitalCapacityResponse) GetGroups() map[string][]*GroupedForcedVitalCapacity {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedForcedVitalCapacityResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedForcedVitalCapacityResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedForcedVitalCapacityResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedForcedVitalCapacityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedForcedVitalCapacityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedForcedVitalCapacityResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedForcedVitalCapacityResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedGlucose struct {
	Source *ClientFacingSource              `json:"source" url:"source"`
	Data   []*ClientFacingGlucoseTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedGlucose) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedGlucose) GetData() []*ClientFacingGlucoseTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedGlucose) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedGlucose) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedGlucose
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedGlucose(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedGlucose) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedGlucoseResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedGlucose `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedGlucoseResponse) GetGroups() map[string][]*GroupedGlucose {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedGlucoseResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedGlucoseResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedGlucoseResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedGlucoseResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedGlucoseResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedGlucoseResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedGlucoseResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHandwashing struct {
	Source *ClientFacingSource              `json:"source" url:"source"`
	Data   []*ClientFacingHandwashingSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHandwashing) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedHandwashing) GetData() []*ClientFacingHandwashingSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedHandwashing) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHandwashing) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHandwashing
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHandwashing(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHandwashing) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHandwashingResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedHandwashing `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHandwashingResponse) GetGroups() map[string][]*GroupedHandwashing {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedHandwashingResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedHandwashingResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedHandwashingResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHandwashingResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHandwashingResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHandwashingResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHandwashingResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHeartRate struct {
	Source *ClientFacingSource                `json:"source" url:"source"`
	Data   []*ClientFacingHeartRateTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHeartRate) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedHeartRate) GetData() []*ClientFacingHeartRateTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedHeartRate) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHeartRate) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHeartRate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHeartRate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHeartRate) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHeartRateAlert struct {
	Source *ClientFacingSource                 `json:"source" url:"source"`
	Data   []*ClientFacingHeartRateAlertSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHeartRateAlert) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedHeartRateAlert) GetData() []*ClientFacingHeartRateAlertSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedHeartRateAlert) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHeartRateAlert) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHeartRateAlert
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHeartRateAlert(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHeartRateAlert) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHeartRateAlertResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedHeartRateAlert `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHeartRateAlertResponse) GetGroups() map[string][]*GroupedHeartRateAlert {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedHeartRateAlertResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedHeartRateAlertResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedHeartRateAlertResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHeartRateAlertResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHeartRateAlertResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHeartRateAlertResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHeartRateAlertResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHeartRateRecoveryOneMinute struct {
	Source *ClientFacingSource                             `json:"source" url:"source"`
	Data   []*ClientFacingHeartRateRecoveryOneMinuteSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHeartRateRecoveryOneMinute) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedHeartRateRecoveryOneMinute) GetData() []*ClientFacingHeartRateRecoveryOneMinuteSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedHeartRateRecoveryOneMinute) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHeartRateRecoveryOneMinute) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHeartRateRecoveryOneMinute
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHeartRateRecoveryOneMinute(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHeartRateRecoveryOneMinute) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHeartRateRecoveryOneMinuteResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedHeartRateRecoveryOneMinute `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHeartRateRecoveryOneMinuteResponse) GetGroups() map[string][]*GroupedHeartRateRecoveryOneMinute {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedHeartRateRecoveryOneMinuteResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedHeartRateRecoveryOneMinuteResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedHeartRateRecoveryOneMinuteResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHeartRateRecoveryOneMinuteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHeartRateRecoveryOneMinuteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHeartRateRecoveryOneMinuteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHeartRateRecoveryOneMinuteResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHeartRateResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedHeartRate `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHeartRateResponse) GetGroups() map[string][]*GroupedHeartRate {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedHeartRateResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedHeartRateResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedHeartRateResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHeartRateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHeartRateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHeartRateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHeartRateResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHrv struct {
	Source *ClientFacingSource          `json:"source" url:"source"`
	Data   []*ClientFacingHrvTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHrv) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedHrv) GetData() []*ClientFacingHrvTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedHrv) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHrv) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHrv
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHrv(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHrv) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHrvResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedHrv `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHrvResponse) GetGroups() map[string][]*GroupedHrv {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedHrvResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedHrvResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedHrvResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHrvResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHrvResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHrvResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHrvResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHypnogram struct {
	Source *ClientFacingSource                `json:"source" url:"source"`
	Data   []*ClientFacingHypnogramTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHypnogram) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedHypnogram) GetData() []*ClientFacingHypnogramTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedHypnogram) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHypnogram) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHypnogram
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHypnogram(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHypnogram) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedHypnogramResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedHypnogram `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedHypnogramResponse) GetGroups() map[string][]*GroupedHypnogram {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedHypnogramResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedHypnogramResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedHypnogramResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedHypnogramResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedHypnogramResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedHypnogramResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedHypnogramResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedIge struct {
	Source *ClientFacingSource          `json:"source" url:"source"`
	Data   []*ClientFacingIgeTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedIge) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedIge) GetData() []*ClientFacingIgeTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedIge) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedIge) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedIge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedIge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedIge) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedIgeResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedIge `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedIgeResponse) GetGroups() map[string][]*GroupedIge {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedIgeResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedIgeResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedIgeResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedIgeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedIgeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedIgeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedIgeResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedIgg struct {
	Source *ClientFacingSource          `json:"source" url:"source"`
	Data   []*ClientFacingIggTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedIgg) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedIgg) GetData() []*ClientFacingIggTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedIgg) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedIgg) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedIgg
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedIgg(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedIgg) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedIggResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedIgg `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedIggResponse) GetGroups() map[string][]*GroupedIgg {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedIggResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedIggResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedIggResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedIggResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedIggResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedIggResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedIggResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedInhalerUsage struct {
	Source *ClientFacingSource               `json:"source" url:"source"`
	Data   []*ClientFacingInhalerUsageSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedInhalerUsage) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedInhalerUsage) GetData() []*ClientFacingInhalerUsageSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedInhalerUsage) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedInhalerUsage) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedInhalerUsage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedInhalerUsage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedInhalerUsage) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedInhalerUsageResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedInhalerUsage `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedInhalerUsageResponse) GetGroups() map[string][]*GroupedInhalerUsage {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedInhalerUsageResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedInhalerUsageResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedInhalerUsageResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedInhalerUsageResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedInhalerUsageResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedInhalerUsageResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedInhalerUsageResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedInsulinInjection struct {
	Source *ClientFacingSource                   `json:"source" url:"source"`
	Data   []*ClientFacingInsulinInjectionSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedInsulinInjection) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedInsulinInjection) GetData() []*ClientFacingInsulinInjectionSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedInsulinInjection) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedInsulinInjection) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedInsulinInjection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedInsulinInjection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedInsulinInjection) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedInsulinInjectionResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedInsulinInjection `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedInsulinInjectionResponse) GetGroups() map[string][]*GroupedInsulinInjection {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedInsulinInjectionResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedInsulinInjectionResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedInsulinInjectionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedInsulinInjectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedInsulinInjectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedInsulinInjectionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedInsulinInjectionResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedLeanBodyMass struct {
	Source *ClientFacingSource               `json:"source" url:"source"`
	Data   []*ClientFacingLeanBodyMassSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedLeanBodyMass) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedLeanBodyMass) GetData() []*ClientFacingLeanBodyMassSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedLeanBodyMass) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedLeanBodyMass) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedLeanBodyMass
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedLeanBodyMass(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedLeanBodyMass) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedLeanBodyMassResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedLeanBodyMass `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedLeanBodyMassResponse) GetGroups() map[string][]*GroupedLeanBodyMass {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedLeanBodyMassResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedLeanBodyMassResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedLeanBodyMassResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedLeanBodyMassResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedLeanBodyMassResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedLeanBodyMassResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedLeanBodyMassResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedMindfulnessMinutes struct {
	Source *ClientFacingSource                         `json:"source" url:"source"`
	Data   []*ClientFacingMindfulnessMinutesTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedMindfulnessMinutes) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedMindfulnessMinutes) GetData() []*ClientFacingMindfulnessMinutesTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedMindfulnessMinutes) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedMindfulnessMinutes) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedMindfulnessMinutes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedMindfulnessMinutes(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedMindfulnessMinutes) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedMindfulnessMinutesResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedMindfulnessMinutes `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedMindfulnessMinutesResponse) GetGroups() map[string][]*GroupedMindfulnessMinutes {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedMindfulnessMinutesResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedMindfulnessMinutesResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedMindfulnessMinutesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedMindfulnessMinutesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedMindfulnessMinutesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedMindfulnessMinutesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedMindfulnessMinutesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedNote struct {
	Source *ClientFacingSource       `json:"source" url:"source"`
	Data   []*ClientFacingNoteSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedNote) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedNote) GetData() []*ClientFacingNoteSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedNote) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedNote) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedNote
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedNote(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedNote) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedNoteResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedNote `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedNoteResponse) GetGroups() map[string][]*GroupedNote {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedNoteResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedNoteResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedNoteResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedNoteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedNoteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedNoteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedNoteResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedPeakExpiratoryFlowRate struct {
	Source *ClientFacingSource                         `json:"source" url:"source"`
	Data   []*ClientFacingPeakExpiratoryFlowRateSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedPeakExpiratoryFlowRate) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedPeakExpiratoryFlowRate) GetData() []*ClientFacingPeakExpiratoryFlowRateSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedPeakExpiratoryFlowRate) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedPeakExpiratoryFlowRate) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedPeakExpiratoryFlowRate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedPeakExpiratoryFlowRate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedPeakExpiratoryFlowRate) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedPeakExpiratoryFlowRateResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedPeakExpiratoryFlowRate `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedPeakExpiratoryFlowRateResponse) GetGroups() map[string][]*GroupedPeakExpiratoryFlowRate {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedPeakExpiratoryFlowRateResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedPeakExpiratoryFlowRateResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedPeakExpiratoryFlowRateResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedPeakExpiratoryFlowRateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedPeakExpiratoryFlowRateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedPeakExpiratoryFlowRateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedPeakExpiratoryFlowRateResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedRespiratoryRate struct {
	Source *ClientFacingSource                      `json:"source" url:"source"`
	Data   []*ClientFacingRespiratoryRateTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedRespiratoryRate) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedRespiratoryRate) GetData() []*ClientFacingRespiratoryRateTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedRespiratoryRate) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedRespiratoryRate) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedRespiratoryRate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedRespiratoryRate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedRespiratoryRate) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedRespiratoryRateResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedRespiratoryRate `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedRespiratoryRateResponse) GetGroups() map[string][]*GroupedRespiratoryRate {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedRespiratoryRateResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedRespiratoryRateResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedRespiratoryRateResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedRespiratoryRateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedRespiratoryRateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedRespiratoryRateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedRespiratoryRateResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedSleepApneaAlert struct {
	Source *ClientFacingSource                  `json:"source" url:"source"`
	Data   []*ClientFacingSleepApneaAlertSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedSleepApneaAlert) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedSleepApneaAlert) GetData() []*ClientFacingSleepApneaAlertSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedSleepApneaAlert) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedSleepApneaAlert) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedSleepApneaAlert
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedSleepApneaAlert(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedSleepApneaAlert) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedSleepApneaAlertResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedSleepApneaAlert `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedSleepApneaAlertResponse) GetGroups() map[string][]*GroupedSleepApneaAlert {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedSleepApneaAlertResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedSleepApneaAlertResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedSleepApneaAlertResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedSleepApneaAlertResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedSleepApneaAlertResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedSleepApneaAlertResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedSleepApneaAlertResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedSleepBreathingDisturbance struct {
	Source *ClientFacingSource                            `json:"source" url:"source"`
	Data   []*ClientFacingSleepBreathingDisturbanceSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedSleepBreathingDisturbance) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedSleepBreathingDisturbance) GetData() []*ClientFacingSleepBreathingDisturbanceSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedSleepBreathingDisturbance) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedSleepBreathingDisturbance) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedSleepBreathingDisturbance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedSleepBreathingDisturbance(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedSleepBreathingDisturbance) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedSleepBreathingDisturbanceResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedSleepBreathingDisturbance `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedSleepBreathingDisturbanceResponse) GetGroups() map[string][]*GroupedSleepBreathingDisturbance {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedSleepBreathingDisturbanceResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedSleepBreathingDisturbanceResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedSleepBreathingDisturbanceResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedSleepBreathingDisturbanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedSleepBreathingDisturbanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedSleepBreathingDisturbanceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedSleepBreathingDisturbanceResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedStandDuration struct {
	Source *ClientFacingSource                `json:"source" url:"source"`
	Data   []*ClientFacingStandDurationSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedStandDuration) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedStandDuration) GetData() []*ClientFacingStandDurationSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedStandDuration) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedStandDuration) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedStandDuration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedStandDuration(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedStandDuration) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedStandDurationResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedStandDuration `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedStandDurationResponse) GetGroups() map[string][]*GroupedStandDuration {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedStandDurationResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedStandDurationResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedStandDurationResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedStandDurationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedStandDurationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedStandDurationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedStandDurationResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedStandHour struct {
	Source *ClientFacingSource            `json:"source" url:"source"`
	Data   []*ClientFacingStandHourSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedStandHour) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedStandHour) GetData() []*ClientFacingStandHourSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedStandHour) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedStandHour) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedStandHour
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedStandHour(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedStandHour) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedStandHourResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedStandHour `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedStandHourResponse) GetGroups() map[string][]*GroupedStandHour {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedStandHourResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedStandHourResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedStandHourResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedStandHourResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedStandHourResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedStandHourResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedStandHourResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedSteps struct {
	Source *ClientFacingSource            `json:"source" url:"source"`
	Data   []*ClientFacingStepsTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedSteps) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedSteps) GetData() []*ClientFacingStepsTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedSteps) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedSteps) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedSteps
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedSteps(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedSteps) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedStepsResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedSteps `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedStepsResponse) GetGroups() map[string][]*GroupedSteps {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedStepsResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedStepsResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedStepsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedStepsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedStepsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedStepsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedStepsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedStressLevel struct {
	Source *ClientFacingSource                  `json:"source" url:"source"`
	Data   []*ClientFacingStressLevelTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedStressLevel) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedStressLevel) GetData() []*ClientFacingStressLevelTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedStressLevel) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedStressLevel) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedStressLevel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedStressLevel(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedStressLevel) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedStressLevelResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedStressLevel `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedStressLevelResponse) GetGroups() map[string][]*GroupedStressLevel {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedStressLevelResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedStressLevelResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedStressLevelResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedStressLevelResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedStressLevelResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedStressLevelResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedStressLevelResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedUvExposure struct {
	Source *ClientFacingSource             `json:"source" url:"source"`
	Data   []*ClientFacingUvExposureSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedUvExposure) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedUvExposure) GetData() []*ClientFacingUvExposureSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedUvExposure) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedUvExposure) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedUvExposure
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedUvExposure(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedUvExposure) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedUvExposureResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedUvExposure `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedUvExposureResponse) GetGroups() map[string][]*GroupedUvExposure {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedUvExposureResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedUvExposureResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedUvExposureResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedUvExposureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedUvExposureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedUvExposureResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedUvExposureResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedVo2Max struct {
	Source *ClientFacingSource             `json:"source" url:"source"`
	Data   []*ClientFacingVo2MaxTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedVo2Max) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedVo2Max) GetData() []*ClientFacingVo2MaxTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedVo2Max) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedVo2Max) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedVo2Max
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedVo2Max(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedVo2Max) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedVo2MaxResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedVo2Max `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedVo2MaxResponse) GetGroups() map[string][]*GroupedVo2Max {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedVo2MaxResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedVo2MaxResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedVo2MaxResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedVo2MaxResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedVo2MaxResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedVo2MaxResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedVo2MaxResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWaistCircumference struct {
	Source *ClientFacingSource                     `json:"source" url:"source"`
	Data   []*ClientFacingWaistCircumferenceSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWaistCircumference) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedWaistCircumference) GetData() []*ClientFacingWaistCircumferenceSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedWaistCircumference) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWaistCircumference) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWaistCircumference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWaistCircumference(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWaistCircumference) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWaistCircumferenceResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedWaistCircumference `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWaistCircumferenceResponse) GetGroups() map[string][]*GroupedWaistCircumference {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedWaistCircumferenceResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedWaistCircumferenceResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedWaistCircumferenceResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWaistCircumferenceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWaistCircumferenceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWaistCircumferenceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWaistCircumferenceResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWater struct {
	Source *ClientFacingSource            `json:"source" url:"source"`
	Data   []*ClientFacingWaterTimeseries `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWater) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedWater) GetData() []*ClientFacingWaterTimeseries {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedWater) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWater) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWater
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWater(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWater) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWaterResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedWater `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWaterResponse) GetGroups() map[string][]*GroupedWater {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedWaterResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedWaterResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedWaterResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWaterResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWaterResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWaterResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWaterResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWheelchairPush struct {
	Source *ClientFacingSource                 `json:"source" url:"source"`
	Data   []*ClientFacingWheelchairPushSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWheelchairPush) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedWheelchairPush) GetData() []*ClientFacingWheelchairPushSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedWheelchairPush) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWheelchairPush) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWheelchairPush
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWheelchairPush(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWheelchairPush) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWheelchairPushResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedWheelchairPush `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWheelchairPushResponse) GetGroups() map[string][]*GroupedWheelchairPush {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedWheelchairPushResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedWheelchairPushResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedWheelchairPushResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWheelchairPushResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWheelchairPushResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWheelchairPushResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWheelchairPushResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWorkoutDistance struct {
	Source *ClientFacingSource                  `json:"source" url:"source"`
	Data   []*ClientFacingWorkoutDistanceSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWorkoutDistance) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedWorkoutDistance) GetData() []*ClientFacingWorkoutDistanceSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedWorkoutDistance) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWorkoutDistance) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWorkoutDistance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWorkoutDistance(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWorkoutDistance) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWorkoutDistanceResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedWorkoutDistance `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWorkoutDistanceResponse) GetGroups() map[string][]*GroupedWorkoutDistance {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedWorkoutDistanceResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedWorkoutDistanceResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedWorkoutDistanceResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWorkoutDistanceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWorkoutDistanceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWorkoutDistanceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWorkoutDistanceResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWorkoutDuration struct {
	Source *ClientFacingSource                  `json:"source" url:"source"`
	Data   []*ClientFacingWorkoutDurationSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWorkoutDuration) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedWorkoutDuration) GetData() []*ClientFacingWorkoutDurationSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedWorkoutDuration) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWorkoutDuration) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWorkoutDuration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWorkoutDuration(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWorkoutDuration) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWorkoutDurationResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedWorkoutDuration `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWorkoutDurationResponse) GetGroups() map[string][]*GroupedWorkoutDuration {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedWorkoutDurationResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedWorkoutDurationResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedWorkoutDurationResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWorkoutDurationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWorkoutDurationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWorkoutDurationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWorkoutDurationResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWorkoutSwimmingStroke struct {
	Source *ClientFacingSource                        `json:"source" url:"source"`
	Data   []*ClientFacingWorkoutSwimmingStrokeSample `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWorkoutSwimmingStroke) GetSource() *ClientFacingSource {
	if g == nil {
		return nil
	}
	return g.Source
}

func (g *GroupedWorkoutSwimmingStroke) GetData() []*ClientFacingWorkoutSwimmingStrokeSample {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GroupedWorkoutSwimmingStroke) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWorkoutSwimmingStroke) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWorkoutSwimmingStroke
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWorkoutSwimmingStroke(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWorkoutSwimmingStroke) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedWorkoutSwimmingStrokeResponse struct {
	// For each matching provider or lab, a list of grouped timeseries values.
	Groups map[string][]*GroupedWorkoutSwimmingStroke `json:"groups" url:"groups"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	Next *string `json:"next,omitempty" url:"next,omitempty"`
	// The cursor for fetching the next page, or `null` if there is no more data.
	NextCursor *string `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedWorkoutSwimmingStrokeResponse) GetGroups() map[string][]*GroupedWorkoutSwimmingStroke {
	if g == nil {
		return nil
	}
	return g.Groups
}

func (g *GroupedWorkoutSwimmingStrokeResponse) GetNext() *string {
	if g == nil {
		return nil
	}
	return g.Next
}

func (g *GroupedWorkoutSwimmingStrokeResponse) GetNextCursor() *string {
	if g == nil {
		return nil
	}
	return g.NextCursor
}

func (g *GroupedWorkoutSwimmingStrokeResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedWorkoutSwimmingStrokeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedWorkoutSwimmingStrokeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedWorkoutSwimmingStrokeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedWorkoutSwimmingStrokeResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type VitalsUvExposureGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsVo2MaxRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsVo2MaxGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsWaistCircumferenceGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsWaterRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsWaterGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsWheelchairPushGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsWorkoutDistanceGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsWorkoutDurationGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}

type VitalsWorkoutSwimmingStrokeGroupedRequest struct {
	// The cursor for fetching the next page, or `null` to fetch the first page.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The cursor for fetching the next page, or `null` to fetch the first page.
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate string `json:"-" url:"start_date"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *string `json:"-" url:"end_date,omitempty"`
}
