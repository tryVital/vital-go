// Code generated by Fern. DO NOT EDIT.

package user

import (
	context "context"
	vital "github.com/tryVital/vital-go"
	core "github.com/tryVital/vital-go/core"
	internal "github.com/tryVital/vital-go/internal"
	option "github.com/tryVital/vital-go/option"
	http "net/http"
)

type RawClient struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewRawClient(options *core.RequestOptions) *RawClient {
	return &RawClient{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (r *RawClient) GetAll(
	ctx context.Context,
	request *vital.UserGetAllRequest,
	opts ...option.RequestOption,
) (*core.Response[*vital.PaginatedUsersResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := baseURL + "/v2/user"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.PaginatedUsersResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.PaginatedUsersResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Create(
	ctx context.Context,
	request *vital.UserCreateBody,
	opts ...option.RequestOption,
) (*core.Response[*vital.ClientFacingUserKey], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := baseURL + "/v2/user"
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &vital.BadRequestError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.ClientFacingUserKey
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.ClientFacingUserKey]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetTeamMetrics(
	ctx context.Context,
	opts ...option.RequestOption,
) (*core.Response[*vital.MetricsResult], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := baseURL + "/v2/user/metrics"
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	var response *vital.MetricsResult
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.MetricsResult]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetUserSignInToken(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*core.Response[*vital.UserSignInTokenResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/%v/sign_in_token",
		userId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.UserSignInTokenResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.UserSignInTokenResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetConnectedProviders(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*core.Response[map[string][]*vital.ClientFacingProviderWithStatus], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/providers/%v",
		userId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response map[string][]*vital.ClientFacingProviderWithStatus
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[map[string][]*vital.ClientFacingProviderWithStatus]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Get(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*core.Response[*vital.ClientFacingUser], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/%v",
		userId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.ClientFacingUser
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.ClientFacingUser]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Delete(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*core.Response[*vital.UserSuccessResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/%v",
		userId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.UserSuccessResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.UserSuccessResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Patch(
	ctx context.Context,
	userId string,
	request *vital.UserPatchBody,
	opts ...option.RequestOption,
) (*core.Response[any], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/%v",
		userId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[any]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       nil,
	}, nil
}

func (r *RawClient) GetLatestUserInfo(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*core.Response[*vital.UserInfo], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/%v/info/latest",
		userId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.UserInfo
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.UserInfo]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) CreateInsurance(
	ctx context.Context,
	userId string,
	request *vital.CreateInsuranceRequest,
	opts ...option.RequestOption,
) (*core.Response[*vital.ClientFacingInsurance], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/%v/insurance",
		userId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.ClientFacingInsurance
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.ClientFacingInsurance]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetLatestInsurance(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*core.Response[*vital.ClientFacingInsurance], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/%v/insurance/latest",
		userId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.ClientFacingInsurance
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.ClientFacingInsurance]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) UpsertUserInfo(
	ctx context.Context,
	userId string,
	request *vital.UserInfoCreateRequest,
	opts ...option.RequestOption,
) (*core.Response[*vital.UserInfo], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/%v/info",
		userId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	headers.Add("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.UserInfo
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.UserInfo]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) GetByClientUserId(
	ctx context.Context,
	// A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
	clientUserId string,
	opts ...option.RequestOption,
) (*core.Response[*vital.ClientFacingUser], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/resolve/%v",
		clientUserId,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.ClientFacingUser
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.ClientFacingUser]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) DeregisterProvider(
	ctx context.Context,
	userId string,
	// Provider slug. e.g., `oura`, `fitbit`, `garmin`.
	provider *vital.Providers,
	opts ...option.RequestOption,
) (*core.Response[*vital.UserSuccessResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/%v/%v",
		userId,
		provider,
	)
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.UserSuccessResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.UserSuccessResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) UndoDelete(
	ctx context.Context,
	request *vital.UserUndoDeleteRequest,
	opts ...option.RequestOption,
) (*core.Response[*vital.UserSuccessResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := baseURL + "/v2/user/undo_delete"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.UserSuccessResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.UserSuccessResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}

func (r *RawClient) Refresh(
	ctx context.Context,
	userId string,
	request *vital.UserRefreshRequest,
	opts ...option.RequestOption,
) (*core.Response[*vital.UserRefreshSuccessResponse], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		r.baseURL,
		"https://api.tryvital.io",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/user/refresh/%v",
		userId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		r.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &vital.BadRequestError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &vital.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}
	var response *vital.UserRefreshSuccessResponse
	raw, err := r.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	)
	if err != nil {
		return nil, err
	}
	return &core.Response[*vital.UserRefreshSuccessResponse]{
		StatusCode: raw.StatusCode,
		Header:     raw.Header,
		Body:       response,
	}, nil
}
