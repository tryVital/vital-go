// Code generated by Fern. DO NOT EDIT.

package user

import (
	context "context"
	vital "github.com/tryVital/vital-go"
	core "github.com/tryVital/vital-go/core"
	internal "github.com/tryVital/vital-go/internal"
	option "github.com/tryVital/vital-go/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// GET All users for team.
func (c *Client) GetAll(
	ctx context.Context,
	request *vital.UserGetAllRequest,
	opts ...option.RequestOption,
) (*vital.PaginatedUsersResponse, error) {
	response, err := c.WithRawResponse.GetAll(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// POST Create a Vital user given a client_user_id and returns the user_id.
func (c *Client) Create(
	ctx context.Context,
	request *vital.UserCreateBody,
	opts ...option.RequestOption,
) (*vital.ClientFacingUserKey, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET metrics for team.
func (c *Client) GetTeamMetrics(
	ctx context.Context,
	opts ...option.RequestOption,
) (*vital.MetricsResult, error) {
	response, err := c.WithRawResponse.GetTeamMetrics(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetUserSignInToken(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*vital.UserSignInTokenResponse, error) {
	response, err := c.WithRawResponse.GetUserSignInToken(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET Users connected providers
func (c *Client) GetConnectedProviders(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (map[string][]*vital.ClientFacingProviderWithStatus, error) {
	response, err := c.WithRawResponse.GetConnectedProviders(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET User details given the user_id.
func (c *Client) Get(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*vital.ClientFacingUser, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Delete(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*vital.UserSuccessResponse, error) {
	response, err := c.WithRawResponse.Delete(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Patch(
	ctx context.Context,
	userId string,
	request *vital.UserPatchBody,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Patch(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

func (c *Client) GetLatestUserInfo(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*vital.UserInfo, error) {
	response, err := c.WithRawResponse.GetLatestUserInfo(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CreateInsurance(
	ctx context.Context,
	userId string,
	request *vital.CreateInsuranceRequest,
	opts ...option.RequestOption,
) (*vital.ClientFacingInsurance, error) {
	response, err := c.WithRawResponse.CreateInsurance(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetLatestInsurance(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) (*vital.ClientFacingInsurance, error) {
	response, err := c.WithRawResponse.GetLatestInsurance(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) UpsertUserInfo(
	ctx context.Context,
	userId string,
	request *vital.UserInfoCreateRequest,
	opts ...option.RequestOption,
) (*vital.UserInfo, error) {
	response, err := c.WithRawResponse.UpsertUserInfo(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// GET user_id from client_user_id.
func (c *Client) GetByClientUserId(
	ctx context.Context,
	// A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
	clientUserId string,
	opts ...option.RequestOption,
) (*vital.ClientFacingUser, error) {
	response, err := c.WithRawResponse.GetByClientUserId(
		ctx,
		clientUserId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) DeregisterProvider(
	ctx context.Context,
	userId string,
	// Provider slug. e.g., `oura`, `fitbit`, `garmin`.
	provider *vital.Providers,
	opts ...option.RequestOption,
) (*vital.UserSuccessResponse, error) {
	response, err := c.WithRawResponse.DeregisterProvider(
		ctx,
		userId,
		provider,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) UndoDelete(
	ctx context.Context,
	request *vital.UserUndoDeleteRequest,
	opts ...option.RequestOption,
) (*vital.UserSuccessResponse, error) {
	response, err := c.WithRawResponse.UndoDelete(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Trigger a manual refresh for a specific user
func (c *Client) Refresh(
	ctx context.Context,
	userId string,
	request *vital.UserRefreshRequest,
	opts ...option.RequestOption,
) (*vital.UserRefreshSuccessResponse, error) {
	response, err := c.WithRawResponse.Refresh(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
