// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	time "time"
)

type ApiApiV1EndpointsVitalApiLabTestingOrdersHelpersAppointmentCancelRequest struct {
	CancellationReasonId string  `json:"cancellation_reason_id" url:"-"`
	Notes                *string `json:"notes,omitempty" url:"-"`
}

type VitalCoreClientsLabTestGetlabsSchemaAppointmentCancelRequest struct {
	CancellationReasonId string  `json:"cancellationReasonId" url:"-"`
	Note                 *string `json:"note,omitempty" url:"-"`
}

type CreateLabTestRequest struct {
	MarkerIds   []int                   `json:"marker_ids,omitempty" url:"-"`
	ProviderIds []string                `json:"provider_ids,omitempty" url:"-"`
	Name        string                  `json:"name" url:"-"`
	Method      LabTestCollectionMethod `json:"method" url:"-"`
	Description string                  `json:"description" url:"-"`
	Fasting     *bool                   `json:"fasting,omitempty" url:"-"`
}

type CreateOrderRequestCompatible struct {
	UserId           string                        `json:"user_id" url:"-"`
	LabTestId        *string                       `json:"lab_test_id,omitempty" url:"-"`
	OrderSet         *OrderSetRequest              `json:"order_set,omitempty" url:"-"`
	CollectionMethod *LabTestCollectionMethod      `json:"collection_method,omitempty" url:"-"`
	Physician        *PhysicianCreateRequest       `json:"physician,omitempty" url:"-"`
	HealthInsurance  *HealthInsuranceCreateRequest `json:"health_insurance,omitempty" url:"-"`
	// Defines whether order is priority or not. For some labs, this refers to a STAT order.
	Priority    *bool      `json:"priority,omitempty" url:"-"`
	BillingType *Billing   `json:"billing_type,omitempty" url:"-"`
	IcdCodes    []string   `json:"icd_codes,omitempty" url:"-"`
	Consents    []*Consent `json:"consents,omitempty" url:"-"`
	// Schedule an Order to be processed in a future date.
	ActivateBy     *string                       `json:"activate_by,omitempty" url:"-"`
	AoeAnswers     []*AoEAnswer                  `json:"aoe_answers,omitempty" url:"-"`
	Passthrough    *string                       `json:"passthrough,omitempty" url:"-"`
	PatientDetails *PatientDetailsWithValidation `json:"patient_details,omitempty" url:"-"`
	PatientAddress *PatientAddressWithValidation `json:"patient_address,omitempty" url:"-"`
}

type LabTestsGetRequest struct {
	// Filter on whether auto-generated lab tests created by Vital, manually created lab tests, or all lab tests should be returned.
	GenerationMethod *LabTestGenerationMethodFilter `json:"-" url:"generation_method,omitempty"`
	// Filter by the slug of the lab for these lab tests.
	LabSlug *string `json:"-" url:"lab_slug,omitempty"`
	// Filter by the collection method for these lab tests.
	CollectionMethod *LabTestCollectionMethod `json:"-" url:"collection_method,omitempty"`
	// Filter by the status of these lab tests.
	Status *LabTestStatus `json:"-" url:"status,omitempty"`
	// Filter to only include lab tests containing these marker IDs.
	MarkerIds []*int `json:"-" url:"marker_ids,omitempty"`
	// Filter to only include lab tests containing these provider IDs.
	ProviderIds []*string `json:"-" url:"provider_ids,omitempty"`
	// Filter by the name of the lab test (a case-insensitive substring search).
	Name           *string                           `json:"-" url:"name,omitempty"`
	OrderKey       *LabTestsGetRequestOrderKey       `json:"-" url:"order_key,omitempty"`
	OrderDirection *LabTestsGetRequestOrderDirection `json:"-" url:"order_direction,omitempty"`
}

type LabTestsGetAreaInfoRequest struct {
	// Zip code of the area to check
	ZipCode string `json:"-" url:"zip_code"`
	// Radius in which to search in miles
	Radius *AllowedRadius `json:"-" url:"radius,omitempty"`
	// Lab to check for PSCs
	Lab *ClientFacingLabs `json:"-" url:"lab,omitempty"`
}

type LabTestsGetLabelsPdfRequest struct {
	// Number of labels to generate
	NumberOfLabels *int `json:"-" url:"number_of_labels,omitempty"`
	// Collection date
	CollectionDate time.Time `json:"-" url:"collection_date"`
}

type LabTestsGetMarkersRequest struct {
	// The identifier Vital assigned to a lab partner.
	LabId []*int `json:"-" url:"lab_id,omitempty"`
	// The name or test code of an individual biomarker or a panel.
	Name            *string `json:"-" url:"name,omitempty"`
	ALaCarteEnabled *bool   `json:"-" url:"a_la_carte_enabled,omitempty"`
	Page            *int    `json:"-" url:"page,omitempty"`
	Size            *int    `json:"-" url:"size,omitempty"`
}

type LabTestsGetMarkersForLabTestRequest struct {
	Page *int `json:"-" url:"page,omitempty"`
	Size *int `json:"-" url:"size,omitempty"`
}

type LabTestsGetMarkersForOrderSetRequest struct {
	Page *int             `json:"-" url:"page,omitempty"`
	Size *int             `json:"-" url:"size,omitempty"`
	Body *OrderSetRequest `json:"-" url:"-"`
}

func (l *LabTestsGetMarkersForOrderSetRequest) UnmarshalJSON(data []byte) error {
	body := new(OrderSetRequest)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	l.Body = body
	return nil
}

func (l *LabTestsGetMarkersForOrderSetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(l.Body)
}

type LabTestsGetOrderPscInfoRequest struct {
	// Radius in which to search in miles
	Radius *AllowedRadius `json:"-" url:"radius,omitempty"`
}

type LabTestsGetOrdersRequest struct {
	// Search by order id, user id, patient name, shipping dob, or shipping recipient name.
	SearchInput *string `json:"-" url:"search_input,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	StartDate *time.Time `json:"-" url:"start_date,omitempty"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 23:59:59
	EndDate *time.Time `json:"-" url:"end_date,omitempty"`
	// Date from in YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	UpdatedStartDate *time.Time `json:"-" url:"updated_start_date,omitempty"`
	// Date to YYYY-MM-DD or ISO formatted date time. If a date is provided without a time, the time will be set to 00:00:00
	UpdatedEndDate *time.Time                              `json:"-" url:"updated_end_date,omitempty"`
	OrderKey       *LabTestsGetOrdersRequestOrderKey       `json:"-" url:"order_key,omitempty"`
	OrderDirection *LabTestsGetOrdersRequestOrderDirection `json:"-" url:"order_direction,omitempty"`
	// Filter by user ID.
	UserId *string `json:"-" url:"user_id,omitempty"`
	// Filter by patient name.
	PatientName *string `json:"-" url:"patient_name,omitempty"`
	// Filter by shipping recipient name.
	ShippingRecipientName *string `json:"-" url:"shipping_recipient_name,omitempty"`
	// Filter by order ids.
	OrderIds []*string `json:"-" url:"order_ids,omitempty"`
	Page     *int      `json:"-" url:"page,omitempty"`
	Size     *int      `json:"-" url:"size,omitempty"`
}

type LabTestsGetPhlebotomyAppointmentAvailabilityRequest struct {
	// Start date for appointment availability
	StartDate *string    `json:"-" url:"start_date,omitempty"`
	Body      *UsAddress `json:"-" url:"-"`
}

func (l *LabTestsGetPhlebotomyAppointmentAvailabilityRequest) UnmarshalJSON(data []byte) error {
	body := new(UsAddress)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	l.Body = body
	return nil
}

func (l *LabTestsGetPhlebotomyAppointmentAvailabilityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(l.Body)
}

type LabTestsGetPscAppointmentAvailabilityRequest struct {
	// Lab to check for availability
	Lab AppointmentPscLabs `json:"-" url:"lab,omitempty"`
	// Start date for appointment availability
	StartDate *string `json:"-" url:"start_date,omitempty"`
	// List of site codes to fetch availability for
	SiteCodes []*string `json:"-" url:"site_codes,omitempty"`
	// Zip code of the area to check
	ZipCode *string `json:"-" url:"zip_code,omitempty"`
	// Radius in which to search. (meters)
	Radius *AllowedRadius `json:"-" url:"radius,omitempty"`
}

type LabTestsGetPscInfoRequest struct {
	// Zip code of the area to check
	ZipCode string `json:"-" url:"zip_code"`
	// Lab ID to check for PSCs
	LabId int `json:"-" url:"lab_id"`
	// Radius in which to search in miles
	Radius *AllowedRadius `json:"-" url:"radius,omitempty"`
}

type RequestAppointmentRequest struct {
	// At-home phlebotomy appointment address.
	Address  *UsAddress          `json:"address,omitempty" url:"-"`
	Provider AppointmentProvider `json:"provider" url:"-"`
}

type LabTestsSimulateOrderProcessRequest struct {
	FinalStatus *OrderStatus `json:"-" url:"final_status,omitempty"`
	Delay       *int         `json:"-" url:"delay,omitempty"`
}

type LabTestsGetOrdersRequestOrderDirection string

const (
	LabTestsGetOrdersRequestOrderDirectionAsc  LabTestsGetOrdersRequestOrderDirection = "asc"
	LabTestsGetOrdersRequestOrderDirectionDesc LabTestsGetOrdersRequestOrderDirection = "desc"
)

func NewLabTestsGetOrdersRequestOrderDirectionFromString(s string) (LabTestsGetOrdersRequestOrderDirection, error) {
	switch s {
	case "asc":
		return LabTestsGetOrdersRequestOrderDirectionAsc, nil
	case "desc":
		return LabTestsGetOrdersRequestOrderDirectionDesc, nil
	}
	var t LabTestsGetOrdersRequestOrderDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LabTestsGetOrdersRequestOrderDirection) Ptr() *LabTestsGetOrdersRequestOrderDirection {
	return &l
}

type LabTestsGetOrdersRequestOrderKey string

const (
	LabTestsGetOrdersRequestOrderKeyCreatedAt   LabTestsGetOrdersRequestOrderKey = "created_at"
	LabTestsGetOrdersRequestOrderKeyPatientName LabTestsGetOrdersRequestOrderKey = "patient_name"
	LabTestsGetOrdersRequestOrderKeyLastStatus  LabTestsGetOrdersRequestOrderKey = "last_status"
)

func NewLabTestsGetOrdersRequestOrderKeyFromString(s string) (LabTestsGetOrdersRequestOrderKey, error) {
	switch s {
	case "created_at":
		return LabTestsGetOrdersRequestOrderKeyCreatedAt, nil
	case "patient_name":
		return LabTestsGetOrdersRequestOrderKeyPatientName, nil
	case "last_status":
		return LabTestsGetOrdersRequestOrderKeyLastStatus, nil
	}
	var t LabTestsGetOrdersRequestOrderKey
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LabTestsGetOrdersRequestOrderKey) Ptr() *LabTestsGetOrdersRequestOrderKey {
	return &l
}

type LabTestsGetRequestOrderDirection string

const (
	LabTestsGetRequestOrderDirectionAsc  LabTestsGetRequestOrderDirection = "asc"
	LabTestsGetRequestOrderDirectionDesc LabTestsGetRequestOrderDirection = "desc"
)

func NewLabTestsGetRequestOrderDirectionFromString(s string) (LabTestsGetRequestOrderDirection, error) {
	switch s {
	case "asc":
		return LabTestsGetRequestOrderDirectionAsc, nil
	case "desc":
		return LabTestsGetRequestOrderDirectionDesc, nil
	}
	var t LabTestsGetRequestOrderDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LabTestsGetRequestOrderDirection) Ptr() *LabTestsGetRequestOrderDirection {
	return &l
}

type LabTestsGetRequestOrderKey string

const (
	LabTestsGetRequestOrderKeyPrice     LabTestsGetRequestOrderKey = "price"
	LabTestsGetRequestOrderKeyCreatedAt LabTestsGetRequestOrderKey = "created_at"
	LabTestsGetRequestOrderKeyUpdatedAt LabTestsGetRequestOrderKey = "updated_at"
)

func NewLabTestsGetRequestOrderKeyFromString(s string) (LabTestsGetRequestOrderKey, error) {
	switch s {
	case "price":
		return LabTestsGetRequestOrderKeyPrice, nil
	case "created_at":
		return LabTestsGetRequestOrderKeyCreatedAt, nil
	case "updated_at":
		return LabTestsGetRequestOrderKeyUpdatedAt, nil
	}
	var t LabTestsGetRequestOrderKey
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LabTestsGetRequestOrderKey) Ptr() *LabTestsGetRequestOrderKey {
	return &l
}

type UpdateLabTestRequest struct {
	Name   *string `json:"name,omitempty" url:"-"`
	Active *bool   `json:"active,omitempty" url:"-"`
}
