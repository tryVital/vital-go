// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tryVital/vital-go/internal"
)

type DevicesGetRawRequest struct {
	// Provider oura/strava etc
	Provider *string `json:"-" url:"provider,omitempty"`
}

type DeviceV2InDb struct {
	Data       map[string]interface{} `json:"data" url:"data"`
	ProviderId string                 `json:"provider_id" url:"provider_id"`
	UserId     string                 `json:"user_id" url:"user_id"`
	SourceId   int                    `json:"source_id" url:"source_id"`
	Id         string                 `json:"id" url:"id"`
	Source     *ClientFacingProvider  `json:"source" url:"source"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeviceV2InDb) GetData() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeviceV2InDb) GetProviderId() string {
	if d == nil {
		return ""
	}
	return d.ProviderId
}

func (d *DeviceV2InDb) GetUserId() string {
	if d == nil {
		return ""
	}
	return d.UserId
}

func (d *DeviceV2InDb) GetSourceId() int {
	if d == nil {
		return 0
	}
	return d.SourceId
}

func (d *DeviceV2InDb) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *DeviceV2InDb) GetSource() *ClientFacingProvider {
	if d == nil {
		return nil
	}
	return d.Source
}

func (d *DeviceV2InDb) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeviceV2InDb) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceV2InDb
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceV2InDb(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceV2InDb) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type RawDevices struct {
	Devices []*DeviceV2InDb `json:"devices" url:"devices"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RawDevices) GetDevices() []*DeviceV2InDb {
	if r == nil {
		return nil
	}
	return r.Devices
}

func (r *RawDevices) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawDevices) UnmarshalJSON(data []byte) error {
	type unmarshaler RawDevices
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawDevices(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawDevices) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
