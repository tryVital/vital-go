// Code generated by Fern. DO NOT EDIT.

package vitals

import (
	context "context"
	vital "github.com/tryVital/vital-go"
	core "github.com/tryVital/vital-go/core"
	internal "github.com/tryVital/vital-go/internal"
	option "github.com/tryVital/vital-go/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) WorkoutSwimmingStrokeGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsWorkoutSwimmingStrokeGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedWorkoutSwimmingStrokeResponse, error) {
	response, err := c.WithRawResponse.WorkoutSwimmingStrokeGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) WorkoutDistanceGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsWorkoutDistanceGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedWorkoutDistanceResponse, error) {
	response, err := c.WithRawResponse.WorkoutDistanceGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) HeartRateRecoveryOneMinuteGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsHeartRateRecoveryOneMinuteGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedHeartRateRecoveryOneMinuteResponse, error) {
	response, err := c.WithRawResponse.HeartRateRecoveryOneMinuteGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) WaistCircumferenceGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsWaistCircumferenceGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedWaistCircumferenceResponse, error) {
	response, err := c.WithRawResponse.WaistCircumferenceGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) LeanBodyMassGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsLeanBodyMassGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedLeanBodyMassResponse, error) {
	response, err := c.WithRawResponse.LeanBodyMassGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BodyMassIndexGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsBodyMassIndexGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedBodyMassIndexResponse, error) {
	response, err := c.WithRawResponse.BodyMassIndexGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BasalBodyTemperatureGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsBasalBodyTemperatureGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedBasalBodyTemperatureResponse, error) {
	response, err := c.WithRawResponse.BasalBodyTemperatureGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) HandwashingGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsHandwashingGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedHandwashingResponse, error) {
	response, err := c.WithRawResponse.HandwashingGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) DaylightExposureGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsDaylightExposureGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedDaylightExposureResponse, error) {
	response, err := c.WithRawResponse.DaylightExposureGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) UvExposureGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsUvExposureGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedUvExposureResponse, error) {
	response, err := c.WithRawResponse.UvExposureGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) FallGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsFallGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedFallResponse, error) {
	response, err := c.WithRawResponse.FallGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) InhalerUsageGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsInhalerUsageGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedInhalerUsageResponse, error) {
	response, err := c.WithRawResponse.InhalerUsageGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) PeakExpiratoryFlowRateGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsPeakExpiratoryFlowRateGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedPeakExpiratoryFlowRateResponse, error) {
	response, err := c.WithRawResponse.PeakExpiratoryFlowRateGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ForcedVitalCapacityGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsForcedVitalCapacityGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedForcedVitalCapacityResponse, error) {
	response, err := c.WithRawResponse.ForcedVitalCapacityGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ForcedExpiratoryVolume1Grouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsForcedExpiratoryVolume1GroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedForcedExpiratoryVolume1Response, error) {
	response, err := c.WithRawResponse.ForcedExpiratoryVolume1Grouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) WheelchairPushGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsWheelchairPushGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedWheelchairPushResponse, error) {
	response, err := c.WithRawResponse.WheelchairPushGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) SleepBreathingDisturbanceGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsSleepBreathingDisturbanceGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedSleepBreathingDisturbanceResponse, error) {
	response, err := c.WithRawResponse.SleepBreathingDisturbanceGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) SleepApneaAlertGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsSleepApneaAlertGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedSleepApneaAlertResponse, error) {
	response, err := c.WithRawResponse.SleepApneaAlertGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) StandDurationGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsStandDurationGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedStandDurationResponse, error) {
	response, err := c.WithRawResponse.StandDurationGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) StandHourGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsStandHourGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedStandHourResponse, error) {
	response, err := c.WithRawResponse.StandHourGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) HeartRateAlertGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsHeartRateAlertGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedHeartRateAlertResponse, error) {
	response, err := c.WithRawResponse.HeartRateAlertGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) AfibBurdenGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsAfibBurdenGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedAFibBurdenResponse, error) {
	response, err := c.WithRawResponse.AfibBurdenGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) WorkoutDurationGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsWorkoutDurationGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedWorkoutDurationResponse, error) {
	response, err := c.WithRawResponse.WorkoutDurationGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Vo2MaxGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsVo2MaxGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedVo2MaxResponse, error) {
	response, err := c.WithRawResponse.Vo2MaxGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) StressLevelGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsStressLevelGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedStressLevelResponse, error) {
	response, err := c.WithRawResponse.StressLevelGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) MindfulnessMinutesGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsMindfulnessMinutesGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedMindfulnessMinutesResponse, error) {
	response, err := c.WithRawResponse.MindfulnessMinutesGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CaffeineGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsCaffeineGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedCaffeineResponse, error) {
	response, err := c.WithRawResponse.CaffeineGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) WaterGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsWaterGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedWaterResponse, error) {
	response, err := c.WithRawResponse.WaterGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) StepsGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsStepsGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedStepsResponse, error) {
	response, err := c.WithRawResponse.StepsGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) FloorsClimbedGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsFloorsClimbedGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedFloorsClimbedResponse, error) {
	response, err := c.WithRawResponse.FloorsClimbedGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) DistanceGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsDistanceGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedDistanceResponse, error) {
	response, err := c.WithRawResponse.DistanceGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CaloriesBasalGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsCaloriesBasalGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedCaloriesBasalResponse, error) {
	response, err := c.WithRawResponse.CaloriesBasalGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CaloriesActiveGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsCaloriesActiveGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedCaloriesActiveResponse, error) {
	response, err := c.WithRawResponse.CaloriesActiveGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) RespiratoryRateGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsRespiratoryRateGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedRespiratoryRateResponse, error) {
	response, err := c.WithRawResponse.RespiratoryRateGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) NoteGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsNoteGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedNoteResponse, error) {
	response, err := c.WithRawResponse.NoteGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) InsulinInjectionGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsInsulinInjectionGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedInsulinInjectionResponse, error) {
	response, err := c.WithRawResponse.InsulinInjectionGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) IgeGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsIgeGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedIgeResponse, error) {
	response, err := c.WithRawResponse.IgeGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) IggGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsIggGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedIggResponse, error) {
	response, err := c.WithRawResponse.IggGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) HypnogramGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsHypnogramGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedHypnogramResponse, error) {
	response, err := c.WithRawResponse.HypnogramGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) HrvGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsHrvGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedHrvResponse, error) {
	response, err := c.WithRawResponse.HrvGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) HeartrateGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsHeartrateGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedHeartRateResponse, error) {
	response, err := c.WithRawResponse.HeartrateGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GlucoseGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsGlucoseGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedGlucoseResponse, error) {
	response, err := c.WithRawResponse.GlucoseGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CholesterolGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsCholesterolGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedCholesterolResponse, error) {
	response, err := c.WithRawResponse.CholesterolGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CarbohydratesGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsCarbohydratesGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedCarbohydratesResponse, error) {
	response, err := c.WithRawResponse.CarbohydratesGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BodyTemperatureDeltaGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsBodyTemperatureDeltaGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedBodyTemperatureDeltaResponse, error) {
	response, err := c.WithRawResponse.BodyTemperatureDeltaGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BodyTemperatureGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsBodyTemperatureGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedBodyTemperatureResponse, error) {
	response, err := c.WithRawResponse.BodyTemperatureGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BodyWeightGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsBodyWeightGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedBodyWeightResponse, error) {
	response, err := c.WithRawResponse.BodyWeightGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BodyFatGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsBodyFatGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedBodyFatResponse, error) {
	response, err := c.WithRawResponse.BodyFatGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BloodOxygenGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsBloodOxygenGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedBloodOxygenResponse, error) {
	response, err := c.WithRawResponse.BloodOxygenGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ElectrocardiogramVoltageGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsElectrocardiogramVoltageGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedElectrocardiogramVoltageResponse, error) {
	response, err := c.WithRawResponse.ElectrocardiogramVoltageGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BloodPressureGrouped(
	ctx context.Context,
	userId string,
	request *vital.VitalsBloodPressureGroupedRequest,
	opts ...option.RequestOption,
) (*vital.GroupedBloodPressureResponse, error) {
	response, err := c.WithRawResponse.BloodPressureGrouped(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Vo2Max(
	ctx context.Context,
	userId string,
	request *vital.VitalsVo2MaxRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingVo2MaxTimeseries, error) {
	response, err := c.WithRawResponse.Vo2Max(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) StressLevel(
	ctx context.Context,
	userId string,
	request *vital.VitalsStressLevelRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingStressLevelTimeseries, error) {
	response, err := c.WithRawResponse.StressLevel(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) MindfulnessMinutes(
	ctx context.Context,
	userId string,
	request *vital.VitalsMindfulnessMinutesRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingMindfulnessMinutesTimeseries, error) {
	response, err := c.WithRawResponse.MindfulnessMinutes(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Caffeine(
	ctx context.Context,
	userId string,
	request *vital.VitalsCaffeineRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingCaffeineTimeseries, error) {
	response, err := c.WithRawResponse.Caffeine(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Water(
	ctx context.Context,
	userId string,
	request *vital.VitalsWaterRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingWaterTimeseries, error) {
	response, err := c.WithRawResponse.Water(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Steps(
	ctx context.Context,
	userId string,
	request *vital.VitalsStepsRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingStepsTimeseries, error) {
	response, err := c.WithRawResponse.Steps(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) FloorsClimbed(
	ctx context.Context,
	userId string,
	request *vital.VitalsFloorsClimbedRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingFloorsClimbedTimeseries, error) {
	response, err := c.WithRawResponse.FloorsClimbed(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Distance(
	ctx context.Context,
	userId string,
	request *vital.VitalsDistanceRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingDistanceTimeseries, error) {
	response, err := c.WithRawResponse.Distance(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CaloriesBasal(
	ctx context.Context,
	userId string,
	request *vital.VitalsCaloriesBasalRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingCaloriesBasalTimeseries, error) {
	response, err := c.WithRawResponse.CaloriesBasal(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CaloriesActive(
	ctx context.Context,
	userId string,
	request *vital.VitalsCaloriesActiveRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingCaloriesActiveTimeseries, error) {
	response, err := c.WithRawResponse.CaloriesActive(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) RespiratoryRate(
	ctx context.Context,
	userId string,
	request *vital.VitalsRespiratoryRateRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingRespiratoryRateTimeseries, error) {
	response, err := c.WithRawResponse.RespiratoryRate(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Ige(
	ctx context.Context,
	userId string,
	request *vital.VitalsIgeRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingIgeTimeseries, error) {
	response, err := c.WithRawResponse.Ige(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Igg(
	ctx context.Context,
	userId string,
	request *vital.VitalsIggRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingIggTimeseries, error) {
	response, err := c.WithRawResponse.Igg(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Hypnogram(
	ctx context.Context,
	userId string,
	request *vital.VitalsHypnogramRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingHypnogramTimeseries, error) {
	response, err := c.WithRawResponse.Hypnogram(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Hrv(
	ctx context.Context,
	userId string,
	request *vital.VitalsHrvRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingHrvTimeseries, error) {
	response, err := c.WithRawResponse.Hrv(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Heartrate(
	ctx context.Context,
	userId string,
	request *vital.VitalsHeartrateRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingHeartRateTimeseries, error) {
	response, err := c.WithRawResponse.Heartrate(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Glucose(
	ctx context.Context,
	userId string,
	request *vital.VitalsGlucoseRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingGlucoseTimeseries, error) {
	response, err := c.WithRawResponse.Glucose(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CholesterolTriglycerides(
	ctx context.Context,
	userId string,
	request *vital.VitalsCholesterolTriglyceridesRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingCholesterolTimeseries, error) {
	response, err := c.WithRawResponse.CholesterolTriglycerides(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CholesterolTotal(
	ctx context.Context,
	userId string,
	request *vital.VitalsCholesterolTotalRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingCholesterolTimeseries, error) {
	response, err := c.WithRawResponse.CholesterolTotal(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CholesterolLdl(
	ctx context.Context,
	userId string,
	request *vital.VitalsCholesterolLdlRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingCholesterolTimeseries, error) {
	response, err := c.WithRawResponse.CholesterolLdl(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CholesterolHdl(
	ctx context.Context,
	userId string,
	request *vital.VitalsCholesterolHdlRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingCholesterolTimeseries, error) {
	response, err := c.WithRawResponse.CholesterolHdl(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Cholesterol(
	ctx context.Context,
	userId string,
	request *vital.VitalsCholesterolRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingCholesterolTimeseries, error) {
	response, err := c.WithRawResponse.Cholesterol(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BodyWeight(
	ctx context.Context,
	userId string,
	request *vital.VitalsBodyWeightRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingBodyWeightTimeseries, error) {
	response, err := c.WithRawResponse.BodyWeight(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BodyFat(
	ctx context.Context,
	userId string,
	request *vital.VitalsBodyFatRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingBodyFatTimeseries, error) {
	response, err := c.WithRawResponse.BodyFat(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BloodOxygen(
	ctx context.Context,
	userId string,
	request *vital.VitalsBloodOxygenRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingBloodOxygenTimeseries, error) {
	response, err := c.WithRawResponse.BloodOxygen(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) ElectrocardiogramVoltage(
	ctx context.Context,
	userId string,
	request *vital.VitalsElectrocardiogramVoltageRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingElectrocardiogramVoltageTimeseries, error) {
	response, err := c.WithRawResponse.ElectrocardiogramVoltage(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) BloodPressure(
	ctx context.Context,
	userId string,
	request *vital.VitalsBloodPressureRequest,
	opts ...option.RequestOption,
) ([]*vital.ClientFacingBloodPressureTimeseries, error) {
	response, err := c.WithRawResponse.BloodPressure(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
