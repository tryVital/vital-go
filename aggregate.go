// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/tryVital/vital-go/core"
	time "time"
)

type AggregateGetTaskHistoryForContinuousQueryRequest struct {
	NextCursor *string `json:"-" url:"next_cursor,omitempty"`
	Limit      *int    `json:"-" url:"limit,omitempty"`
}

type QueryBatch struct {
	Timeframe *QueryBatchTimeframe `json:"timeframe,omitempty" url:"-"`
	Queries   []*Query             `json:"queries,omitempty" url:"-"`
	Config    *QueryConfig         `json:"config,omitempty" url:"-"`
	accept    string
}

func (q *QueryBatch) Accept() string {
	return q.accept
}

func (q *QueryBatch) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryBatch
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*q = QueryBatch(body)
	q.accept = "*/*"
	return nil
}

func (q *QueryBatch) MarshalJSON() ([]byte, error) {
	type embed QueryBatch
	var marshaler = struct {
		embed
		Accept string `json:"accept"`
	}{
		embed:  embed(*q),
		Accept: "*/*",
	}
	return json.Marshal(marshaler)
}

type ActivityColumnExpr struct {
	// ℹ️ This enum is non-exhaustive.
	Activity ActivityColumnExprActivity `json:"activity" url:"activity"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *ActivityColumnExpr) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActivityColumnExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler ActivityColumnExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActivityColumnExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActivityColumnExpr) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// ℹ️ This enum is non-exhaustive.
type ActivityColumnExprActivity string

const (
	ActivityColumnExprActivityDate                     ActivityColumnExprActivity = "date"
	ActivityColumnExprActivityCaloriesTotal            ActivityColumnExprActivity = "calories_total"
	ActivityColumnExprActivityCaloriesActive           ActivityColumnExprActivity = "calories_active"
	ActivityColumnExprActivitySteps                    ActivityColumnExprActivity = "steps"
	ActivityColumnExprActivityDistanceMeter            ActivityColumnExprActivity = "distance_meter"
	ActivityColumnExprActivityFloorsClimbed            ActivityColumnExprActivity = "floors_climbed"
	ActivityColumnExprActivityDurationActiveSecond     ActivityColumnExprActivity = "duration_active_second"
	ActivityColumnExprActivityIntensitySedentarySecond ActivityColumnExprActivity = "intensity_sedentary_second"
	ActivityColumnExprActivityIntensityLowSecond       ActivityColumnExprActivity = "intensity_low_second"
	ActivityColumnExprActivityIntensityMediumSecond    ActivityColumnExprActivity = "intensity_medium_second"
	ActivityColumnExprActivityIntensityHighSecond      ActivityColumnExprActivity = "intensity_high_second"
	ActivityColumnExprActivityHeartRateMean            ActivityColumnExprActivity = "heart_rate_mean"
	ActivityColumnExprActivityHeartRateMinimum         ActivityColumnExprActivity = "heart_rate_minimum"
	ActivityColumnExprActivityHeartRateMaximum         ActivityColumnExprActivity = "heart_rate_maximum"
	ActivityColumnExprActivityHeartRateResting         ActivityColumnExprActivity = "heart_rate_resting"
	ActivityColumnExprActivityHeartRateMeanWalking     ActivityColumnExprActivity = "heart_rate_mean_walking"
	ActivityColumnExprActivityWheelchairUse            ActivityColumnExprActivity = "wheelchair_use"
	ActivityColumnExprActivityWheelchairPush           ActivityColumnExprActivity = "wheelchair_push"
	ActivityColumnExprActivitySourceType               ActivityColumnExprActivity = "source_type"
	ActivityColumnExprActivitySourceProvider           ActivityColumnExprActivity = "source_provider"
	ActivityColumnExprActivitySourceAppId              ActivityColumnExprActivity = "source_app_id"
	ActivityColumnExprActivitySourceDeviceId           ActivityColumnExprActivity = "source_device_id"
	ActivityColumnExprActivityTimeZone                 ActivityColumnExprActivity = "time_zone"
	ActivityColumnExprActivityTimeZoneOffset           ActivityColumnExprActivity = "time_zone_offset"
)

func NewActivityColumnExprActivityFromString(s string) (ActivityColumnExprActivity, error) {
	switch s {
	case "date":
		return ActivityColumnExprActivityDate, nil
	case "calories_total":
		return ActivityColumnExprActivityCaloriesTotal, nil
	case "calories_active":
		return ActivityColumnExprActivityCaloriesActive, nil
	case "steps":
		return ActivityColumnExprActivitySteps, nil
	case "distance_meter":
		return ActivityColumnExprActivityDistanceMeter, nil
	case "floors_climbed":
		return ActivityColumnExprActivityFloorsClimbed, nil
	case "duration_active_second":
		return ActivityColumnExprActivityDurationActiveSecond, nil
	case "intensity_sedentary_second":
		return ActivityColumnExprActivityIntensitySedentarySecond, nil
	case "intensity_low_second":
		return ActivityColumnExprActivityIntensityLowSecond, nil
	case "intensity_medium_second":
		return ActivityColumnExprActivityIntensityMediumSecond, nil
	case "intensity_high_second":
		return ActivityColumnExprActivityIntensityHighSecond, nil
	case "heart_rate_mean":
		return ActivityColumnExprActivityHeartRateMean, nil
	case "heart_rate_minimum":
		return ActivityColumnExprActivityHeartRateMinimum, nil
	case "heart_rate_maximum":
		return ActivityColumnExprActivityHeartRateMaximum, nil
	case "heart_rate_resting":
		return ActivityColumnExprActivityHeartRateResting, nil
	case "heart_rate_mean_walking":
		return ActivityColumnExprActivityHeartRateMeanWalking, nil
	case "wheelchair_use":
		return ActivityColumnExprActivityWheelchairUse, nil
	case "wheelchair_push":
		return ActivityColumnExprActivityWheelchairPush, nil
	case "source_type":
		return ActivityColumnExprActivitySourceType, nil
	case "source_provider":
		return ActivityColumnExprActivitySourceProvider, nil
	case "source_app_id":
		return ActivityColumnExprActivitySourceAppId, nil
	case "source_device_id":
		return ActivityColumnExprActivitySourceDeviceId, nil
	case "time_zone":
		return ActivityColumnExprActivityTimeZone, nil
	case "time_zone_offset":
		return ActivityColumnExprActivityTimeZoneOffset, nil
	}
	var t ActivityColumnExprActivity
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivityColumnExprActivity) Ptr() *ActivityColumnExprActivity {
	return &a
}

type AggregateExpr struct {
	Arg *AggregateExprArg `json:"arg,omitempty" url:"arg,omitempty"`
	// ℹ️ This enum is non-exhaustive.
	Func AggregateExprFunc `json:"func" url:"func"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AggregateExpr) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AggregateExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler AggregateExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AggregateExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AggregateExpr) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AggregateExprArg struct {
	SleepColumnExpr               *SleepColumnExpr
	ActivityColumnExpr            *ActivityColumnExpr
	WorkoutColumnExpr             *WorkoutColumnExpr
	BodyColumnExpr                *BodyColumnExpr
	MealColumnExpr                *MealColumnExpr
	SleepScoreValueMacroExpr      *SleepScoreValueMacroExpr
	ChronotypeValueMacroExpr      *ChronotypeValueMacroExpr
	UnrecognizedValueMacroExpr    *UnrecognizedValueMacroExpr
	DiscreteTimeseriesExpr        *DiscreteTimeseriesExpr
	IntervalTimeseriesExpr        *IntervalTimeseriesExpr
	BloodPressureTimeseriesExpr   *BloodPressureTimeseriesExpr
	TemperatureTimeseriesExpr     *TemperatureTimeseriesExpr
	WorkoutDurationTimeseriesExpr *WorkoutDurationTimeseriesExpr
	NoteTimeseriesExpr            *NoteTimeseriesExpr
	IndexColumnExpr               *IndexColumnExpr
}

func NewAggregateExprArgFromSleepColumnExpr(value *SleepColumnExpr) *AggregateExprArg {
	return &AggregateExprArg{SleepColumnExpr: value}
}

func NewAggregateExprArgFromActivityColumnExpr(value *ActivityColumnExpr) *AggregateExprArg {
	return &AggregateExprArg{ActivityColumnExpr: value}
}

func NewAggregateExprArgFromWorkoutColumnExpr(value *WorkoutColumnExpr) *AggregateExprArg {
	return &AggregateExprArg{WorkoutColumnExpr: value}
}

func NewAggregateExprArgFromBodyColumnExpr(value *BodyColumnExpr) *AggregateExprArg {
	return &AggregateExprArg{BodyColumnExpr: value}
}

func NewAggregateExprArgFromMealColumnExpr(value *MealColumnExpr) *AggregateExprArg {
	return &AggregateExprArg{MealColumnExpr: value}
}

func NewAggregateExprArgFromSleepScoreValueMacroExpr(value *SleepScoreValueMacroExpr) *AggregateExprArg {
	return &AggregateExprArg{SleepScoreValueMacroExpr: value}
}

func NewAggregateExprArgFromChronotypeValueMacroExpr(value *ChronotypeValueMacroExpr) *AggregateExprArg {
	return &AggregateExprArg{ChronotypeValueMacroExpr: value}
}

func NewAggregateExprArgFromUnrecognizedValueMacroExpr(value *UnrecognizedValueMacroExpr) *AggregateExprArg {
	return &AggregateExprArg{UnrecognizedValueMacroExpr: value}
}

func NewAggregateExprArgFromDiscreteTimeseriesExpr(value *DiscreteTimeseriesExpr) *AggregateExprArg {
	return &AggregateExprArg{DiscreteTimeseriesExpr: value}
}

func NewAggregateExprArgFromIntervalTimeseriesExpr(value *IntervalTimeseriesExpr) *AggregateExprArg {
	return &AggregateExprArg{IntervalTimeseriesExpr: value}
}

func NewAggregateExprArgFromBloodPressureTimeseriesExpr(value *BloodPressureTimeseriesExpr) *AggregateExprArg {
	return &AggregateExprArg{BloodPressureTimeseriesExpr: value}
}

func NewAggregateExprArgFromTemperatureTimeseriesExpr(value *TemperatureTimeseriesExpr) *AggregateExprArg {
	return &AggregateExprArg{TemperatureTimeseriesExpr: value}
}

func NewAggregateExprArgFromWorkoutDurationTimeseriesExpr(value *WorkoutDurationTimeseriesExpr) *AggregateExprArg {
	return &AggregateExprArg{WorkoutDurationTimeseriesExpr: value}
}

func NewAggregateExprArgFromNoteTimeseriesExpr(value *NoteTimeseriesExpr) *AggregateExprArg {
	return &AggregateExprArg{NoteTimeseriesExpr: value}
}

func NewAggregateExprArgFromIndexColumnExpr(value *IndexColumnExpr) *AggregateExprArg {
	return &AggregateExprArg{IndexColumnExpr: value}
}

func (a *AggregateExprArg) UnmarshalJSON(data []byte) error {
	valueSleepColumnExpr := new(SleepColumnExpr)
	if err := json.Unmarshal(data, &valueSleepColumnExpr); err == nil {
		a.SleepColumnExpr = valueSleepColumnExpr
		return nil
	}
	valueActivityColumnExpr := new(ActivityColumnExpr)
	if err := json.Unmarshal(data, &valueActivityColumnExpr); err == nil {
		a.ActivityColumnExpr = valueActivityColumnExpr
		return nil
	}
	valueWorkoutColumnExpr := new(WorkoutColumnExpr)
	if err := json.Unmarshal(data, &valueWorkoutColumnExpr); err == nil {
		a.WorkoutColumnExpr = valueWorkoutColumnExpr
		return nil
	}
	valueBodyColumnExpr := new(BodyColumnExpr)
	if err := json.Unmarshal(data, &valueBodyColumnExpr); err == nil {
		a.BodyColumnExpr = valueBodyColumnExpr
		return nil
	}
	valueMealColumnExpr := new(MealColumnExpr)
	if err := json.Unmarshal(data, &valueMealColumnExpr); err == nil {
		a.MealColumnExpr = valueMealColumnExpr
		return nil
	}
	valueSleepScoreValueMacroExpr := new(SleepScoreValueMacroExpr)
	if err := json.Unmarshal(data, &valueSleepScoreValueMacroExpr); err == nil {
		a.SleepScoreValueMacroExpr = valueSleepScoreValueMacroExpr
		return nil
	}
	valueChronotypeValueMacroExpr := new(ChronotypeValueMacroExpr)
	if err := json.Unmarshal(data, &valueChronotypeValueMacroExpr); err == nil {
		a.ChronotypeValueMacroExpr = valueChronotypeValueMacroExpr
		return nil
	}
	valueUnrecognizedValueMacroExpr := new(UnrecognizedValueMacroExpr)
	if err := json.Unmarshal(data, &valueUnrecognizedValueMacroExpr); err == nil {
		a.UnrecognizedValueMacroExpr = valueUnrecognizedValueMacroExpr
		return nil
	}
	valueDiscreteTimeseriesExpr := new(DiscreteTimeseriesExpr)
	if err := json.Unmarshal(data, &valueDiscreteTimeseriesExpr); err == nil {
		a.DiscreteTimeseriesExpr = valueDiscreteTimeseriesExpr
		return nil
	}
	valueIntervalTimeseriesExpr := new(IntervalTimeseriesExpr)
	if err := json.Unmarshal(data, &valueIntervalTimeseriesExpr); err == nil {
		a.IntervalTimeseriesExpr = valueIntervalTimeseriesExpr
		return nil
	}
	valueBloodPressureTimeseriesExpr := new(BloodPressureTimeseriesExpr)
	if err := json.Unmarshal(data, &valueBloodPressureTimeseriesExpr); err == nil {
		a.BloodPressureTimeseriesExpr = valueBloodPressureTimeseriesExpr
		return nil
	}
	valueTemperatureTimeseriesExpr := new(TemperatureTimeseriesExpr)
	if err := json.Unmarshal(data, &valueTemperatureTimeseriesExpr); err == nil {
		a.TemperatureTimeseriesExpr = valueTemperatureTimeseriesExpr
		return nil
	}
	valueWorkoutDurationTimeseriesExpr := new(WorkoutDurationTimeseriesExpr)
	if err := json.Unmarshal(data, &valueWorkoutDurationTimeseriesExpr); err == nil {
		a.WorkoutDurationTimeseriesExpr = valueWorkoutDurationTimeseriesExpr
		return nil
	}
	valueNoteTimeseriesExpr := new(NoteTimeseriesExpr)
	if err := json.Unmarshal(data, &valueNoteTimeseriesExpr); err == nil {
		a.NoteTimeseriesExpr = valueNoteTimeseriesExpr
		return nil
	}
	valueIndexColumnExpr := new(IndexColumnExpr)
	if err := json.Unmarshal(data, &valueIndexColumnExpr); err == nil {
		a.IndexColumnExpr = valueIndexColumnExpr
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AggregateExprArg) MarshalJSON() ([]byte, error) {
	if a.SleepColumnExpr != nil {
		return json.Marshal(a.SleepColumnExpr)
	}
	if a.ActivityColumnExpr != nil {
		return json.Marshal(a.ActivityColumnExpr)
	}
	if a.WorkoutColumnExpr != nil {
		return json.Marshal(a.WorkoutColumnExpr)
	}
	if a.BodyColumnExpr != nil {
		return json.Marshal(a.BodyColumnExpr)
	}
	if a.MealColumnExpr != nil {
		return json.Marshal(a.MealColumnExpr)
	}
	if a.SleepScoreValueMacroExpr != nil {
		return json.Marshal(a.SleepScoreValueMacroExpr)
	}
	if a.ChronotypeValueMacroExpr != nil {
		return json.Marshal(a.ChronotypeValueMacroExpr)
	}
	if a.UnrecognizedValueMacroExpr != nil {
		return json.Marshal(a.UnrecognizedValueMacroExpr)
	}
	if a.DiscreteTimeseriesExpr != nil {
		return json.Marshal(a.DiscreteTimeseriesExpr)
	}
	if a.IntervalTimeseriesExpr != nil {
		return json.Marshal(a.IntervalTimeseriesExpr)
	}
	if a.BloodPressureTimeseriesExpr != nil {
		return json.Marshal(a.BloodPressureTimeseriesExpr)
	}
	if a.TemperatureTimeseriesExpr != nil {
		return json.Marshal(a.TemperatureTimeseriesExpr)
	}
	if a.WorkoutDurationTimeseriesExpr != nil {
		return json.Marshal(a.WorkoutDurationTimeseriesExpr)
	}
	if a.NoteTimeseriesExpr != nil {
		return json.Marshal(a.NoteTimeseriesExpr)
	}
	if a.IndexColumnExpr != nil {
		return json.Marshal(a.IndexColumnExpr)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AggregateExprArgVisitor interface {
	VisitSleepColumnExpr(*SleepColumnExpr) error
	VisitActivityColumnExpr(*ActivityColumnExpr) error
	VisitWorkoutColumnExpr(*WorkoutColumnExpr) error
	VisitBodyColumnExpr(*BodyColumnExpr) error
	VisitMealColumnExpr(*MealColumnExpr) error
	VisitSleepScoreValueMacroExpr(*SleepScoreValueMacroExpr) error
	VisitChronotypeValueMacroExpr(*ChronotypeValueMacroExpr) error
	VisitUnrecognizedValueMacroExpr(*UnrecognizedValueMacroExpr) error
	VisitDiscreteTimeseriesExpr(*DiscreteTimeseriesExpr) error
	VisitIntervalTimeseriesExpr(*IntervalTimeseriesExpr) error
	VisitBloodPressureTimeseriesExpr(*BloodPressureTimeseriesExpr) error
	VisitTemperatureTimeseriesExpr(*TemperatureTimeseriesExpr) error
	VisitWorkoutDurationTimeseriesExpr(*WorkoutDurationTimeseriesExpr) error
	VisitNoteTimeseriesExpr(*NoteTimeseriesExpr) error
	VisitIndexColumnExpr(*IndexColumnExpr) error
}

func (a *AggregateExprArg) Accept(visitor AggregateExprArgVisitor) error {
	if a.SleepColumnExpr != nil {
		return visitor.VisitSleepColumnExpr(a.SleepColumnExpr)
	}
	if a.ActivityColumnExpr != nil {
		return visitor.VisitActivityColumnExpr(a.ActivityColumnExpr)
	}
	if a.WorkoutColumnExpr != nil {
		return visitor.VisitWorkoutColumnExpr(a.WorkoutColumnExpr)
	}
	if a.BodyColumnExpr != nil {
		return visitor.VisitBodyColumnExpr(a.BodyColumnExpr)
	}
	if a.MealColumnExpr != nil {
		return visitor.VisitMealColumnExpr(a.MealColumnExpr)
	}
	if a.SleepScoreValueMacroExpr != nil {
		return visitor.VisitSleepScoreValueMacroExpr(a.SleepScoreValueMacroExpr)
	}
	if a.ChronotypeValueMacroExpr != nil {
		return visitor.VisitChronotypeValueMacroExpr(a.ChronotypeValueMacroExpr)
	}
	if a.UnrecognizedValueMacroExpr != nil {
		return visitor.VisitUnrecognizedValueMacroExpr(a.UnrecognizedValueMacroExpr)
	}
	if a.DiscreteTimeseriesExpr != nil {
		return visitor.VisitDiscreteTimeseriesExpr(a.DiscreteTimeseriesExpr)
	}
	if a.IntervalTimeseriesExpr != nil {
		return visitor.VisitIntervalTimeseriesExpr(a.IntervalTimeseriesExpr)
	}
	if a.BloodPressureTimeseriesExpr != nil {
		return visitor.VisitBloodPressureTimeseriesExpr(a.BloodPressureTimeseriesExpr)
	}
	if a.TemperatureTimeseriesExpr != nil {
		return visitor.VisitTemperatureTimeseriesExpr(a.TemperatureTimeseriesExpr)
	}
	if a.WorkoutDurationTimeseriesExpr != nil {
		return visitor.VisitWorkoutDurationTimeseriesExpr(a.WorkoutDurationTimeseriesExpr)
	}
	if a.NoteTimeseriesExpr != nil {
		return visitor.VisitNoteTimeseriesExpr(a.NoteTimeseriesExpr)
	}
	if a.IndexColumnExpr != nil {
		return visitor.VisitIndexColumnExpr(a.IndexColumnExpr)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

// ℹ️ This enum is non-exhaustive.
type AggregateExprFunc string

const (
	AggregateExprFuncMean   AggregateExprFunc = "mean"
	AggregateExprFuncMin    AggregateExprFunc = "min"
	AggregateExprFuncMax    AggregateExprFunc = "max"
	AggregateExprFuncSum    AggregateExprFunc = "sum"
	AggregateExprFuncCount  AggregateExprFunc = "count"
	AggregateExprFuncMedian AggregateExprFunc = "median"
	AggregateExprFuncStddev AggregateExprFunc = "stddev"
	AggregateExprFuncOldest AggregateExprFunc = "oldest"
	AggregateExprFuncNewest AggregateExprFunc = "newest"
)

func NewAggregateExprFuncFromString(s string) (AggregateExprFunc, error) {
	switch s {
	case "mean":
		return AggregateExprFuncMean, nil
	case "min":
		return AggregateExprFuncMin, nil
	case "max":
		return AggregateExprFuncMax, nil
	case "sum":
		return AggregateExprFuncSum, nil
	case "count":
		return AggregateExprFuncCount, nil
	case "median":
		return AggregateExprFuncMedian, nil
	case "stddev":
		return AggregateExprFuncStddev, nil
	case "oldest":
		return AggregateExprFuncOldest, nil
	case "newest":
		return AggregateExprFuncNewest, nil
	}
	var t AggregateExprFunc
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AggregateExprFunc) Ptr() *AggregateExprFunc {
	return &a
}

type AggregationResponse struct {
	Results []*AggregationResult `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AggregationResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AggregationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AggregationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AggregationResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AggregationResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AggregationResult struct {
	// The result table of the query, organized in a column oriented format.
	Table map[string][]interface{} `json:"table,omitempty" url:"table,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AggregationResult) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AggregationResult) UnmarshalJSON(data []byte) error {
	type unmarshaler AggregationResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AggregationResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AggregationResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type BloodPressureTimeseriesExpr struct {
	Field      BloodPressureTimeseriesExprField `json:"field" url:"field"`
	timeseries string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BloodPressureTimeseriesExpr) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BloodPressureTimeseriesExpr) Timeseries() string {
	return b.timeseries
}

func (b *BloodPressureTimeseriesExpr) UnmarshalJSON(data []byte) error {
	type embed BloodPressureTimeseriesExpr
	var unmarshaler = struct {
		embed
		Timeseries string `json:"timeseries"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BloodPressureTimeseriesExpr(unmarshaler.embed)
	if unmarshaler.Timeseries != "blood_pressure" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", b, "blood_pressure", unmarshaler.Timeseries)
	}
	b.timeseries = unmarshaler.Timeseries

	extraProperties, err := core.ExtractExtraProperties(data, *b, "timeseries")
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BloodPressureTimeseriesExpr) MarshalJSON() ([]byte, error) {
	type embed BloodPressureTimeseriesExpr
	var marshaler = struct {
		embed
		Timeseries string `json:"timeseries"`
	}{
		embed:      embed(*b),
		Timeseries: "blood_pressure",
	}
	return json.Marshal(marshaler)
}

func (b *BloodPressureTimeseriesExpr) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BloodPressureTimeseriesExprField string

const (
	BloodPressureTimeseriesExprFieldSourceProvider  BloodPressureTimeseriesExprField = "source_provider"
	BloodPressureTimeseriesExprFieldSourceType      BloodPressureTimeseriesExprField = "source_type"
	BloodPressureTimeseriesExprFieldSourceAppId     BloodPressureTimeseriesExprField = "source_app_id"
	BloodPressureTimeseriesExprFieldSourceWorkoutId BloodPressureTimeseriesExprField = "source_workout_id"
	BloodPressureTimeseriesExprFieldSourceSport     BloodPressureTimeseriesExprField = "source_sport"
	BloodPressureTimeseriesExprFieldTimezoneOffset  BloodPressureTimeseriesExprField = "timezone_offset"
	BloodPressureTimeseriesExprFieldType            BloodPressureTimeseriesExprField = "type"
	BloodPressureTimeseriesExprFieldSystolic        BloodPressureTimeseriesExprField = "systolic"
	BloodPressureTimeseriesExprFieldDiastolic       BloodPressureTimeseriesExprField = "diastolic"
)

func NewBloodPressureTimeseriesExprFieldFromString(s string) (BloodPressureTimeseriesExprField, error) {
	switch s {
	case "source_provider":
		return BloodPressureTimeseriesExprFieldSourceProvider, nil
	case "source_type":
		return BloodPressureTimeseriesExprFieldSourceType, nil
	case "source_app_id":
		return BloodPressureTimeseriesExprFieldSourceAppId, nil
	case "source_workout_id":
		return BloodPressureTimeseriesExprFieldSourceWorkoutId, nil
	case "source_sport":
		return BloodPressureTimeseriesExprFieldSourceSport, nil
	case "timezone_offset":
		return BloodPressureTimeseriesExprFieldTimezoneOffset, nil
	case "type":
		return BloodPressureTimeseriesExprFieldType, nil
	case "systolic":
		return BloodPressureTimeseriesExprFieldSystolic, nil
	case "diastolic":
		return BloodPressureTimeseriesExprFieldDiastolic, nil
	}
	var t BloodPressureTimeseriesExprField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BloodPressureTimeseriesExprField) Ptr() *BloodPressureTimeseriesExprField {
	return &b
}

type BodyColumnExpr struct {
	// ℹ️ This enum is non-exhaustive.
	Body BodyColumnExprBody `json:"body" url:"body"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BodyColumnExpr) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BodyColumnExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler BodyColumnExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BodyColumnExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BodyColumnExpr) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// ℹ️ This enum is non-exhaustive.
type BodyColumnExprBody string

const (
	BodyColumnExprBodyMeasuredAt                   BodyColumnExprBody = "measured_at"
	BodyColumnExprBodyWeightKilogram               BodyColumnExprBody = "weight_kilogram"
	BodyColumnExprBodyFatMassPercentage            BodyColumnExprBody = "fat_mass_percentage"
	BodyColumnExprBodyWaterPercentage              BodyColumnExprBody = "water_percentage"
	BodyColumnExprBodyMuscleMassPercentage         BodyColumnExprBody = "muscle_mass_percentage"
	BodyColumnExprBodyVisceralFatIndex             BodyColumnExprBody = "visceral_fat_index"
	BodyColumnExprBodyBoneMassPercentage           BodyColumnExprBody = "bone_mass_percentage"
	BodyColumnExprBodyBodyMassIndex                BodyColumnExprBody = "body_mass_index"
	BodyColumnExprBodyLeanBodyMassKilogram         BodyColumnExprBody = "lean_body_mass_kilogram"
	BodyColumnExprBodyWaistCircumferenceCentimeter BodyColumnExprBody = "waist_circumference_centimeter"
	BodyColumnExprBodySourceType                   BodyColumnExprBody = "source_type"
	BodyColumnExprBodySourceProvider               BodyColumnExprBody = "source_provider"
	BodyColumnExprBodySourceAppId                  BodyColumnExprBody = "source_app_id"
	BodyColumnExprBodySourceDeviceId               BodyColumnExprBody = "source_device_id"
	BodyColumnExprBodyTimeZone                     BodyColumnExprBody = "time_zone"
)

func NewBodyColumnExprBodyFromString(s string) (BodyColumnExprBody, error) {
	switch s {
	case "measured_at":
		return BodyColumnExprBodyMeasuredAt, nil
	case "weight_kilogram":
		return BodyColumnExprBodyWeightKilogram, nil
	case "fat_mass_percentage":
		return BodyColumnExprBodyFatMassPercentage, nil
	case "water_percentage":
		return BodyColumnExprBodyWaterPercentage, nil
	case "muscle_mass_percentage":
		return BodyColumnExprBodyMuscleMassPercentage, nil
	case "visceral_fat_index":
		return BodyColumnExprBodyVisceralFatIndex, nil
	case "bone_mass_percentage":
		return BodyColumnExprBodyBoneMassPercentage, nil
	case "body_mass_index":
		return BodyColumnExprBodyBodyMassIndex, nil
	case "lean_body_mass_kilogram":
		return BodyColumnExprBodyLeanBodyMassKilogram, nil
	case "waist_circumference_centimeter":
		return BodyColumnExprBodyWaistCircumferenceCentimeter, nil
	case "source_type":
		return BodyColumnExprBodySourceType, nil
	case "source_provider":
		return BodyColumnExprBodySourceProvider, nil
	case "source_app_id":
		return BodyColumnExprBodySourceAppId, nil
	case "source_device_id":
		return BodyColumnExprBodySourceDeviceId, nil
	case "time_zone":
		return BodyColumnExprBodyTimeZone, nil
	}
	var t BodyColumnExprBody
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BodyColumnExprBody) Ptr() *BodyColumnExprBody {
	return &b
}

type ChronotypeValueMacroExpr struct {
	Version    *string `json:"version,omitempty" url:"version,omitempty"`
	valueMacro string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChronotypeValueMacroExpr) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChronotypeValueMacroExpr) ValueMacro() string {
	return c.valueMacro
}

func (c *ChronotypeValueMacroExpr) UnmarshalJSON(data []byte) error {
	type embed ChronotypeValueMacroExpr
	var unmarshaler = struct {
		embed
		ValueMacro string `json:"value_macro"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ChronotypeValueMacroExpr(unmarshaler.embed)
	if unmarshaler.ValueMacro != "chronotype" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", c, "chronotype", unmarshaler.ValueMacro)
	}
	c.valueMacro = unmarshaler.ValueMacro

	extraProperties, err := core.ExtractExtraProperties(data, *c, "value_macro")
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChronotypeValueMacroExpr) MarshalJSON() ([]byte, error) {
	type embed ChronotypeValueMacroExpr
	var marshaler = struct {
		embed
		ValueMacro string `json:"value_macro"`
	}{
		embed:      embed(*c),
		ValueMacro: "chronotype",
	}
	return json.Marshal(marshaler)
}

func (c *ChronotypeValueMacroExpr) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ContinuousQueryTaskHistoryEntry struct {
	QueryId      string                    `json:"query_id" url:"query_id"`
	UserId       string                    `json:"user_id" url:"user_id"`
	Status       ContinuousQueryTaskStatus `json:"status" url:"status"`
	ScheduledAt  time.Time                 `json:"scheduled_at" url:"scheduled_at"`
	StartedAt    *time.Time                `json:"started_at,omitempty" url:"started_at,omitempty"`
	EndedAt      *time.Time                `json:"ended_at,omitempty" url:"ended_at,omitempty"`
	ErrorDetails *string                   `json:"error_details,omitempty" url:"error_details,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ContinuousQueryTaskHistoryEntry) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContinuousQueryTaskHistoryEntry) UnmarshalJSON(data []byte) error {
	type embed ContinuousQueryTaskHistoryEntry
	var unmarshaler = struct {
		embed
		ScheduledAt *core.DateTime `json:"scheduled_at"`
		StartedAt   *core.DateTime `json:"started_at,omitempty"`
		EndedAt     *core.DateTime `json:"ended_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ContinuousQueryTaskHistoryEntry(unmarshaler.embed)
	c.ScheduledAt = unmarshaler.ScheduledAt.Time()
	c.StartedAt = unmarshaler.StartedAt.TimePtr()
	c.EndedAt = unmarshaler.EndedAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContinuousQueryTaskHistoryEntry) MarshalJSON() ([]byte, error) {
	type embed ContinuousQueryTaskHistoryEntry
	var marshaler = struct {
		embed
		ScheduledAt *core.DateTime `json:"scheduled_at"`
		StartedAt   *core.DateTime `json:"started_at,omitempty"`
		EndedAt     *core.DateTime `json:"ended_at,omitempty"`
	}{
		embed:       embed(*c),
		ScheduledAt: core.NewDateTime(c.ScheduledAt),
		StartedAt:   core.NewOptionalDateTime(c.StartedAt),
		EndedAt:     core.NewOptionalDateTime(c.EndedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ContinuousQueryTaskHistoryEntry) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ContinuousQueryTaskHistoryResponse struct {
	Data       []*ContinuousQueryTaskHistoryEntry `json:"data,omitempty" url:"data,omitempty"`
	NextCursor *string                            `json:"next_cursor,omitempty" url:"next_cursor,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ContinuousQueryTaskHistoryResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContinuousQueryTaskHistoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ContinuousQueryTaskHistoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContinuousQueryTaskHistoryResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContinuousQueryTaskHistoryResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// This has to match the `continuous_query_task_status` enum type in postgres. ℹ️ This enum is non-exhaustive.
type ContinuousQueryTaskStatus string

const (
	ContinuousQueryTaskStatusScheduled ContinuousQueryTaskStatus = "scheduled"
	ContinuousQueryTaskStatusStarted   ContinuousQueryTaskStatus = "started"
	ContinuousQueryTaskStatusCompleted ContinuousQueryTaskStatus = "completed"
	ContinuousQueryTaskStatusError     ContinuousQueryTaskStatus = "error"
)

func NewContinuousQueryTaskStatusFromString(s string) (ContinuousQueryTaskStatus, error) {
	switch s {
	case "scheduled":
		return ContinuousQueryTaskStatusScheduled, nil
	case "started":
		return ContinuousQueryTaskStatusStarted, nil
	case "completed":
		return ContinuousQueryTaskStatusCompleted, nil
	case "error":
		return ContinuousQueryTaskStatusError, nil
	}
	var t ContinuousQueryTaskStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ContinuousQueryTaskStatus) Ptr() *ContinuousQueryTaskStatus {
	return &c
}

type DatePartExpr struct {
	Arg      *DatePartExprArg     `json:"arg,omitempty" url:"arg,omitempty"`
	DatePart DatePartExprDatePart `json:"date_part" url:"date_part"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DatePartExpr) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DatePartExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler DatePartExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DatePartExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DatePartExpr) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DatePartExprArg struct {
	IndexColumnExpr *IndexColumnExpr
	Placeholder     *Placeholder
}

func NewDatePartExprArgFromIndexColumnExpr(value *IndexColumnExpr) *DatePartExprArg {
	return &DatePartExprArg{IndexColumnExpr: value}
}

func NewDatePartExprArgFromPlaceholder(value *Placeholder) *DatePartExprArg {
	return &DatePartExprArg{Placeholder: value}
}

func (d *DatePartExprArg) UnmarshalJSON(data []byte) error {
	valueIndexColumnExpr := new(IndexColumnExpr)
	if err := json.Unmarshal(data, &valueIndexColumnExpr); err == nil {
		d.IndexColumnExpr = valueIndexColumnExpr
		return nil
	}
	valuePlaceholder := new(Placeholder)
	if err := json.Unmarshal(data, &valuePlaceholder); err == nil {
		d.Placeholder = valuePlaceholder
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DatePartExprArg) MarshalJSON() ([]byte, error) {
	if d.IndexColumnExpr != nil {
		return json.Marshal(d.IndexColumnExpr)
	}
	if d.Placeholder != nil {
		return json.Marshal(d.Placeholder)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DatePartExprArgVisitor interface {
	VisitIndexColumnExpr(*IndexColumnExpr) error
	VisitPlaceholder(*Placeholder) error
}

func (d *DatePartExprArg) Accept(visitor DatePartExprArgVisitor) error {
	if d.IndexColumnExpr != nil {
		return visitor.VisitIndexColumnExpr(d.IndexColumnExpr)
	}
	if d.Placeholder != nil {
		return visitor.VisitPlaceholder(d.Placeholder)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DatePartExprDatePart string

const (
	DatePartExprDatePartMinute     DatePartExprDatePart = "minute"
	DatePartExprDatePartHour       DatePartExprDatePart = "hour"
	DatePartExprDatePartDay        DatePartExprDatePart = "day"
	DatePartExprDatePartWeek       DatePartExprDatePart = "week"
	DatePartExprDatePartMonth      DatePartExprDatePart = "month"
	DatePartExprDatePartYear       DatePartExprDatePart = "year"
	DatePartExprDatePartWeekday    DatePartExprDatePart = "weekday"
	DatePartExprDatePartWeekOfYear DatePartExprDatePart = "week_of_year"
	DatePartExprDatePartDayOfYear  DatePartExprDatePart = "day_of_year"
)

func NewDatePartExprDatePartFromString(s string) (DatePartExprDatePart, error) {
	switch s {
	case "minute":
		return DatePartExprDatePartMinute, nil
	case "hour":
		return DatePartExprDatePartHour, nil
	case "day":
		return DatePartExprDatePartDay, nil
	case "week":
		return DatePartExprDatePartWeek, nil
	case "month":
		return DatePartExprDatePartMonth, nil
	case "year":
		return DatePartExprDatePartYear, nil
	case "weekday":
		return DatePartExprDatePartWeekday, nil
	case "week_of_year":
		return DatePartExprDatePartWeekOfYear, nil
	case "day_of_year":
		return DatePartExprDatePartDayOfYear, nil
	}
	var t DatePartExprDatePart
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DatePartExprDatePart) Ptr() *DatePartExprDatePart {
	return &d
}

type DateTruncExpr struct {
	DateTrunc *Period           `json:"date_trunc,omitempty" url:"date_trunc,omitempty"`
	Arg       *DateTruncExprArg `json:"arg,omitempty" url:"arg,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DateTruncExpr) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DateTruncExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler DateTruncExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DateTruncExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DateTruncExpr) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DateTruncExprArg struct {
	IndexColumnExpr *IndexColumnExpr
	Placeholder     *Placeholder
}

func NewDateTruncExprArgFromIndexColumnExpr(value *IndexColumnExpr) *DateTruncExprArg {
	return &DateTruncExprArg{IndexColumnExpr: value}
}

func NewDateTruncExprArgFromPlaceholder(value *Placeholder) *DateTruncExprArg {
	return &DateTruncExprArg{Placeholder: value}
}

func (d *DateTruncExprArg) UnmarshalJSON(data []byte) error {
	valueIndexColumnExpr := new(IndexColumnExpr)
	if err := json.Unmarshal(data, &valueIndexColumnExpr); err == nil {
		d.IndexColumnExpr = valueIndexColumnExpr
		return nil
	}
	valuePlaceholder := new(Placeholder)
	if err := json.Unmarshal(data, &valuePlaceholder); err == nil {
		d.Placeholder = valuePlaceholder
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DateTruncExprArg) MarshalJSON() ([]byte, error) {
	if d.IndexColumnExpr != nil {
		return json.Marshal(d.IndexColumnExpr)
	}
	if d.Placeholder != nil {
		return json.Marshal(d.Placeholder)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DateTruncExprArgVisitor interface {
	VisitIndexColumnExpr(*IndexColumnExpr) error
	VisitPlaceholder(*Placeholder) error
}

func (d *DateTruncExprArg) Accept(visitor DateTruncExprArgVisitor) error {
	if d.IndexColumnExpr != nil {
		return visitor.VisitIndexColumnExpr(d.IndexColumnExpr)
	}
	if d.Placeholder != nil {
		return visitor.VisitPlaceholder(d.Placeholder)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", d)
}

type DiscreteTimeseriesExpr struct {
	// ℹ️ This enum is non-exhaustive.
	Timeseries DiscreteTimeseriesExprTimeseries `json:"timeseries" url:"timeseries"`
	Field      DiscreteTimeseriesExprField      `json:"field" url:"field"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DiscreteTimeseriesExpr) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DiscreteTimeseriesExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler DiscreteTimeseriesExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DiscreteTimeseriesExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DiscreteTimeseriesExpr) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DiscreteTimeseriesExprField string

const (
	DiscreteTimeseriesExprFieldSourceProvider  DiscreteTimeseriesExprField = "source_provider"
	DiscreteTimeseriesExprFieldSourceType      DiscreteTimeseriesExprField = "source_type"
	DiscreteTimeseriesExprFieldSourceAppId     DiscreteTimeseriesExprField = "source_app_id"
	DiscreteTimeseriesExprFieldSourceWorkoutId DiscreteTimeseriesExprField = "source_workout_id"
	DiscreteTimeseriesExprFieldSourceSport     DiscreteTimeseriesExprField = "source_sport"
	DiscreteTimeseriesExprFieldTimezoneOffset  DiscreteTimeseriesExprField = "timezone_offset"
	DiscreteTimeseriesExprFieldType            DiscreteTimeseriesExprField = "type"
	DiscreteTimeseriesExprFieldValue           DiscreteTimeseriesExprField = "value"
)

func NewDiscreteTimeseriesExprFieldFromString(s string) (DiscreteTimeseriesExprField, error) {
	switch s {
	case "source_provider":
		return DiscreteTimeseriesExprFieldSourceProvider, nil
	case "source_type":
		return DiscreteTimeseriesExprFieldSourceType, nil
	case "source_app_id":
		return DiscreteTimeseriesExprFieldSourceAppId, nil
	case "source_workout_id":
		return DiscreteTimeseriesExprFieldSourceWorkoutId, nil
	case "source_sport":
		return DiscreteTimeseriesExprFieldSourceSport, nil
	case "timezone_offset":
		return DiscreteTimeseriesExprFieldTimezoneOffset, nil
	case "type":
		return DiscreteTimeseriesExprFieldType, nil
	case "value":
		return DiscreteTimeseriesExprFieldValue, nil
	}
	var t DiscreteTimeseriesExprField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DiscreteTimeseriesExprField) Ptr() *DiscreteTimeseriesExprField {
	return &d
}

// ℹ️ This enum is non-exhaustive.
type DiscreteTimeseriesExprTimeseries string

const (
	DiscreteTimeseriesExprTimeseriesGlucose                  DiscreteTimeseriesExprTimeseries = "glucose"
	DiscreteTimeseriesExprTimeseriesHeartrate                DiscreteTimeseriesExprTimeseries = "heartrate"
	DiscreteTimeseriesExprTimeseriesHrv                      DiscreteTimeseriesExprTimeseries = "hrv"
	DiscreteTimeseriesExprTimeseriesIge                      DiscreteTimeseriesExprTimeseries = "ige"
	DiscreteTimeseriesExprTimeseriesIgg                      DiscreteTimeseriesExprTimeseries = "igg"
	DiscreteTimeseriesExprTimeseriesCholesterol              DiscreteTimeseriesExprTimeseries = "cholesterol"
	DiscreteTimeseriesExprTimeseriesWeight                   DiscreteTimeseriesExprTimeseries = "weight"
	DiscreteTimeseriesExprTimeseriesFat                      DiscreteTimeseriesExprTimeseries = "fat"
	DiscreteTimeseriesExprTimeseriesBloodOxygen              DiscreteTimeseriesExprTimeseries = "blood_oxygen"
	DiscreteTimeseriesExprTimeseriesElectrocardiogramVoltage DiscreteTimeseriesExprTimeseries = "electrocardiogram_voltage"
	DiscreteTimeseriesExprTimeseriesRespiratoryRate          DiscreteTimeseriesExprTimeseries = "respiratory_rate"
	DiscreteTimeseriesExprTimeseriesStressLevel              DiscreteTimeseriesExprTimeseries = "stress_level"
)

func NewDiscreteTimeseriesExprTimeseriesFromString(s string) (DiscreteTimeseriesExprTimeseries, error) {
	switch s {
	case "glucose":
		return DiscreteTimeseriesExprTimeseriesGlucose, nil
	case "heartrate":
		return DiscreteTimeseriesExprTimeseriesHeartrate, nil
	case "hrv":
		return DiscreteTimeseriesExprTimeseriesHrv, nil
	case "ige":
		return DiscreteTimeseriesExprTimeseriesIge, nil
	case "igg":
		return DiscreteTimeseriesExprTimeseriesIgg, nil
	case "cholesterol":
		return DiscreteTimeseriesExprTimeseriesCholesterol, nil
	case "weight":
		return DiscreteTimeseriesExprTimeseriesWeight, nil
	case "fat":
		return DiscreteTimeseriesExprTimeseriesFat, nil
	case "blood_oxygen":
		return DiscreteTimeseriesExprTimeseriesBloodOxygen, nil
	case "electrocardiogram_voltage":
		return DiscreteTimeseriesExprTimeseriesElectrocardiogramVoltage, nil
	case "respiratory_rate":
		return DiscreteTimeseriesExprTimeseriesRespiratoryRate, nil
	case "stress_level":
		return DiscreteTimeseriesExprTimeseriesStressLevel, nil
	}
	var t DiscreteTimeseriesExprTimeseries
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DiscreteTimeseriesExprTimeseries) Ptr() *DiscreteTimeseriesExprTimeseries {
	return &d
}

type GroupKeyColumnExpr struct {
	GroupKey *GroupKeyColumnExprGroupKey `json:"group_key,omitempty" url:"group_key,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GroupKeyColumnExpr) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupKeyColumnExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupKeyColumnExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupKeyColumnExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupKeyColumnExpr) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupKeyColumnExprGroupKey struct {
	Integer int
	Select  Select
}

func NewGroupKeyColumnExprGroupKeyFromInteger(value int) *GroupKeyColumnExprGroupKey {
	return &GroupKeyColumnExprGroupKey{Integer: value}
}

func NewGroupKeyColumnExprGroupKeyFromSelect(value Select) *GroupKeyColumnExprGroupKey {
	return &GroupKeyColumnExprGroupKey{Select: value}
}

func (g *GroupKeyColumnExprGroupKey) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		g.Integer = valueInteger
		return nil
	}
	var valueSelect Select
	if err := json.Unmarshal(data, &valueSelect); err == nil {
		g.Select = valueSelect
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, g)
}

func (g GroupKeyColumnExprGroupKey) MarshalJSON() ([]byte, error) {
	if g.Integer != 0 {
		return json.Marshal(g.Integer)
	}
	if g.Select != "" {
		return json.Marshal(g.Select)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", g)
}

type GroupKeyColumnExprGroupKeyVisitor interface {
	VisitInteger(int) error
	VisitSelect(Select) error
}

func (g *GroupKeyColumnExprGroupKey) Accept(visitor GroupKeyColumnExprGroupKeyVisitor) error {
	if g.Integer != 0 {
		return visitor.VisitInteger(g.Integer)
	}
	if g.Select != "" {
		return visitor.VisitSelect(g.Select)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", g)
}

type IndexColumnExpr struct {
	// ℹ️ This enum is non-exhaustive.
	Index IndexColumnExprIndex `json:"index" url:"index"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *IndexColumnExpr) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IndexColumnExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler IndexColumnExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndexColumnExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndexColumnExpr) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// ℹ️ This enum is non-exhaustive.
type IndexColumnExprIndex string

const (
	IndexColumnExprIndexSleep      IndexColumnExprIndex = "sleep"
	IndexColumnExprIndexActivity   IndexColumnExprIndex = "activity"
	IndexColumnExprIndexWorkout    IndexColumnExprIndex = "workout"
	IndexColumnExprIndexBody       IndexColumnExprIndex = "body"
	IndexColumnExprIndexMeal       IndexColumnExprIndex = "meal"
	IndexColumnExprIndexTimeseries IndexColumnExprIndex = "timeseries"
)

func NewIndexColumnExprIndexFromString(s string) (IndexColumnExprIndex, error) {
	switch s {
	case "sleep":
		return IndexColumnExprIndexSleep, nil
	case "activity":
		return IndexColumnExprIndexActivity, nil
	case "workout":
		return IndexColumnExprIndexWorkout, nil
	case "body":
		return IndexColumnExprIndexBody, nil
	case "meal":
		return IndexColumnExprIndexMeal, nil
	case "timeseries":
		return IndexColumnExprIndexTimeseries, nil
	}
	var t IndexColumnExprIndex
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IndexColumnExprIndex) Ptr() *IndexColumnExprIndex {
	return &i
}

type IntervalTimeseriesExpr struct {
	// ℹ️ This enum is non-exhaustive.
	Timeseries IntervalTimeseriesExprTimeseries `json:"timeseries" url:"timeseries"`
	Field      IntervalTimeseriesExprField      `json:"field" url:"field"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *IntervalTimeseriesExpr) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntervalTimeseriesExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler IntervalTimeseriesExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntervalTimeseriesExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntervalTimeseriesExpr) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IntervalTimeseriesExprField string

const (
	IntervalTimeseriesExprFieldSourceProvider  IntervalTimeseriesExprField = "source_provider"
	IntervalTimeseriesExprFieldSourceType      IntervalTimeseriesExprField = "source_type"
	IntervalTimeseriesExprFieldSourceAppId     IntervalTimeseriesExprField = "source_app_id"
	IntervalTimeseriesExprFieldSourceWorkoutId IntervalTimeseriesExprField = "source_workout_id"
	IntervalTimeseriesExprFieldSourceSport     IntervalTimeseriesExprField = "source_sport"
	IntervalTimeseriesExprFieldTimezoneOffset  IntervalTimeseriesExprField = "timezone_offset"
	IntervalTimeseriesExprFieldType            IntervalTimeseriesExprField = "type"
	IntervalTimeseriesExprFieldDuration        IntervalTimeseriesExprField = "duration"
	IntervalTimeseriesExprFieldValue           IntervalTimeseriesExprField = "value"
)

func NewIntervalTimeseriesExprFieldFromString(s string) (IntervalTimeseriesExprField, error) {
	switch s {
	case "source_provider":
		return IntervalTimeseriesExprFieldSourceProvider, nil
	case "source_type":
		return IntervalTimeseriesExprFieldSourceType, nil
	case "source_app_id":
		return IntervalTimeseriesExprFieldSourceAppId, nil
	case "source_workout_id":
		return IntervalTimeseriesExprFieldSourceWorkoutId, nil
	case "source_sport":
		return IntervalTimeseriesExprFieldSourceSport, nil
	case "timezone_offset":
		return IntervalTimeseriesExprFieldTimezoneOffset, nil
	case "type":
		return IntervalTimeseriesExprFieldType, nil
	case "duration":
		return IntervalTimeseriesExprFieldDuration, nil
	case "value":
		return IntervalTimeseriesExprFieldValue, nil
	}
	var t IntervalTimeseriesExprField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IntervalTimeseriesExprField) Ptr() *IntervalTimeseriesExprField {
	return &i
}

// ℹ️ This enum is non-exhaustive.
type IntervalTimeseriesExprTimeseries string

const (
	IntervalTimeseriesExprTimeseriesSteps                      IntervalTimeseriesExprTimeseries = "steps"
	IntervalTimeseriesExprTimeseriesDistance                   IntervalTimeseriesExprTimeseries = "distance"
	IntervalTimeseriesExprTimeseriesVo2Max                     IntervalTimeseriesExprTimeseries = "vo2_max"
	IntervalTimeseriesExprTimeseriesHeartRateAlert             IntervalTimeseriesExprTimeseries = "heart_rate_alert"
	IntervalTimeseriesExprTimeseriesStandHour                  IntervalTimeseriesExprTimeseries = "stand_hour"
	IntervalTimeseriesExprTimeseriesSleepBreathingDisturbance  IntervalTimeseriesExprTimeseries = "sleep_breathing_disturbance"
	IntervalTimeseriesExprTimeseriesInsulinInjection           IntervalTimeseriesExprTimeseries = "insulin_injection"
	IntervalTimeseriesExprTimeseriesWater                      IntervalTimeseriesExprTimeseries = "water"
	IntervalTimeseriesExprTimeseriesCaffeine                   IntervalTimeseriesExprTimeseries = "caffeine"
	IntervalTimeseriesExprTimeseriesMindfulnessMinutes         IntervalTimeseriesExprTimeseries = "mindfulness_minutes"
	IntervalTimeseriesExprTimeseriesCaloriesActive             IntervalTimeseriesExprTimeseries = "calories_active"
	IntervalTimeseriesExprTimeseriesFloorsClimbed              IntervalTimeseriesExprTimeseries = "floors_climbed"
	IntervalTimeseriesExprTimeseriesCaloriesBasal              IntervalTimeseriesExprTimeseries = "calories_basal"
	IntervalTimeseriesExprTimeseriesAfibBurden                 IntervalTimeseriesExprTimeseries = "afib_burden"
	IntervalTimeseriesExprTimeseriesStandDuration              IntervalTimeseriesExprTimeseries = "stand_duration"
	IntervalTimeseriesExprTimeseriesSleepApneaAlert            IntervalTimeseriesExprTimeseries = "sleep_apnea_alert"
	IntervalTimeseriesExprTimeseriesWheelchairPush             IntervalTimeseriesExprTimeseries = "wheelchair_push"
	IntervalTimeseriesExprTimeseriesForcedExpiratoryVolume1    IntervalTimeseriesExprTimeseries = "forced_expiratory_volume_1"
	IntervalTimeseriesExprTimeseriesForcedVitalCapacity        IntervalTimeseriesExprTimeseries = "forced_vital_capacity"
	IntervalTimeseriesExprTimeseriesPeakExpiratoryFlowRate     IntervalTimeseriesExprTimeseries = "peak_expiratory_flow_rate"
	IntervalTimeseriesExprTimeseriesInhalerUsage               IntervalTimeseriesExprTimeseries = "inhaler_usage"
	IntervalTimeseriesExprTimeseriesFall                       IntervalTimeseriesExprTimeseries = "fall"
	IntervalTimeseriesExprTimeseriesUvExposure                 IntervalTimeseriesExprTimeseries = "uv_exposure"
	IntervalTimeseriesExprTimeseriesDaylightExposure           IntervalTimeseriesExprTimeseries = "daylight_exposure"
	IntervalTimeseriesExprTimeseriesHandwashing                IntervalTimeseriesExprTimeseries = "handwashing"
	IntervalTimeseriesExprTimeseriesBasalBodyTemperature       IntervalTimeseriesExprTimeseries = "basal_body_temperature"
	IntervalTimeseriesExprTimeseriesBodyMassIndex              IntervalTimeseriesExprTimeseries = "body_mass_index"
	IntervalTimeseriesExprTimeseriesLeanBodyMass               IntervalTimeseriesExprTimeseries = "lean_body_mass"
	IntervalTimeseriesExprTimeseriesWaistCircumference         IntervalTimeseriesExprTimeseries = "waist_circumference"
	IntervalTimeseriesExprTimeseriesHeartRateRecoveryOneMinute IntervalTimeseriesExprTimeseries = "heart_rate_recovery_one_minute"
	IntervalTimeseriesExprTimeseriesWorkoutSwimmingStroke      IntervalTimeseriesExprTimeseries = "workout_swimming_stroke"
	IntervalTimeseriesExprTimeseriesWorkoutDistance            IntervalTimeseriesExprTimeseries = "workout_distance"
	IntervalTimeseriesExprTimeseriesCarbohydrates              IntervalTimeseriesExprTimeseries = "carbohydrates"
)

func NewIntervalTimeseriesExprTimeseriesFromString(s string) (IntervalTimeseriesExprTimeseries, error) {
	switch s {
	case "steps":
		return IntervalTimeseriesExprTimeseriesSteps, nil
	case "distance":
		return IntervalTimeseriesExprTimeseriesDistance, nil
	case "vo2_max":
		return IntervalTimeseriesExprTimeseriesVo2Max, nil
	case "heart_rate_alert":
		return IntervalTimeseriesExprTimeseriesHeartRateAlert, nil
	case "stand_hour":
		return IntervalTimeseriesExprTimeseriesStandHour, nil
	case "sleep_breathing_disturbance":
		return IntervalTimeseriesExprTimeseriesSleepBreathingDisturbance, nil
	case "insulin_injection":
		return IntervalTimeseriesExprTimeseriesInsulinInjection, nil
	case "water":
		return IntervalTimeseriesExprTimeseriesWater, nil
	case "caffeine":
		return IntervalTimeseriesExprTimeseriesCaffeine, nil
	case "mindfulness_minutes":
		return IntervalTimeseriesExprTimeseriesMindfulnessMinutes, nil
	case "calories_active":
		return IntervalTimeseriesExprTimeseriesCaloriesActive, nil
	case "floors_climbed":
		return IntervalTimeseriesExprTimeseriesFloorsClimbed, nil
	case "calories_basal":
		return IntervalTimeseriesExprTimeseriesCaloriesBasal, nil
	case "afib_burden":
		return IntervalTimeseriesExprTimeseriesAfibBurden, nil
	case "stand_duration":
		return IntervalTimeseriesExprTimeseriesStandDuration, nil
	case "sleep_apnea_alert":
		return IntervalTimeseriesExprTimeseriesSleepApneaAlert, nil
	case "wheelchair_push":
		return IntervalTimeseriesExprTimeseriesWheelchairPush, nil
	case "forced_expiratory_volume_1":
		return IntervalTimeseriesExprTimeseriesForcedExpiratoryVolume1, nil
	case "forced_vital_capacity":
		return IntervalTimeseriesExprTimeseriesForcedVitalCapacity, nil
	case "peak_expiratory_flow_rate":
		return IntervalTimeseriesExprTimeseriesPeakExpiratoryFlowRate, nil
	case "inhaler_usage":
		return IntervalTimeseriesExprTimeseriesInhalerUsage, nil
	case "fall":
		return IntervalTimeseriesExprTimeseriesFall, nil
	case "uv_exposure":
		return IntervalTimeseriesExprTimeseriesUvExposure, nil
	case "daylight_exposure":
		return IntervalTimeseriesExprTimeseriesDaylightExposure, nil
	case "handwashing":
		return IntervalTimeseriesExprTimeseriesHandwashing, nil
	case "basal_body_temperature":
		return IntervalTimeseriesExprTimeseriesBasalBodyTemperature, nil
	case "body_mass_index":
		return IntervalTimeseriesExprTimeseriesBodyMassIndex, nil
	case "lean_body_mass":
		return IntervalTimeseriesExprTimeseriesLeanBodyMass, nil
	case "waist_circumference":
		return IntervalTimeseriesExprTimeseriesWaistCircumference, nil
	case "heart_rate_recovery_one_minute":
		return IntervalTimeseriesExprTimeseriesHeartRateRecoveryOneMinute, nil
	case "workout_swimming_stroke":
		return IntervalTimeseriesExprTimeseriesWorkoutSwimmingStroke, nil
	case "workout_distance":
		return IntervalTimeseriesExprTimeseriesWorkoutDistance, nil
	case "carbohydrates":
		return IntervalTimeseriesExprTimeseriesCarbohydrates, nil
	}
	var t IntervalTimeseriesExprTimeseries
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IntervalTimeseriesExprTimeseries) Ptr() *IntervalTimeseriesExprTimeseries {
	return &i
}

type MealColumnExpr struct {
	// ℹ️ This enum is non-exhaustive.
	Meal MealColumnExprMeal `json:"meal" url:"meal"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MealColumnExpr) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MealColumnExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler MealColumnExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MealColumnExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MealColumnExpr) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// ℹ️ This enum is non-exhaustive.
type MealColumnExprMeal string

const (
	MealColumnExprMealCalories                 MealColumnExprMeal = "calories"
	MealColumnExprMealCarbohydrateGram         MealColumnExprMeal = "carbohydrate_gram"
	MealColumnExprMealProteinGram              MealColumnExprMeal = "protein_gram"
	MealColumnExprMealAlcoholGram              MealColumnExprMeal = "alcohol_gram"
	MealColumnExprMealWaterGram                MealColumnExprMeal = "water_gram"
	MealColumnExprMealFibreGram                MealColumnExprMeal = "fibre_gram"
	MealColumnExprMealSugarGram                MealColumnExprMeal = "sugar_gram"
	MealColumnExprMealCholesterolGram          MealColumnExprMeal = "cholesterol_gram"
	MealColumnExprMealSaturatedFatGram         MealColumnExprMeal = "saturated_fat_gram"
	MealColumnExprMealMonounsaturatedFatGram   MealColumnExprMeal = "monounsaturated_fat_gram"
	MealColumnExprMealPolyunsaturatedFatGram   MealColumnExprMeal = "polyunsaturated_fat_gram"
	MealColumnExprMealOmega3FatGram            MealColumnExprMeal = "omega3_fat_gram"
	MealColumnExprMealOmega6FatGram            MealColumnExprMeal = "omega6_fat_gram"
	MealColumnExprMealTotalFatGram             MealColumnExprMeal = "total_fat_gram"
	MealColumnExprMealSodiumMilligram          MealColumnExprMeal = "sodium_milligram"
	MealColumnExprMealPotassiumMilligram       MealColumnExprMeal = "potassium_milligram"
	MealColumnExprMealCalciumMilligram         MealColumnExprMeal = "calcium_milligram"
	MealColumnExprMealPhosphorusMilligram      MealColumnExprMeal = "phosphorus_milligram"
	MealColumnExprMealMagnesiumMilligram       MealColumnExprMeal = "magnesium_milligram"
	MealColumnExprMealIronMilligram            MealColumnExprMeal = "iron_milligram"
	MealColumnExprMealZincMilligram            MealColumnExprMeal = "zinc_milligram"
	MealColumnExprMealFluorideMilligram        MealColumnExprMeal = "fluoride_milligram"
	MealColumnExprMealChlorideMilligram        MealColumnExprMeal = "chloride_milligram"
	MealColumnExprMealVitaminAMilligram        MealColumnExprMeal = "vitamin_a_milligram"
	MealColumnExprMealVitaminB1Milligram       MealColumnExprMeal = "vitamin_b1_milligram"
	MealColumnExprMealRiboflavinMilligram      MealColumnExprMeal = "riboflavin_milligram"
	MealColumnExprMealNiacinMilligram          MealColumnExprMeal = "niacin_milligram"
	MealColumnExprMealPantothenicAcidMilligram MealColumnExprMeal = "pantothenic_acid_milligram"
	MealColumnExprMealVitaminB6Milligram       MealColumnExprMeal = "vitamin_b6_milligram"
	MealColumnExprMealBiotinMicrogram          MealColumnExprMeal = "biotin_microgram"
	MealColumnExprMealVitaminB12Microgram      MealColumnExprMeal = "vitamin_b12_microgram"
	MealColumnExprMealVitaminCMilligram        MealColumnExprMeal = "vitamin_c_milligram"
	MealColumnExprMealVitaminDMicrogram        MealColumnExprMeal = "vitamin_d_microgram"
	MealColumnExprMealVitaminEMilligram        MealColumnExprMeal = "vitamin_e_milligram"
	MealColumnExprMealVitaminKMicrogram        MealColumnExprMeal = "vitamin_k_microgram"
	MealColumnExprMealFolicAcidMicrogram       MealColumnExprMeal = "folic_acid_microgram"
	MealColumnExprMealChromiumMicrogram        MealColumnExprMeal = "chromium_microgram"
	MealColumnExprMealCopperMilligram          MealColumnExprMeal = "copper_milligram"
	MealColumnExprMealIodineMicrogram          MealColumnExprMeal = "iodine_microgram"
	MealColumnExprMealManganeseMilligram       MealColumnExprMeal = "manganese_milligram"
	MealColumnExprMealMolybdenumMicrogram      MealColumnExprMeal = "molybdenum_microgram"
	MealColumnExprMealSeleniumMicrogram        MealColumnExprMeal = "selenium_microgram"
	MealColumnExprMealDate                     MealColumnExprMeal = "date"
	MealColumnExprMealName                     MealColumnExprMeal = "name"
	MealColumnExprMealSourceType               MealColumnExprMeal = "source_type"
	MealColumnExprMealSourceProvider           MealColumnExprMeal = "source_provider"
	MealColumnExprMealSourceAppId              MealColumnExprMeal = "source_app_id"
	MealColumnExprMealSourceDeviceId           MealColumnExprMeal = "source_device_id"
)

func NewMealColumnExprMealFromString(s string) (MealColumnExprMeal, error) {
	switch s {
	case "calories":
		return MealColumnExprMealCalories, nil
	case "carbohydrate_gram":
		return MealColumnExprMealCarbohydrateGram, nil
	case "protein_gram":
		return MealColumnExprMealProteinGram, nil
	case "alcohol_gram":
		return MealColumnExprMealAlcoholGram, nil
	case "water_gram":
		return MealColumnExprMealWaterGram, nil
	case "fibre_gram":
		return MealColumnExprMealFibreGram, nil
	case "sugar_gram":
		return MealColumnExprMealSugarGram, nil
	case "cholesterol_gram":
		return MealColumnExprMealCholesterolGram, nil
	case "saturated_fat_gram":
		return MealColumnExprMealSaturatedFatGram, nil
	case "monounsaturated_fat_gram":
		return MealColumnExprMealMonounsaturatedFatGram, nil
	case "polyunsaturated_fat_gram":
		return MealColumnExprMealPolyunsaturatedFatGram, nil
	case "omega3_fat_gram":
		return MealColumnExprMealOmega3FatGram, nil
	case "omega6_fat_gram":
		return MealColumnExprMealOmega6FatGram, nil
	case "total_fat_gram":
		return MealColumnExprMealTotalFatGram, nil
	case "sodium_milligram":
		return MealColumnExprMealSodiumMilligram, nil
	case "potassium_milligram":
		return MealColumnExprMealPotassiumMilligram, nil
	case "calcium_milligram":
		return MealColumnExprMealCalciumMilligram, nil
	case "phosphorus_milligram":
		return MealColumnExprMealPhosphorusMilligram, nil
	case "magnesium_milligram":
		return MealColumnExprMealMagnesiumMilligram, nil
	case "iron_milligram":
		return MealColumnExprMealIronMilligram, nil
	case "zinc_milligram":
		return MealColumnExprMealZincMilligram, nil
	case "fluoride_milligram":
		return MealColumnExprMealFluorideMilligram, nil
	case "chloride_milligram":
		return MealColumnExprMealChlorideMilligram, nil
	case "vitamin_a_milligram":
		return MealColumnExprMealVitaminAMilligram, nil
	case "vitamin_b1_milligram":
		return MealColumnExprMealVitaminB1Milligram, nil
	case "riboflavin_milligram":
		return MealColumnExprMealRiboflavinMilligram, nil
	case "niacin_milligram":
		return MealColumnExprMealNiacinMilligram, nil
	case "pantothenic_acid_milligram":
		return MealColumnExprMealPantothenicAcidMilligram, nil
	case "vitamin_b6_milligram":
		return MealColumnExprMealVitaminB6Milligram, nil
	case "biotin_microgram":
		return MealColumnExprMealBiotinMicrogram, nil
	case "vitamin_b12_microgram":
		return MealColumnExprMealVitaminB12Microgram, nil
	case "vitamin_c_milligram":
		return MealColumnExprMealVitaminCMilligram, nil
	case "vitamin_d_microgram":
		return MealColumnExprMealVitaminDMicrogram, nil
	case "vitamin_e_milligram":
		return MealColumnExprMealVitaminEMilligram, nil
	case "vitamin_k_microgram":
		return MealColumnExprMealVitaminKMicrogram, nil
	case "folic_acid_microgram":
		return MealColumnExprMealFolicAcidMicrogram, nil
	case "chromium_microgram":
		return MealColumnExprMealChromiumMicrogram, nil
	case "copper_milligram":
		return MealColumnExprMealCopperMilligram, nil
	case "iodine_microgram":
		return MealColumnExprMealIodineMicrogram, nil
	case "manganese_milligram":
		return MealColumnExprMealManganeseMilligram, nil
	case "molybdenum_microgram":
		return MealColumnExprMealMolybdenumMicrogram, nil
	case "selenium_microgram":
		return MealColumnExprMealSeleniumMicrogram, nil
	case "date":
		return MealColumnExprMealDate, nil
	case "name":
		return MealColumnExprMealName, nil
	case "source_type":
		return MealColumnExprMealSourceType, nil
	case "source_provider":
		return MealColumnExprMealSourceProvider, nil
	case "source_app_id":
		return MealColumnExprMealSourceAppId, nil
	case "source_device_id":
		return MealColumnExprMealSourceDeviceId, nil
	}
	var t MealColumnExprMeal
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MealColumnExprMeal) Ptr() *MealColumnExprMeal {
	return &m
}

type NoteTimeseriesExpr struct {
	Field      NoteTimeseriesExprField `json:"field" url:"field"`
	timeseries string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NoteTimeseriesExpr) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NoteTimeseriesExpr) Timeseries() string {
	return n.timeseries
}

func (n *NoteTimeseriesExpr) UnmarshalJSON(data []byte) error {
	type embed NoteTimeseriesExpr
	var unmarshaler = struct {
		embed
		Timeseries string `json:"timeseries"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = NoteTimeseriesExpr(unmarshaler.embed)
	if unmarshaler.Timeseries != "note" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", n, "note", unmarshaler.Timeseries)
	}
	n.timeseries = unmarshaler.Timeseries

	extraProperties, err := core.ExtractExtraProperties(data, *n, "timeseries")
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NoteTimeseriesExpr) MarshalJSON() ([]byte, error) {
	type embed NoteTimeseriesExpr
	var marshaler = struct {
		embed
		Timeseries string `json:"timeseries"`
	}{
		embed:      embed(*n),
		Timeseries: "note",
	}
	return json.Marshal(marshaler)
}

func (n *NoteTimeseriesExpr) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NoteTimeseriesExprField string

const (
	NoteTimeseriesExprFieldSourceProvider  NoteTimeseriesExprField = "source_provider"
	NoteTimeseriesExprFieldSourceType      NoteTimeseriesExprField = "source_type"
	NoteTimeseriesExprFieldSourceAppId     NoteTimeseriesExprField = "source_app_id"
	NoteTimeseriesExprFieldSourceWorkoutId NoteTimeseriesExprField = "source_workout_id"
	NoteTimeseriesExprFieldSourceSport     NoteTimeseriesExprField = "source_sport"
	NoteTimeseriesExprFieldTimezoneOffset  NoteTimeseriesExprField = "timezone_offset"
	NoteTimeseriesExprFieldType            NoteTimeseriesExprField = "type"
	NoteTimeseriesExprFieldTags            NoteTimeseriesExprField = "tags"
	NoteTimeseriesExprFieldContent         NoteTimeseriesExprField = "content"
)

func NewNoteTimeseriesExprFieldFromString(s string) (NoteTimeseriesExprField, error) {
	switch s {
	case "source_provider":
		return NoteTimeseriesExprFieldSourceProvider, nil
	case "source_type":
		return NoteTimeseriesExprFieldSourceType, nil
	case "source_app_id":
		return NoteTimeseriesExprFieldSourceAppId, nil
	case "source_workout_id":
		return NoteTimeseriesExprFieldSourceWorkoutId, nil
	case "source_sport":
		return NoteTimeseriesExprFieldSourceSport, nil
	case "timezone_offset":
		return NoteTimeseriesExprFieldTimezoneOffset, nil
	case "type":
		return NoteTimeseriesExprFieldType, nil
	case "tags":
		return NoteTimeseriesExprFieldTags, nil
	case "content":
		return NoteTimeseriesExprFieldContent, nil
	}
	var t NoteTimeseriesExprField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NoteTimeseriesExprField) Ptr() *NoteTimeseriesExprField {
	return &n
}

type Period struct {
	Value *int `json:"value,omitempty" url:"value,omitempty"`
	// ℹ️ This enum is non-exhaustive.
	Unit PeriodUnit `json:"unit" url:"unit"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *Period) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Period) UnmarshalJSON(data []byte) error {
	type unmarshaler Period
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Period(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Period) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// ℹ️ This enum is non-exhaustive.
type PeriodUnit string

const (
	PeriodUnitMinute PeriodUnit = "minute"
	PeriodUnitHour   PeriodUnit = "hour"
	PeriodUnitDay    PeriodUnit = "day"
	PeriodUnitWeek   PeriodUnit = "week"
	PeriodUnitMonth  PeriodUnit = "month"
	PeriodUnitYear   PeriodUnit = "year"
)

func NewPeriodUnitFromString(s string) (PeriodUnit, error) {
	switch s {
	case "minute":
		return PeriodUnitMinute, nil
	case "hour":
		return PeriodUnitHour, nil
	case "day":
		return PeriodUnitDay, nil
	case "week":
		return PeriodUnitWeek, nil
	case "month":
		return PeriodUnitMonth, nil
	case "year":
		return PeriodUnitYear, nil
	}
	var t PeriodUnit
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PeriodUnit) Ptr() *PeriodUnit {
	return &p
}

type Placeholder struct {
	Placeholder bool `json:"placeholder" url:"placeholder"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *Placeholder) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Placeholder) UnmarshalJSON(data []byte) error {
	type unmarshaler Placeholder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Placeholder(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Placeholder) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Query struct {
	Select  []*QuerySelectItem  `json:"select,omitempty" url:"select,omitempty"`
	GroupBy []*QueryGroupByItem `json:"group_by,omitempty" url:"group_by,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *Query) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *Query) UnmarshalJSON(data []byte) error {
	type unmarshaler Query
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = Query(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = json.RawMessage(data)
	return nil
}

func (q *Query) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryConfig struct {
	ProviderPriorityOverrides []*QueryConfigProviderPriorityOverridesItem `json:"provider_priority_overrides,omitempty" url:"provider_priority_overrides,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *QueryConfig) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryConfig(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = json.RawMessage(data)
	return nil
}

func (q *QueryConfig) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QueryConfigProviderPriorityOverridesItem struct {
	Providers Providers
	Labs      Labs
}

func NewQueryConfigProviderPriorityOverridesItemFromProviders(value Providers) *QueryConfigProviderPriorityOverridesItem {
	return &QueryConfigProviderPriorityOverridesItem{Providers: value}
}

func NewQueryConfigProviderPriorityOverridesItemFromLabs(value Labs) *QueryConfigProviderPriorityOverridesItem {
	return &QueryConfigProviderPriorityOverridesItem{Labs: value}
}

func (q *QueryConfigProviderPriorityOverridesItem) UnmarshalJSON(data []byte) error {
	var valueProviders Providers
	if err := json.Unmarshal(data, &valueProviders); err == nil {
		q.Providers = valueProviders
		return nil
	}
	var valueLabs Labs
	if err := json.Unmarshal(data, &valueLabs); err == nil {
		q.Labs = valueLabs
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, q)
}

func (q QueryConfigProviderPriorityOverridesItem) MarshalJSON() ([]byte, error) {
	if q.Providers != "" {
		return json.Marshal(q.Providers)
	}
	if q.Labs != "" {
		return json.Marshal(q.Labs)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", q)
}

type QueryConfigProviderPriorityOverridesItemVisitor interface {
	VisitProviders(Providers) error
	VisitLabs(Labs) error
}

func (q *QueryConfigProviderPriorityOverridesItem) Accept(visitor QueryConfigProviderPriorityOverridesItemVisitor) error {
	if q.Providers != "" {
		return visitor.VisitProviders(q.Providers)
	}
	if q.Labs != "" {
		return visitor.VisitLabs(q.Labs)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", q)
}

type QueryGroupByItem struct {
	DateTruncExpr                 *DateTruncExpr
	DatePartExpr                  *DatePartExpr
	SleepColumnExpr               *SleepColumnExpr
	ActivityColumnExpr            *ActivityColumnExpr
	WorkoutColumnExpr             *WorkoutColumnExpr
	BodyColumnExpr                *BodyColumnExpr
	MealColumnExpr                *MealColumnExpr
	SleepScoreValueMacroExpr      *SleepScoreValueMacroExpr
	ChronotypeValueMacroExpr      *ChronotypeValueMacroExpr
	UnrecognizedValueMacroExpr    *UnrecognizedValueMacroExpr
	DiscreteTimeseriesExpr        *DiscreteTimeseriesExpr
	IntervalTimeseriesExpr        *IntervalTimeseriesExpr
	BloodPressureTimeseriesExpr   *BloodPressureTimeseriesExpr
	TemperatureTimeseriesExpr     *TemperatureTimeseriesExpr
	WorkoutDurationTimeseriesExpr *WorkoutDurationTimeseriesExpr
	NoteTimeseriesExpr            *NoteTimeseriesExpr
	SourceColumnExpr              *SourceColumnExpr
}

func NewQueryGroupByItemFromDateTruncExpr(value *DateTruncExpr) *QueryGroupByItem {
	return &QueryGroupByItem{DateTruncExpr: value}
}

func NewQueryGroupByItemFromDatePartExpr(value *DatePartExpr) *QueryGroupByItem {
	return &QueryGroupByItem{DatePartExpr: value}
}

func NewQueryGroupByItemFromSleepColumnExpr(value *SleepColumnExpr) *QueryGroupByItem {
	return &QueryGroupByItem{SleepColumnExpr: value}
}

func NewQueryGroupByItemFromActivityColumnExpr(value *ActivityColumnExpr) *QueryGroupByItem {
	return &QueryGroupByItem{ActivityColumnExpr: value}
}

func NewQueryGroupByItemFromWorkoutColumnExpr(value *WorkoutColumnExpr) *QueryGroupByItem {
	return &QueryGroupByItem{WorkoutColumnExpr: value}
}

func NewQueryGroupByItemFromBodyColumnExpr(value *BodyColumnExpr) *QueryGroupByItem {
	return &QueryGroupByItem{BodyColumnExpr: value}
}

func NewQueryGroupByItemFromMealColumnExpr(value *MealColumnExpr) *QueryGroupByItem {
	return &QueryGroupByItem{MealColumnExpr: value}
}

func NewQueryGroupByItemFromSleepScoreValueMacroExpr(value *SleepScoreValueMacroExpr) *QueryGroupByItem {
	return &QueryGroupByItem{SleepScoreValueMacroExpr: value}
}

func NewQueryGroupByItemFromChronotypeValueMacroExpr(value *ChronotypeValueMacroExpr) *QueryGroupByItem {
	return &QueryGroupByItem{ChronotypeValueMacroExpr: value}
}

func NewQueryGroupByItemFromUnrecognizedValueMacroExpr(value *UnrecognizedValueMacroExpr) *QueryGroupByItem {
	return &QueryGroupByItem{UnrecognizedValueMacroExpr: value}
}

func NewQueryGroupByItemFromDiscreteTimeseriesExpr(value *DiscreteTimeseriesExpr) *QueryGroupByItem {
	return &QueryGroupByItem{DiscreteTimeseriesExpr: value}
}

func NewQueryGroupByItemFromIntervalTimeseriesExpr(value *IntervalTimeseriesExpr) *QueryGroupByItem {
	return &QueryGroupByItem{IntervalTimeseriesExpr: value}
}

func NewQueryGroupByItemFromBloodPressureTimeseriesExpr(value *BloodPressureTimeseriesExpr) *QueryGroupByItem {
	return &QueryGroupByItem{BloodPressureTimeseriesExpr: value}
}

func NewQueryGroupByItemFromTemperatureTimeseriesExpr(value *TemperatureTimeseriesExpr) *QueryGroupByItem {
	return &QueryGroupByItem{TemperatureTimeseriesExpr: value}
}

func NewQueryGroupByItemFromWorkoutDurationTimeseriesExpr(value *WorkoutDurationTimeseriesExpr) *QueryGroupByItem {
	return &QueryGroupByItem{WorkoutDurationTimeseriesExpr: value}
}

func NewQueryGroupByItemFromNoteTimeseriesExpr(value *NoteTimeseriesExpr) *QueryGroupByItem {
	return &QueryGroupByItem{NoteTimeseriesExpr: value}
}

func NewQueryGroupByItemFromSourceColumnExpr(value *SourceColumnExpr) *QueryGroupByItem {
	return &QueryGroupByItem{SourceColumnExpr: value}
}

func (q *QueryGroupByItem) UnmarshalJSON(data []byte) error {
	valueDateTruncExpr := new(DateTruncExpr)
	if err := json.Unmarshal(data, &valueDateTruncExpr); err == nil {
		q.DateTruncExpr = valueDateTruncExpr
		return nil
	}
	valueDatePartExpr := new(DatePartExpr)
	if err := json.Unmarshal(data, &valueDatePartExpr); err == nil {
		q.DatePartExpr = valueDatePartExpr
		return nil
	}
	valueSleepColumnExpr := new(SleepColumnExpr)
	if err := json.Unmarshal(data, &valueSleepColumnExpr); err == nil {
		q.SleepColumnExpr = valueSleepColumnExpr
		return nil
	}
	valueActivityColumnExpr := new(ActivityColumnExpr)
	if err := json.Unmarshal(data, &valueActivityColumnExpr); err == nil {
		q.ActivityColumnExpr = valueActivityColumnExpr
		return nil
	}
	valueWorkoutColumnExpr := new(WorkoutColumnExpr)
	if err := json.Unmarshal(data, &valueWorkoutColumnExpr); err == nil {
		q.WorkoutColumnExpr = valueWorkoutColumnExpr
		return nil
	}
	valueBodyColumnExpr := new(BodyColumnExpr)
	if err := json.Unmarshal(data, &valueBodyColumnExpr); err == nil {
		q.BodyColumnExpr = valueBodyColumnExpr
		return nil
	}
	valueMealColumnExpr := new(MealColumnExpr)
	if err := json.Unmarshal(data, &valueMealColumnExpr); err == nil {
		q.MealColumnExpr = valueMealColumnExpr
		return nil
	}
	valueSleepScoreValueMacroExpr := new(SleepScoreValueMacroExpr)
	if err := json.Unmarshal(data, &valueSleepScoreValueMacroExpr); err == nil {
		q.SleepScoreValueMacroExpr = valueSleepScoreValueMacroExpr
		return nil
	}
	valueChronotypeValueMacroExpr := new(ChronotypeValueMacroExpr)
	if err := json.Unmarshal(data, &valueChronotypeValueMacroExpr); err == nil {
		q.ChronotypeValueMacroExpr = valueChronotypeValueMacroExpr
		return nil
	}
	valueUnrecognizedValueMacroExpr := new(UnrecognizedValueMacroExpr)
	if err := json.Unmarshal(data, &valueUnrecognizedValueMacroExpr); err == nil {
		q.UnrecognizedValueMacroExpr = valueUnrecognizedValueMacroExpr
		return nil
	}
	valueDiscreteTimeseriesExpr := new(DiscreteTimeseriesExpr)
	if err := json.Unmarshal(data, &valueDiscreteTimeseriesExpr); err == nil {
		q.DiscreteTimeseriesExpr = valueDiscreteTimeseriesExpr
		return nil
	}
	valueIntervalTimeseriesExpr := new(IntervalTimeseriesExpr)
	if err := json.Unmarshal(data, &valueIntervalTimeseriesExpr); err == nil {
		q.IntervalTimeseriesExpr = valueIntervalTimeseriesExpr
		return nil
	}
	valueBloodPressureTimeseriesExpr := new(BloodPressureTimeseriesExpr)
	if err := json.Unmarshal(data, &valueBloodPressureTimeseriesExpr); err == nil {
		q.BloodPressureTimeseriesExpr = valueBloodPressureTimeseriesExpr
		return nil
	}
	valueTemperatureTimeseriesExpr := new(TemperatureTimeseriesExpr)
	if err := json.Unmarshal(data, &valueTemperatureTimeseriesExpr); err == nil {
		q.TemperatureTimeseriesExpr = valueTemperatureTimeseriesExpr
		return nil
	}
	valueWorkoutDurationTimeseriesExpr := new(WorkoutDurationTimeseriesExpr)
	if err := json.Unmarshal(data, &valueWorkoutDurationTimeseriesExpr); err == nil {
		q.WorkoutDurationTimeseriesExpr = valueWorkoutDurationTimeseriesExpr
		return nil
	}
	valueNoteTimeseriesExpr := new(NoteTimeseriesExpr)
	if err := json.Unmarshal(data, &valueNoteTimeseriesExpr); err == nil {
		q.NoteTimeseriesExpr = valueNoteTimeseriesExpr
		return nil
	}
	valueSourceColumnExpr := new(SourceColumnExpr)
	if err := json.Unmarshal(data, &valueSourceColumnExpr); err == nil {
		q.SourceColumnExpr = valueSourceColumnExpr
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, q)
}

func (q QueryGroupByItem) MarshalJSON() ([]byte, error) {
	if q.DateTruncExpr != nil {
		return json.Marshal(q.DateTruncExpr)
	}
	if q.DatePartExpr != nil {
		return json.Marshal(q.DatePartExpr)
	}
	if q.SleepColumnExpr != nil {
		return json.Marshal(q.SleepColumnExpr)
	}
	if q.ActivityColumnExpr != nil {
		return json.Marshal(q.ActivityColumnExpr)
	}
	if q.WorkoutColumnExpr != nil {
		return json.Marshal(q.WorkoutColumnExpr)
	}
	if q.BodyColumnExpr != nil {
		return json.Marshal(q.BodyColumnExpr)
	}
	if q.MealColumnExpr != nil {
		return json.Marshal(q.MealColumnExpr)
	}
	if q.SleepScoreValueMacroExpr != nil {
		return json.Marshal(q.SleepScoreValueMacroExpr)
	}
	if q.ChronotypeValueMacroExpr != nil {
		return json.Marshal(q.ChronotypeValueMacroExpr)
	}
	if q.UnrecognizedValueMacroExpr != nil {
		return json.Marshal(q.UnrecognizedValueMacroExpr)
	}
	if q.DiscreteTimeseriesExpr != nil {
		return json.Marshal(q.DiscreteTimeseriesExpr)
	}
	if q.IntervalTimeseriesExpr != nil {
		return json.Marshal(q.IntervalTimeseriesExpr)
	}
	if q.BloodPressureTimeseriesExpr != nil {
		return json.Marshal(q.BloodPressureTimeseriesExpr)
	}
	if q.TemperatureTimeseriesExpr != nil {
		return json.Marshal(q.TemperatureTimeseriesExpr)
	}
	if q.WorkoutDurationTimeseriesExpr != nil {
		return json.Marshal(q.WorkoutDurationTimeseriesExpr)
	}
	if q.NoteTimeseriesExpr != nil {
		return json.Marshal(q.NoteTimeseriesExpr)
	}
	if q.SourceColumnExpr != nil {
		return json.Marshal(q.SourceColumnExpr)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", q)
}

type QueryGroupByItemVisitor interface {
	VisitDateTruncExpr(*DateTruncExpr) error
	VisitDatePartExpr(*DatePartExpr) error
	VisitSleepColumnExpr(*SleepColumnExpr) error
	VisitActivityColumnExpr(*ActivityColumnExpr) error
	VisitWorkoutColumnExpr(*WorkoutColumnExpr) error
	VisitBodyColumnExpr(*BodyColumnExpr) error
	VisitMealColumnExpr(*MealColumnExpr) error
	VisitSleepScoreValueMacroExpr(*SleepScoreValueMacroExpr) error
	VisitChronotypeValueMacroExpr(*ChronotypeValueMacroExpr) error
	VisitUnrecognizedValueMacroExpr(*UnrecognizedValueMacroExpr) error
	VisitDiscreteTimeseriesExpr(*DiscreteTimeseriesExpr) error
	VisitIntervalTimeseriesExpr(*IntervalTimeseriesExpr) error
	VisitBloodPressureTimeseriesExpr(*BloodPressureTimeseriesExpr) error
	VisitTemperatureTimeseriesExpr(*TemperatureTimeseriesExpr) error
	VisitWorkoutDurationTimeseriesExpr(*WorkoutDurationTimeseriesExpr) error
	VisitNoteTimeseriesExpr(*NoteTimeseriesExpr) error
	VisitSourceColumnExpr(*SourceColumnExpr) error
}

func (q *QueryGroupByItem) Accept(visitor QueryGroupByItemVisitor) error {
	if q.DateTruncExpr != nil {
		return visitor.VisitDateTruncExpr(q.DateTruncExpr)
	}
	if q.DatePartExpr != nil {
		return visitor.VisitDatePartExpr(q.DatePartExpr)
	}
	if q.SleepColumnExpr != nil {
		return visitor.VisitSleepColumnExpr(q.SleepColumnExpr)
	}
	if q.ActivityColumnExpr != nil {
		return visitor.VisitActivityColumnExpr(q.ActivityColumnExpr)
	}
	if q.WorkoutColumnExpr != nil {
		return visitor.VisitWorkoutColumnExpr(q.WorkoutColumnExpr)
	}
	if q.BodyColumnExpr != nil {
		return visitor.VisitBodyColumnExpr(q.BodyColumnExpr)
	}
	if q.MealColumnExpr != nil {
		return visitor.VisitMealColumnExpr(q.MealColumnExpr)
	}
	if q.SleepScoreValueMacroExpr != nil {
		return visitor.VisitSleepScoreValueMacroExpr(q.SleepScoreValueMacroExpr)
	}
	if q.ChronotypeValueMacroExpr != nil {
		return visitor.VisitChronotypeValueMacroExpr(q.ChronotypeValueMacroExpr)
	}
	if q.UnrecognizedValueMacroExpr != nil {
		return visitor.VisitUnrecognizedValueMacroExpr(q.UnrecognizedValueMacroExpr)
	}
	if q.DiscreteTimeseriesExpr != nil {
		return visitor.VisitDiscreteTimeseriesExpr(q.DiscreteTimeseriesExpr)
	}
	if q.IntervalTimeseriesExpr != nil {
		return visitor.VisitIntervalTimeseriesExpr(q.IntervalTimeseriesExpr)
	}
	if q.BloodPressureTimeseriesExpr != nil {
		return visitor.VisitBloodPressureTimeseriesExpr(q.BloodPressureTimeseriesExpr)
	}
	if q.TemperatureTimeseriesExpr != nil {
		return visitor.VisitTemperatureTimeseriesExpr(q.TemperatureTimeseriesExpr)
	}
	if q.WorkoutDurationTimeseriesExpr != nil {
		return visitor.VisitWorkoutDurationTimeseriesExpr(q.WorkoutDurationTimeseriesExpr)
	}
	if q.NoteTimeseriesExpr != nil {
		return visitor.VisitNoteTimeseriesExpr(q.NoteTimeseriesExpr)
	}
	if q.SourceColumnExpr != nil {
		return visitor.VisitSourceColumnExpr(q.SourceColumnExpr)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", q)
}

type QuerySelectItem struct {
	AggregateExpr                 *AggregateExpr
	GroupKeyColumnExpr            *GroupKeyColumnExpr
	SleepColumnExpr               *SleepColumnExpr
	ActivityColumnExpr            *ActivityColumnExpr
	WorkoutColumnExpr             *WorkoutColumnExpr
	BodyColumnExpr                *BodyColumnExpr
	MealColumnExpr                *MealColumnExpr
	SleepScoreValueMacroExpr      *SleepScoreValueMacroExpr
	ChronotypeValueMacroExpr      *ChronotypeValueMacroExpr
	UnrecognizedValueMacroExpr    *UnrecognizedValueMacroExpr
	DiscreteTimeseriesExpr        *DiscreteTimeseriesExpr
	IntervalTimeseriesExpr        *IntervalTimeseriesExpr
	BloodPressureTimeseriesExpr   *BloodPressureTimeseriesExpr
	TemperatureTimeseriesExpr     *TemperatureTimeseriesExpr
	WorkoutDurationTimeseriesExpr *WorkoutDurationTimeseriesExpr
	NoteTimeseriesExpr            *NoteTimeseriesExpr
	IndexColumnExpr               *IndexColumnExpr
	SourceColumnExpr              *SourceColumnExpr
}

func NewQuerySelectItemFromAggregateExpr(value *AggregateExpr) *QuerySelectItem {
	return &QuerySelectItem{AggregateExpr: value}
}

func NewQuerySelectItemFromGroupKeyColumnExpr(value *GroupKeyColumnExpr) *QuerySelectItem {
	return &QuerySelectItem{GroupKeyColumnExpr: value}
}

func NewQuerySelectItemFromSleepColumnExpr(value *SleepColumnExpr) *QuerySelectItem {
	return &QuerySelectItem{SleepColumnExpr: value}
}

func NewQuerySelectItemFromActivityColumnExpr(value *ActivityColumnExpr) *QuerySelectItem {
	return &QuerySelectItem{ActivityColumnExpr: value}
}

func NewQuerySelectItemFromWorkoutColumnExpr(value *WorkoutColumnExpr) *QuerySelectItem {
	return &QuerySelectItem{WorkoutColumnExpr: value}
}

func NewQuerySelectItemFromBodyColumnExpr(value *BodyColumnExpr) *QuerySelectItem {
	return &QuerySelectItem{BodyColumnExpr: value}
}

func NewQuerySelectItemFromMealColumnExpr(value *MealColumnExpr) *QuerySelectItem {
	return &QuerySelectItem{MealColumnExpr: value}
}

func NewQuerySelectItemFromSleepScoreValueMacroExpr(value *SleepScoreValueMacroExpr) *QuerySelectItem {
	return &QuerySelectItem{SleepScoreValueMacroExpr: value}
}

func NewQuerySelectItemFromChronotypeValueMacroExpr(value *ChronotypeValueMacroExpr) *QuerySelectItem {
	return &QuerySelectItem{ChronotypeValueMacroExpr: value}
}

func NewQuerySelectItemFromUnrecognizedValueMacroExpr(value *UnrecognizedValueMacroExpr) *QuerySelectItem {
	return &QuerySelectItem{UnrecognizedValueMacroExpr: value}
}

func NewQuerySelectItemFromDiscreteTimeseriesExpr(value *DiscreteTimeseriesExpr) *QuerySelectItem {
	return &QuerySelectItem{DiscreteTimeseriesExpr: value}
}

func NewQuerySelectItemFromIntervalTimeseriesExpr(value *IntervalTimeseriesExpr) *QuerySelectItem {
	return &QuerySelectItem{IntervalTimeseriesExpr: value}
}

func NewQuerySelectItemFromBloodPressureTimeseriesExpr(value *BloodPressureTimeseriesExpr) *QuerySelectItem {
	return &QuerySelectItem{BloodPressureTimeseriesExpr: value}
}

func NewQuerySelectItemFromTemperatureTimeseriesExpr(value *TemperatureTimeseriesExpr) *QuerySelectItem {
	return &QuerySelectItem{TemperatureTimeseriesExpr: value}
}

func NewQuerySelectItemFromWorkoutDurationTimeseriesExpr(value *WorkoutDurationTimeseriesExpr) *QuerySelectItem {
	return &QuerySelectItem{WorkoutDurationTimeseriesExpr: value}
}

func NewQuerySelectItemFromNoteTimeseriesExpr(value *NoteTimeseriesExpr) *QuerySelectItem {
	return &QuerySelectItem{NoteTimeseriesExpr: value}
}

func NewQuerySelectItemFromIndexColumnExpr(value *IndexColumnExpr) *QuerySelectItem {
	return &QuerySelectItem{IndexColumnExpr: value}
}

func NewQuerySelectItemFromSourceColumnExpr(value *SourceColumnExpr) *QuerySelectItem {
	return &QuerySelectItem{SourceColumnExpr: value}
}

func (q *QuerySelectItem) UnmarshalJSON(data []byte) error {
	valueAggregateExpr := new(AggregateExpr)
	if err := json.Unmarshal(data, &valueAggregateExpr); err == nil {
		q.AggregateExpr = valueAggregateExpr
		return nil
	}
	valueGroupKeyColumnExpr := new(GroupKeyColumnExpr)
	if err := json.Unmarshal(data, &valueGroupKeyColumnExpr); err == nil {
		q.GroupKeyColumnExpr = valueGroupKeyColumnExpr
		return nil
	}
	valueSleepColumnExpr := new(SleepColumnExpr)
	if err := json.Unmarshal(data, &valueSleepColumnExpr); err == nil {
		q.SleepColumnExpr = valueSleepColumnExpr
		return nil
	}
	valueActivityColumnExpr := new(ActivityColumnExpr)
	if err := json.Unmarshal(data, &valueActivityColumnExpr); err == nil {
		q.ActivityColumnExpr = valueActivityColumnExpr
		return nil
	}
	valueWorkoutColumnExpr := new(WorkoutColumnExpr)
	if err := json.Unmarshal(data, &valueWorkoutColumnExpr); err == nil {
		q.WorkoutColumnExpr = valueWorkoutColumnExpr
		return nil
	}
	valueBodyColumnExpr := new(BodyColumnExpr)
	if err := json.Unmarshal(data, &valueBodyColumnExpr); err == nil {
		q.BodyColumnExpr = valueBodyColumnExpr
		return nil
	}
	valueMealColumnExpr := new(MealColumnExpr)
	if err := json.Unmarshal(data, &valueMealColumnExpr); err == nil {
		q.MealColumnExpr = valueMealColumnExpr
		return nil
	}
	valueSleepScoreValueMacroExpr := new(SleepScoreValueMacroExpr)
	if err := json.Unmarshal(data, &valueSleepScoreValueMacroExpr); err == nil {
		q.SleepScoreValueMacroExpr = valueSleepScoreValueMacroExpr
		return nil
	}
	valueChronotypeValueMacroExpr := new(ChronotypeValueMacroExpr)
	if err := json.Unmarshal(data, &valueChronotypeValueMacroExpr); err == nil {
		q.ChronotypeValueMacroExpr = valueChronotypeValueMacroExpr
		return nil
	}
	valueUnrecognizedValueMacroExpr := new(UnrecognizedValueMacroExpr)
	if err := json.Unmarshal(data, &valueUnrecognizedValueMacroExpr); err == nil {
		q.UnrecognizedValueMacroExpr = valueUnrecognizedValueMacroExpr
		return nil
	}
	valueDiscreteTimeseriesExpr := new(DiscreteTimeseriesExpr)
	if err := json.Unmarshal(data, &valueDiscreteTimeseriesExpr); err == nil {
		q.DiscreteTimeseriesExpr = valueDiscreteTimeseriesExpr
		return nil
	}
	valueIntervalTimeseriesExpr := new(IntervalTimeseriesExpr)
	if err := json.Unmarshal(data, &valueIntervalTimeseriesExpr); err == nil {
		q.IntervalTimeseriesExpr = valueIntervalTimeseriesExpr
		return nil
	}
	valueBloodPressureTimeseriesExpr := new(BloodPressureTimeseriesExpr)
	if err := json.Unmarshal(data, &valueBloodPressureTimeseriesExpr); err == nil {
		q.BloodPressureTimeseriesExpr = valueBloodPressureTimeseriesExpr
		return nil
	}
	valueTemperatureTimeseriesExpr := new(TemperatureTimeseriesExpr)
	if err := json.Unmarshal(data, &valueTemperatureTimeseriesExpr); err == nil {
		q.TemperatureTimeseriesExpr = valueTemperatureTimeseriesExpr
		return nil
	}
	valueWorkoutDurationTimeseriesExpr := new(WorkoutDurationTimeseriesExpr)
	if err := json.Unmarshal(data, &valueWorkoutDurationTimeseriesExpr); err == nil {
		q.WorkoutDurationTimeseriesExpr = valueWorkoutDurationTimeseriesExpr
		return nil
	}
	valueNoteTimeseriesExpr := new(NoteTimeseriesExpr)
	if err := json.Unmarshal(data, &valueNoteTimeseriesExpr); err == nil {
		q.NoteTimeseriesExpr = valueNoteTimeseriesExpr
		return nil
	}
	valueIndexColumnExpr := new(IndexColumnExpr)
	if err := json.Unmarshal(data, &valueIndexColumnExpr); err == nil {
		q.IndexColumnExpr = valueIndexColumnExpr
		return nil
	}
	valueSourceColumnExpr := new(SourceColumnExpr)
	if err := json.Unmarshal(data, &valueSourceColumnExpr); err == nil {
		q.SourceColumnExpr = valueSourceColumnExpr
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, q)
}

func (q QuerySelectItem) MarshalJSON() ([]byte, error) {
	if q.AggregateExpr != nil {
		return json.Marshal(q.AggregateExpr)
	}
	if q.GroupKeyColumnExpr != nil {
		return json.Marshal(q.GroupKeyColumnExpr)
	}
	if q.SleepColumnExpr != nil {
		return json.Marshal(q.SleepColumnExpr)
	}
	if q.ActivityColumnExpr != nil {
		return json.Marshal(q.ActivityColumnExpr)
	}
	if q.WorkoutColumnExpr != nil {
		return json.Marshal(q.WorkoutColumnExpr)
	}
	if q.BodyColumnExpr != nil {
		return json.Marshal(q.BodyColumnExpr)
	}
	if q.MealColumnExpr != nil {
		return json.Marshal(q.MealColumnExpr)
	}
	if q.SleepScoreValueMacroExpr != nil {
		return json.Marshal(q.SleepScoreValueMacroExpr)
	}
	if q.ChronotypeValueMacroExpr != nil {
		return json.Marshal(q.ChronotypeValueMacroExpr)
	}
	if q.UnrecognizedValueMacroExpr != nil {
		return json.Marshal(q.UnrecognizedValueMacroExpr)
	}
	if q.DiscreteTimeseriesExpr != nil {
		return json.Marshal(q.DiscreteTimeseriesExpr)
	}
	if q.IntervalTimeseriesExpr != nil {
		return json.Marshal(q.IntervalTimeseriesExpr)
	}
	if q.BloodPressureTimeseriesExpr != nil {
		return json.Marshal(q.BloodPressureTimeseriesExpr)
	}
	if q.TemperatureTimeseriesExpr != nil {
		return json.Marshal(q.TemperatureTimeseriesExpr)
	}
	if q.WorkoutDurationTimeseriesExpr != nil {
		return json.Marshal(q.WorkoutDurationTimeseriesExpr)
	}
	if q.NoteTimeseriesExpr != nil {
		return json.Marshal(q.NoteTimeseriesExpr)
	}
	if q.IndexColumnExpr != nil {
		return json.Marshal(q.IndexColumnExpr)
	}
	if q.SourceColumnExpr != nil {
		return json.Marshal(q.SourceColumnExpr)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", q)
}

type QuerySelectItemVisitor interface {
	VisitAggregateExpr(*AggregateExpr) error
	VisitGroupKeyColumnExpr(*GroupKeyColumnExpr) error
	VisitSleepColumnExpr(*SleepColumnExpr) error
	VisitActivityColumnExpr(*ActivityColumnExpr) error
	VisitWorkoutColumnExpr(*WorkoutColumnExpr) error
	VisitBodyColumnExpr(*BodyColumnExpr) error
	VisitMealColumnExpr(*MealColumnExpr) error
	VisitSleepScoreValueMacroExpr(*SleepScoreValueMacroExpr) error
	VisitChronotypeValueMacroExpr(*ChronotypeValueMacroExpr) error
	VisitUnrecognizedValueMacroExpr(*UnrecognizedValueMacroExpr) error
	VisitDiscreteTimeseriesExpr(*DiscreteTimeseriesExpr) error
	VisitIntervalTimeseriesExpr(*IntervalTimeseriesExpr) error
	VisitBloodPressureTimeseriesExpr(*BloodPressureTimeseriesExpr) error
	VisitTemperatureTimeseriesExpr(*TemperatureTimeseriesExpr) error
	VisitWorkoutDurationTimeseriesExpr(*WorkoutDurationTimeseriesExpr) error
	VisitNoteTimeseriesExpr(*NoteTimeseriesExpr) error
	VisitIndexColumnExpr(*IndexColumnExpr) error
	VisitSourceColumnExpr(*SourceColumnExpr) error
}

func (q *QuerySelectItem) Accept(visitor QuerySelectItemVisitor) error {
	if q.AggregateExpr != nil {
		return visitor.VisitAggregateExpr(q.AggregateExpr)
	}
	if q.GroupKeyColumnExpr != nil {
		return visitor.VisitGroupKeyColumnExpr(q.GroupKeyColumnExpr)
	}
	if q.SleepColumnExpr != nil {
		return visitor.VisitSleepColumnExpr(q.SleepColumnExpr)
	}
	if q.ActivityColumnExpr != nil {
		return visitor.VisitActivityColumnExpr(q.ActivityColumnExpr)
	}
	if q.WorkoutColumnExpr != nil {
		return visitor.VisitWorkoutColumnExpr(q.WorkoutColumnExpr)
	}
	if q.BodyColumnExpr != nil {
		return visitor.VisitBodyColumnExpr(q.BodyColumnExpr)
	}
	if q.MealColumnExpr != nil {
		return visitor.VisitMealColumnExpr(q.MealColumnExpr)
	}
	if q.SleepScoreValueMacroExpr != nil {
		return visitor.VisitSleepScoreValueMacroExpr(q.SleepScoreValueMacroExpr)
	}
	if q.ChronotypeValueMacroExpr != nil {
		return visitor.VisitChronotypeValueMacroExpr(q.ChronotypeValueMacroExpr)
	}
	if q.UnrecognizedValueMacroExpr != nil {
		return visitor.VisitUnrecognizedValueMacroExpr(q.UnrecognizedValueMacroExpr)
	}
	if q.DiscreteTimeseriesExpr != nil {
		return visitor.VisitDiscreteTimeseriesExpr(q.DiscreteTimeseriesExpr)
	}
	if q.IntervalTimeseriesExpr != nil {
		return visitor.VisitIntervalTimeseriesExpr(q.IntervalTimeseriesExpr)
	}
	if q.BloodPressureTimeseriesExpr != nil {
		return visitor.VisitBloodPressureTimeseriesExpr(q.BloodPressureTimeseriesExpr)
	}
	if q.TemperatureTimeseriesExpr != nil {
		return visitor.VisitTemperatureTimeseriesExpr(q.TemperatureTimeseriesExpr)
	}
	if q.WorkoutDurationTimeseriesExpr != nil {
		return visitor.VisitWorkoutDurationTimeseriesExpr(q.WorkoutDurationTimeseriesExpr)
	}
	if q.NoteTimeseriesExpr != nil {
		return visitor.VisitNoteTimeseriesExpr(q.NoteTimeseriesExpr)
	}
	if q.IndexColumnExpr != nil {
		return visitor.VisitIndexColumnExpr(q.IndexColumnExpr)
	}
	if q.SourceColumnExpr != nil {
		return visitor.VisitSourceColumnExpr(q.SourceColumnExpr)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", q)
}

type RelativeTimeframe struct {
	Anchor string  `json:"anchor" url:"anchor"`
	Past   *Period `json:"past,omitempty" url:"past,omitempty"`
	type_  string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RelativeTimeframe) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RelativeTimeframe) Type() string {
	return r.type_
}

func (r *RelativeTimeframe) UnmarshalJSON(data []byte) error {
	type embed RelativeTimeframe
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RelativeTimeframe(unmarshaler.embed)
	if unmarshaler.Type != "relative" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "relative", unmarshaler.Type)
	}
	r.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *r, "type")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RelativeTimeframe) MarshalJSON() ([]byte, error) {
	type embed RelativeTimeframe
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*r),
		Type:  "relative",
	}
	return json.Marshal(marshaler)
}

func (r *RelativeTimeframe) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type Select string

const (
	SelectSelectAll Select = "*"
)

func NewSelectFromString(s string) (Select, error) {
	switch s {
	case "*":
		return SelectSelectAll, nil
	}
	var t Select
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Select) Ptr() *Select {
	return &s
}

type SleepColumnExpr struct {
	// ℹ️ This enum is non-exhaustive.
	Sleep SleepColumnExprSleep `json:"sleep" url:"sleep"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SleepColumnExpr) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SleepColumnExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler SleepColumnExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SleepColumnExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SleepColumnExpr) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// ℹ️ This enum is non-exhaustive.
type SleepColumnExprSleep string

const (
	SleepColumnExprSleepSessionStart         SleepColumnExprSleep = "session_start"
	SleepColumnExprSleepSessionEnd           SleepColumnExprSleep = "session_end"
	SleepColumnExprSleepState                SleepColumnExprSleep = "state"
	SleepColumnExprSleepType                 SleepColumnExprSleep = "type"
	SleepColumnExprSleepDurationSecond       SleepColumnExprSleep = "duration_second"
	SleepColumnExprSleepStageAsleepSecond    SleepColumnExprSleep = "stage_asleep_second"
	SleepColumnExprSleepStageAwakeSecond     SleepColumnExprSleep = "stage_awake_second"
	SleepColumnExprSleepStageLightSecond     SleepColumnExprSleep = "stage_light_second"
	SleepColumnExprSleepStageRemSecond       SleepColumnExprSleep = "stage_rem_second"
	SleepColumnExprSleepStageDeepSecond      SleepColumnExprSleep = "stage_deep_second"
	SleepColumnExprSleepStageUnknownSecond   SleepColumnExprSleep = "stage_unknown_second"
	SleepColumnExprSleepLatencySecond        SleepColumnExprSleep = "latency_second"
	SleepColumnExprSleepHeartRateMinimum     SleepColumnExprSleep = "heart_rate_minimum"
	SleepColumnExprSleepHeartRateMean        SleepColumnExprSleep = "heart_rate_mean"
	SleepColumnExprSleepHeartRateMaximum     SleepColumnExprSleep = "heart_rate_maximum"
	SleepColumnExprSleepHeartRateDip         SleepColumnExprSleep = "heart_rate_dip"
	SleepColumnExprSleepHeartRateResting     SleepColumnExprSleep = "heart_rate_resting"
	SleepColumnExprSleepEfficiency           SleepColumnExprSleep = "efficiency"
	SleepColumnExprSleepHrvMeanRmssd         SleepColumnExprSleep = "hrv_mean_rmssd"
	SleepColumnExprSleepHrvMeanSdnn          SleepColumnExprSleep = "hrv_mean_sdnn"
	SleepColumnExprSleepSkinTemperature      SleepColumnExprSleep = "skin_temperature"
	SleepColumnExprSleepSkinTemperatureDelta SleepColumnExprSleep = "skin_temperature_delta"
	SleepColumnExprSleepRespiratoryRate      SleepColumnExprSleep = "respiratory_rate"
	SleepColumnExprSleepScore                SleepColumnExprSleep = "score"
	SleepColumnExprSleepSourceType           SleepColumnExprSleep = "source_type"
	SleepColumnExprSleepSourceProvider       SleepColumnExprSleep = "source_provider"
	SleepColumnExprSleepSourceAppId          SleepColumnExprSleep = "source_app_id"
	SleepColumnExprSleepSourceDeviceId       SleepColumnExprSleep = "source_device_id"
	SleepColumnExprSleepTimeZone             SleepColumnExprSleep = "time_zone"
)

func NewSleepColumnExprSleepFromString(s string) (SleepColumnExprSleep, error) {
	switch s {
	case "session_start":
		return SleepColumnExprSleepSessionStart, nil
	case "session_end":
		return SleepColumnExprSleepSessionEnd, nil
	case "state":
		return SleepColumnExprSleepState, nil
	case "type":
		return SleepColumnExprSleepType, nil
	case "duration_second":
		return SleepColumnExprSleepDurationSecond, nil
	case "stage_asleep_second":
		return SleepColumnExprSleepStageAsleepSecond, nil
	case "stage_awake_second":
		return SleepColumnExprSleepStageAwakeSecond, nil
	case "stage_light_second":
		return SleepColumnExprSleepStageLightSecond, nil
	case "stage_rem_second":
		return SleepColumnExprSleepStageRemSecond, nil
	case "stage_deep_second":
		return SleepColumnExprSleepStageDeepSecond, nil
	case "stage_unknown_second":
		return SleepColumnExprSleepStageUnknownSecond, nil
	case "latency_second":
		return SleepColumnExprSleepLatencySecond, nil
	case "heart_rate_minimum":
		return SleepColumnExprSleepHeartRateMinimum, nil
	case "heart_rate_mean":
		return SleepColumnExprSleepHeartRateMean, nil
	case "heart_rate_maximum":
		return SleepColumnExprSleepHeartRateMaximum, nil
	case "heart_rate_dip":
		return SleepColumnExprSleepHeartRateDip, nil
	case "heart_rate_resting":
		return SleepColumnExprSleepHeartRateResting, nil
	case "efficiency":
		return SleepColumnExprSleepEfficiency, nil
	case "hrv_mean_rmssd":
		return SleepColumnExprSleepHrvMeanRmssd, nil
	case "hrv_mean_sdnn":
		return SleepColumnExprSleepHrvMeanSdnn, nil
	case "skin_temperature":
		return SleepColumnExprSleepSkinTemperature, nil
	case "skin_temperature_delta":
		return SleepColumnExprSleepSkinTemperatureDelta, nil
	case "respiratory_rate":
		return SleepColumnExprSleepRespiratoryRate, nil
	case "score":
		return SleepColumnExprSleepScore, nil
	case "source_type":
		return SleepColumnExprSleepSourceType, nil
	case "source_provider":
		return SleepColumnExprSleepSourceProvider, nil
	case "source_app_id":
		return SleepColumnExprSleepSourceAppId, nil
	case "source_device_id":
		return SleepColumnExprSleepSourceDeviceId, nil
	case "time_zone":
		return SleepColumnExprSleepTimeZone, nil
	}
	var t SleepColumnExprSleep
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SleepColumnExprSleep) Ptr() *SleepColumnExprSleep {
	return &s
}

type SleepScoreValueMacroExpr struct {
	Version    *string `json:"version,omitempty" url:"version,omitempty"`
	valueMacro string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SleepScoreValueMacroExpr) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SleepScoreValueMacroExpr) ValueMacro() string {
	return s.valueMacro
}

func (s *SleepScoreValueMacroExpr) UnmarshalJSON(data []byte) error {
	type embed SleepScoreValueMacroExpr
	var unmarshaler = struct {
		embed
		ValueMacro string `json:"value_macro"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SleepScoreValueMacroExpr(unmarshaler.embed)
	if unmarshaler.ValueMacro != "sleep_score" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "sleep_score", unmarshaler.ValueMacro)
	}
	s.valueMacro = unmarshaler.ValueMacro

	extraProperties, err := core.ExtractExtraProperties(data, *s, "value_macro")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SleepScoreValueMacroExpr) MarshalJSON() ([]byte, error) {
	type embed SleepScoreValueMacroExpr
	var marshaler = struct {
		embed
		ValueMacro string `json:"value_macro"`
	}{
		embed:      embed(*s),
		ValueMacro: "sleep_score",
	}
	return json.Marshal(marshaler)
}

func (s *SleepScoreValueMacroExpr) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceColumnExpr struct {
	Source SourceColumnExprSource `json:"source" url:"source"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SourceColumnExpr) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceColumnExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceColumnExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceColumnExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceColumnExpr) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceColumnExprSource string

const (
	SourceColumnExprSourceSourceProvider  SourceColumnExprSource = "source_provider"
	SourceColumnExprSourceSourceType      SourceColumnExprSource = "source_type"
	SourceColumnExprSourceSourceAppId     SourceColumnExprSource = "source_app_id"
	SourceColumnExprSourceSourceWorkoutId SourceColumnExprSource = "source_workout_id"
	SourceColumnExprSourceSourceSport     SourceColumnExprSource = "source_sport"
)

func NewSourceColumnExprSourceFromString(s string) (SourceColumnExprSource, error) {
	switch s {
	case "source_provider":
		return SourceColumnExprSourceSourceProvider, nil
	case "source_type":
		return SourceColumnExprSourceSourceType, nil
	case "source_app_id":
		return SourceColumnExprSourceSourceAppId, nil
	case "source_workout_id":
		return SourceColumnExprSourceSourceWorkoutId, nil
	case "source_sport":
		return SourceColumnExprSourceSourceSport, nil
	}
	var t SourceColumnExprSource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SourceColumnExprSource) Ptr() *SourceColumnExprSource {
	return &s
}

type TemperatureTimeseriesExpr struct {
	// ℹ️ This enum is non-exhaustive.
	Timeseries TemperatureTimeseriesExprTimeseries `json:"timeseries" url:"timeseries"`
	Field      TemperatureTimeseriesExprField      `json:"field" url:"field"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemperatureTimeseriesExpr) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemperatureTimeseriesExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler TemperatureTimeseriesExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemperatureTimeseriesExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemperatureTimeseriesExpr) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemperatureTimeseriesExprField string

const (
	TemperatureTimeseriesExprFieldSourceProvider  TemperatureTimeseriesExprField = "source_provider"
	TemperatureTimeseriesExprFieldSourceType      TemperatureTimeseriesExprField = "source_type"
	TemperatureTimeseriesExprFieldSourceAppId     TemperatureTimeseriesExprField = "source_app_id"
	TemperatureTimeseriesExprFieldSourceWorkoutId TemperatureTimeseriesExprField = "source_workout_id"
	TemperatureTimeseriesExprFieldSourceSport     TemperatureTimeseriesExprField = "source_sport"
	TemperatureTimeseriesExprFieldTimezoneOffset  TemperatureTimeseriesExprField = "timezone_offset"
	TemperatureTimeseriesExprFieldType            TemperatureTimeseriesExprField = "type"
	TemperatureTimeseriesExprFieldDuration        TemperatureTimeseriesExprField = "duration"
	TemperatureTimeseriesExprFieldValue           TemperatureTimeseriesExprField = "value"
	TemperatureTimeseriesExprFieldSensorLocation  TemperatureTimeseriesExprField = "sensor_location"
)

func NewTemperatureTimeseriesExprFieldFromString(s string) (TemperatureTimeseriesExprField, error) {
	switch s {
	case "source_provider":
		return TemperatureTimeseriesExprFieldSourceProvider, nil
	case "source_type":
		return TemperatureTimeseriesExprFieldSourceType, nil
	case "source_app_id":
		return TemperatureTimeseriesExprFieldSourceAppId, nil
	case "source_workout_id":
		return TemperatureTimeseriesExprFieldSourceWorkoutId, nil
	case "source_sport":
		return TemperatureTimeseriesExprFieldSourceSport, nil
	case "timezone_offset":
		return TemperatureTimeseriesExprFieldTimezoneOffset, nil
	case "type":
		return TemperatureTimeseriesExprFieldType, nil
	case "duration":
		return TemperatureTimeseriesExprFieldDuration, nil
	case "value":
		return TemperatureTimeseriesExprFieldValue, nil
	case "sensor_location":
		return TemperatureTimeseriesExprFieldSensorLocation, nil
	}
	var t TemperatureTimeseriesExprField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TemperatureTimeseriesExprField) Ptr() *TemperatureTimeseriesExprField {
	return &t
}

// ℹ️ This enum is non-exhaustive.
type TemperatureTimeseriesExprTimeseries string

const (
	TemperatureTimeseriesExprTimeseriesBodyTemperature      TemperatureTimeseriesExprTimeseries = "body_temperature"
	TemperatureTimeseriesExprTimeseriesBodyTemperatureDelta TemperatureTimeseriesExprTimeseries = "body_temperature_delta"
)

func NewTemperatureTimeseriesExprTimeseriesFromString(s string) (TemperatureTimeseriesExprTimeseries, error) {
	switch s {
	case "body_temperature":
		return TemperatureTimeseriesExprTimeseriesBodyTemperature, nil
	case "body_temperature_delta":
		return TemperatureTimeseriesExprTimeseriesBodyTemperatureDelta, nil
	}
	var t TemperatureTimeseriesExprTimeseries
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TemperatureTimeseriesExprTimeseries) Ptr() *TemperatureTimeseriesExprTimeseries {
	return &t
}

type UnrecognizedValueMacroExpr struct {
	ValueMacro string `json:"value_macro" url:"value_macro"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UnrecognizedValueMacroExpr) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UnrecognizedValueMacroExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler UnrecognizedValueMacroExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnrecognizedValueMacroExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnrecognizedValueMacroExpr) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type WorkoutColumnExpr struct {
	// ℹ️ This enum is non-exhaustive.
	Workout WorkoutColumnExprWorkout `json:"workout" url:"workout"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkoutColumnExpr) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkoutColumnExpr) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkoutColumnExpr
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkoutColumnExpr(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkoutColumnExpr) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// ℹ️ This enum is non-exhaustive.
type WorkoutColumnExprWorkout string

const (
	WorkoutColumnExprWorkoutSessionStart          WorkoutColumnExprWorkout = "session_start"
	WorkoutColumnExprWorkoutSessionEnd            WorkoutColumnExprWorkout = "session_end"
	WorkoutColumnExprWorkoutTitle                 WorkoutColumnExprWorkout = "title"
	WorkoutColumnExprWorkoutSportName             WorkoutColumnExprWorkout = "sport_name"
	WorkoutColumnExprWorkoutSportSlug             WorkoutColumnExprWorkout = "sport_slug"
	WorkoutColumnExprWorkoutDurationActiveSecond  WorkoutColumnExprWorkout = "duration_active_second"
	WorkoutColumnExprWorkoutHeartRateMean         WorkoutColumnExprWorkout = "heart_rate_mean"
	WorkoutColumnExprWorkoutHeartRateMinimum      WorkoutColumnExprWorkout = "heart_rate_minimum"
	WorkoutColumnExprWorkoutHeartRateMaximum      WorkoutColumnExprWorkout = "heart_rate_maximum"
	WorkoutColumnExprWorkoutHeartRateZone1        WorkoutColumnExprWorkout = "heart_rate_zone_1"
	WorkoutColumnExprWorkoutHeartRateZone2        WorkoutColumnExprWorkout = "heart_rate_zone_2"
	WorkoutColumnExprWorkoutHeartRateZone3        WorkoutColumnExprWorkout = "heart_rate_zone_3"
	WorkoutColumnExprWorkoutHeartRateZone4        WorkoutColumnExprWorkout = "heart_rate_zone_4"
	WorkoutColumnExprWorkoutHeartRateZone5        WorkoutColumnExprWorkout = "heart_rate_zone_5"
	WorkoutColumnExprWorkoutHeartRateZone6        WorkoutColumnExprWorkout = "heart_rate_zone_6"
	WorkoutColumnExprWorkoutDistanceMeter         WorkoutColumnExprWorkout = "distance_meter"
	WorkoutColumnExprWorkoutCalories              WorkoutColumnExprWorkout = "calories"
	WorkoutColumnExprWorkoutElevationGainMeter    WorkoutColumnExprWorkout = "elevation_gain_meter"
	WorkoutColumnExprWorkoutElevationMaximumMeter WorkoutColumnExprWorkout = "elevation_maximum_meter"
	WorkoutColumnExprWorkoutElevationMinimumMeter WorkoutColumnExprWorkout = "elevation_minimum_meter"
	WorkoutColumnExprWorkoutSpeedMean             WorkoutColumnExprWorkout = "speed_mean"
	WorkoutColumnExprWorkoutSpeedMaximum          WorkoutColumnExprWorkout = "speed_maximum"
	WorkoutColumnExprWorkoutPowerSource           WorkoutColumnExprWorkout = "power_source"
	WorkoutColumnExprWorkoutPowerMean             WorkoutColumnExprWorkout = "power_mean"
	WorkoutColumnExprWorkoutPowerMaximum          WorkoutColumnExprWorkout = "power_maximum"
	WorkoutColumnExprWorkoutPowerWeightedMean     WorkoutColumnExprWorkout = "power_weighted_mean"
	WorkoutColumnExprWorkoutSteps                 WorkoutColumnExprWorkout = "steps"
	WorkoutColumnExprWorkoutMapPolyline           WorkoutColumnExprWorkout = "map_polyline"
	WorkoutColumnExprWorkoutMapSummaryPolyline    WorkoutColumnExprWorkout = "map_summary_polyline"
	WorkoutColumnExprWorkoutSourceType            WorkoutColumnExprWorkout = "source_type"
	WorkoutColumnExprWorkoutSourceProvider        WorkoutColumnExprWorkout = "source_provider"
	WorkoutColumnExprWorkoutSourceAppId           WorkoutColumnExprWorkout = "source_app_id"
	WorkoutColumnExprWorkoutSourceDeviceId        WorkoutColumnExprWorkout = "source_device_id"
	WorkoutColumnExprWorkoutExternalId            WorkoutColumnExprWorkout = "external_id"
	WorkoutColumnExprWorkoutTimeZone              WorkoutColumnExprWorkout = "time_zone"
)

func NewWorkoutColumnExprWorkoutFromString(s string) (WorkoutColumnExprWorkout, error) {
	switch s {
	case "session_start":
		return WorkoutColumnExprWorkoutSessionStart, nil
	case "session_end":
		return WorkoutColumnExprWorkoutSessionEnd, nil
	case "title":
		return WorkoutColumnExprWorkoutTitle, nil
	case "sport_name":
		return WorkoutColumnExprWorkoutSportName, nil
	case "sport_slug":
		return WorkoutColumnExprWorkoutSportSlug, nil
	case "duration_active_second":
		return WorkoutColumnExprWorkoutDurationActiveSecond, nil
	case "heart_rate_mean":
		return WorkoutColumnExprWorkoutHeartRateMean, nil
	case "heart_rate_minimum":
		return WorkoutColumnExprWorkoutHeartRateMinimum, nil
	case "heart_rate_maximum":
		return WorkoutColumnExprWorkoutHeartRateMaximum, nil
	case "heart_rate_zone_1":
		return WorkoutColumnExprWorkoutHeartRateZone1, nil
	case "heart_rate_zone_2":
		return WorkoutColumnExprWorkoutHeartRateZone2, nil
	case "heart_rate_zone_3":
		return WorkoutColumnExprWorkoutHeartRateZone3, nil
	case "heart_rate_zone_4":
		return WorkoutColumnExprWorkoutHeartRateZone4, nil
	case "heart_rate_zone_5":
		return WorkoutColumnExprWorkoutHeartRateZone5, nil
	case "heart_rate_zone_6":
		return WorkoutColumnExprWorkoutHeartRateZone6, nil
	case "distance_meter":
		return WorkoutColumnExprWorkoutDistanceMeter, nil
	case "calories":
		return WorkoutColumnExprWorkoutCalories, nil
	case "elevation_gain_meter":
		return WorkoutColumnExprWorkoutElevationGainMeter, nil
	case "elevation_maximum_meter":
		return WorkoutColumnExprWorkoutElevationMaximumMeter, nil
	case "elevation_minimum_meter":
		return WorkoutColumnExprWorkoutElevationMinimumMeter, nil
	case "speed_mean":
		return WorkoutColumnExprWorkoutSpeedMean, nil
	case "speed_maximum":
		return WorkoutColumnExprWorkoutSpeedMaximum, nil
	case "power_source":
		return WorkoutColumnExprWorkoutPowerSource, nil
	case "power_mean":
		return WorkoutColumnExprWorkoutPowerMean, nil
	case "power_maximum":
		return WorkoutColumnExprWorkoutPowerMaximum, nil
	case "power_weighted_mean":
		return WorkoutColumnExprWorkoutPowerWeightedMean, nil
	case "steps":
		return WorkoutColumnExprWorkoutSteps, nil
	case "map_polyline":
		return WorkoutColumnExprWorkoutMapPolyline, nil
	case "map_summary_polyline":
		return WorkoutColumnExprWorkoutMapSummaryPolyline, nil
	case "source_type":
		return WorkoutColumnExprWorkoutSourceType, nil
	case "source_provider":
		return WorkoutColumnExprWorkoutSourceProvider, nil
	case "source_app_id":
		return WorkoutColumnExprWorkoutSourceAppId, nil
	case "source_device_id":
		return WorkoutColumnExprWorkoutSourceDeviceId, nil
	case "external_id":
		return WorkoutColumnExprWorkoutExternalId, nil
	case "time_zone":
		return WorkoutColumnExprWorkoutTimeZone, nil
	}
	var t WorkoutColumnExprWorkout
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkoutColumnExprWorkout) Ptr() *WorkoutColumnExprWorkout {
	return &w
}

type WorkoutDurationTimeseriesExpr struct {
	Field      WorkoutDurationTimeseriesExprField `json:"field" url:"field"`
	timeseries string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WorkoutDurationTimeseriesExpr) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WorkoutDurationTimeseriesExpr) Timeseries() string {
	return w.timeseries
}

func (w *WorkoutDurationTimeseriesExpr) UnmarshalJSON(data []byte) error {
	type embed WorkoutDurationTimeseriesExpr
	var unmarshaler = struct {
		embed
		Timeseries string `json:"timeseries"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkoutDurationTimeseriesExpr(unmarshaler.embed)
	if unmarshaler.Timeseries != "workout_duration" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "workout_duration", unmarshaler.Timeseries)
	}
	w.timeseries = unmarshaler.Timeseries

	extraProperties, err := core.ExtractExtraProperties(data, *w, "timeseries")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkoutDurationTimeseriesExpr) MarshalJSON() ([]byte, error) {
	type embed WorkoutDurationTimeseriesExpr
	var marshaler = struct {
		embed
		Timeseries string `json:"timeseries"`
	}{
		embed:      embed(*w),
		Timeseries: "workout_duration",
	}
	return json.Marshal(marshaler)
}

func (w *WorkoutDurationTimeseriesExpr) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkoutDurationTimeseriesExprField string

const (
	WorkoutDurationTimeseriesExprFieldSourceProvider  WorkoutDurationTimeseriesExprField = "source_provider"
	WorkoutDurationTimeseriesExprFieldSourceType      WorkoutDurationTimeseriesExprField = "source_type"
	WorkoutDurationTimeseriesExprFieldSourceAppId     WorkoutDurationTimeseriesExprField = "source_app_id"
	WorkoutDurationTimeseriesExprFieldSourceWorkoutId WorkoutDurationTimeseriesExprField = "source_workout_id"
	WorkoutDurationTimeseriesExprFieldSourceSport     WorkoutDurationTimeseriesExprField = "source_sport"
	WorkoutDurationTimeseriesExprFieldTimezoneOffset  WorkoutDurationTimeseriesExprField = "timezone_offset"
	WorkoutDurationTimeseriesExprFieldType            WorkoutDurationTimeseriesExprField = "type"
	WorkoutDurationTimeseriesExprFieldDuration        WorkoutDurationTimeseriesExprField = "duration"
	WorkoutDurationTimeseriesExprFieldValue           WorkoutDurationTimeseriesExprField = "value"
	WorkoutDurationTimeseriesExprFieldIntensity       WorkoutDurationTimeseriesExprField = "intensity"
)

func NewWorkoutDurationTimeseriesExprFieldFromString(s string) (WorkoutDurationTimeseriesExprField, error) {
	switch s {
	case "source_provider":
		return WorkoutDurationTimeseriesExprFieldSourceProvider, nil
	case "source_type":
		return WorkoutDurationTimeseriesExprFieldSourceType, nil
	case "source_app_id":
		return WorkoutDurationTimeseriesExprFieldSourceAppId, nil
	case "source_workout_id":
		return WorkoutDurationTimeseriesExprFieldSourceWorkoutId, nil
	case "source_sport":
		return WorkoutDurationTimeseriesExprFieldSourceSport, nil
	case "timezone_offset":
		return WorkoutDurationTimeseriesExprFieldTimezoneOffset, nil
	case "type":
		return WorkoutDurationTimeseriesExprFieldType, nil
	case "duration":
		return WorkoutDurationTimeseriesExprFieldDuration, nil
	case "value":
		return WorkoutDurationTimeseriesExprFieldValue, nil
	case "intensity":
		return WorkoutDurationTimeseriesExprFieldIntensity, nil
	}
	var t WorkoutDurationTimeseriesExprField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkoutDurationTimeseriesExprField) Ptr() *WorkoutDurationTimeseriesExprField {
	return &w
}

type QueryBatchTimeframe struct {
	RelativeTimeframe *RelativeTimeframe
	Placeholder       *Placeholder
}

func NewQueryBatchTimeframeFromRelativeTimeframe(value *RelativeTimeframe) *QueryBatchTimeframe {
	return &QueryBatchTimeframe{RelativeTimeframe: value}
}

func NewQueryBatchTimeframeFromPlaceholder(value *Placeholder) *QueryBatchTimeframe {
	return &QueryBatchTimeframe{Placeholder: value}
}

func (q *QueryBatchTimeframe) UnmarshalJSON(data []byte) error {
	valueRelativeTimeframe := new(RelativeTimeframe)
	if err := json.Unmarshal(data, &valueRelativeTimeframe); err == nil {
		q.RelativeTimeframe = valueRelativeTimeframe
		return nil
	}
	valuePlaceholder := new(Placeholder)
	if err := json.Unmarshal(data, &valuePlaceholder); err == nil {
		q.Placeholder = valuePlaceholder
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, q)
}

func (q QueryBatchTimeframe) MarshalJSON() ([]byte, error) {
	if q.RelativeTimeframe != nil {
		return json.Marshal(q.RelativeTimeframe)
	}
	if q.Placeholder != nil {
		return json.Marshal(q.Placeholder)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", q)
}

type QueryBatchTimeframeVisitor interface {
	VisitRelativeTimeframe(*RelativeTimeframe) error
	VisitPlaceholder(*Placeholder) error
}

func (q *QueryBatchTimeframe) Accept(visitor QueryBatchTimeframeVisitor) error {
	if q.RelativeTimeframe != nil {
		return visitor.VisitRelativeTimeframe(q.RelativeTimeframe)
	}
	if q.Placeholder != nil {
		return visitor.VisitPlaceholder(q.Placeholder)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", q)
}
