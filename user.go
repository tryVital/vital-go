// This file was auto-generated by Fern from our API Definition.

package api

type UserCreateBody struct {
	// A unique ID representing the end user. Typically this will be a user ID from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id.
	ClientUserId string `json:"client_user_id"`
	// Fallback time zone of the user, in the form of a valid IANA tzdatabase identifier (e.g., `Europe/London` or `America/Los_Angeles`).
	// Used when pulling data from sources that are completely time zone agnostic (e.g., all time is relative to UTC clock, without any time zone attributions on data points).
	FallbackTimeZone *string `json:"fallback_time_zone,omitempty"`
	// Fallback date of birth of the user, in YYYY-mm-dd format. Used for calculating max heartrate for providers that don not provide users' age.
	FallbackBirthDate *string `json:"fallback_birth_date,omitempty"`
	// Starting bound for user data ingestion. Data older than this date will not be ingested.
	IngestionStart *string `json:"ingestion_start,omitempty"`
	// Ending bound for user data ingestion. Data from this date or later will not be ingested and the connection will be deregistered.
	IngestionEnd *string `json:"ingestion_end,omitempty"`
}

type UserGetAllRequest struct {
	Offset *int `json:"-"`
	Limit  *int `json:"-"`
}

type UserPatchBody struct {
	// Fallback time zone of the user, in the form of a valid IANA tzdatabase identifier (e.g., `Europe/London` or `America/Los_Angeles`).
	// Used when pulling data from sources that are completely time zone agnostic (e.g., all time is relative to UTC clock, without any time zone attributions on data points).
	FallbackTimeZone *string `json:"fallback_time_zone,omitempty"`
	// Fallback date of birth of the user, in YYYY-mm-dd format. Used for calculating max heartrate for providers that don not provide users' age.
	FallbackBirthDate *string `json:"fallback_birth_date,omitempty"`
	// Starting bound for user data ingestion. Data older than this date will not be ingested.
	IngestionStart *string `json:"ingestion_start,omitempty"`
	// Ending bound for user data ingestion. Data from this date or later will not be ingested and the connection will be deregistered.
	IngestionEnd *string `json:"ingestion_end,omitempty"`
}

type UserRefreshRequest struct {
	Timeout *float64 `json:"-"`
}

type UserUndoDeleteRequest struct {
	// User ID to undo deletion. Mutually exclusive with `client_user_id`.
	UserId *string `json:"-"`
	// Client User ID to undo deletion. Mutually exclusive with `user_id`.
	ClientUserId *string `json:"-"`
}
