// This file was auto-generated by Fern from our API Definition.

package link

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	vitalgo "github.com/tryVital/vital-go"
	core "github.com/tryVital/vital-go/core"
	io "io"
	http "net/http"
	url "net/url"
	time "time"
)

type Client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

// Endpoint to generate a user link token, to be used throughout the vital
// link process. The vital link token is a one time use token, that
// expires after 10 minutes. If you would like vital-link widget to launch
// with a specific provider, pass in a provider in the body. If you would
// like to redirect to a custom url after successful or error connection,
// pass in your own custom redirect_url parameter.
func (c *Client) Token(ctx context.Context, request *vitalgo.LinkTokenExchange) (*vitalgo.LinkTokenExchangeResponse, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/link/token"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.LinkTokenExchangeResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) IsTokenValid(ctx context.Context, request *vitalgo.LinkTokenBase) (map[string]interface{}, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/link/token/isValid"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response map[string]interface{}
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Generate a token to invite a user of Vital mobile app to your team
func (c *Client) CodeCreate(ctx context.Context, request *vitalgo.LinkCodeCreateRequest) (*vitalgo.VitalTokenCreatedResponse, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/link/code/create"

	queryParams := make(url.Values)
	queryParams.Add("user_id", fmt.Sprintf("%v", request.UserId))
	if request.ExpiresAt != nil {
		queryParams.Add("expires_at", fmt.Sprintf("%v", request.ExpiresAt.Format(time.RFC3339)))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.VitalTokenCreatedResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		nil,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// REQUEST_SOURCE: VITAL-LINK
// PROVIDER_TYPE: OAUTH
// Connect oauth providers
//
// Provider slug. e.g., `oura`, `fitbit`, `garmin`.
func (c *Client) ConnectOauthProvider(ctx context.Context, provider string, request *vitalgo.LinkConnectOauthProviderRequest) (map[string]interface{}, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v2/link/connect/%v", provider)

	headers := c.header.Clone()
	if request.VitalSdkNoRedirect != nil {
		headers.Add("x-vital-sdk-no-redirect", fmt.Sprintf("%v", *request.VitalSdkNoRedirect))
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response map[string]interface{}
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		headers,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// REQUEST_SOURCE: VITAL-LINK
// Start link token process
func (c *Client) StartConnect(ctx context.Context, request *vitalgo.BeginLinkTokenRequest) (map[string]interface{}, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/link/start"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response map[string]interface{}
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// REQUEST_SOURCE: VITAL-LINK
// Check link token state - can be hit continuously used as heartbeat
func (c *Client) TokenState(ctx context.Context) (map[string]interface{}, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/link/state"

	var response map[string]interface{}
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// REQUEST_SOURCE: VITAL-LINK
// PROVIDER_TYPE: EMAIL-AUTH
// This function is hit by vital-link to authenticate a email provider.
func (c *Client) EmailAuth(ctx context.Context, request *vitalgo.EmailAuthLink) (*vitalgo.ConnectionStatus, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/link/auth/email"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.ConnectionStatus
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// REQUEST_SOURCE: VITAL-LINK
// PROVIDER_TYPE: PASSWORD-AUTH
// This function is hit by vital-link to authenticate a password provider.
func (c *Client) PasswordAuth(ctx context.Context, request *vitalgo.PasswordAuthLink) (*vitalgo.ConnectionStatus, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/link/auth"

	headers := c.header.Clone()
	if request.VitalLinkClientRegion != nil {
		headers.Add("x-vital-link-client-region", fmt.Sprintf("%v", *request.VitalLinkClientRegion))
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.ConnectionStatus
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		headers,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// This endpoint generates an OAuth link for oauth provider
func (c *Client) GenerateOauthLink(ctx context.Context, oauthProvider vitalgo.OAuthProviders) (*vitalgo.Source, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v2/link/provider/oauth/%v", oauthProvider)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.Source
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// This connects auth providers that are password based.
func (c *Client) ConnectPasswordProvider(ctx context.Context, provider vitalgo.PasswordProviders, request *vitalgo.IndividualProviderData) (*vitalgo.ProviderLinkResponse, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v2/link/provider/password/%v", provider)

	headers := c.header.Clone()
	if request.VitalLinkClientRegion != nil {
		headers.Add("x-vital-link-client-region", fmt.Sprintf("%v", *request.VitalLinkClientRegion))
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.ProviderLinkResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		headers,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// This connects auth providers that are email based.
func (c *Client) ConnectEmailAuthProvider(ctx context.Context, provider vitalgo.EmailProviders, request *vitalgo.EmailProviderAuthLink) (*vitalgo.ConnectionStatus, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v2/link/provider/email/%v", provider)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.ConnectionStatus
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// GET List of all available providers given the generated link token.
func (c *Client) GetProviders(ctx context.Context) ([]*vitalgo.SourceLink, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/link/providers"

	var response []*vitalgo.SourceLink
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// REQUEST_SOURCE: CUSTOMER
// PROVIDER_TYPE: MANUAL-PROVIDER
// This connects auth providers that are password based.
func (c *Client) ConnectManualProvider(ctx context.Context, provider vitalgo.ManualProviders, request *vitalgo.ManualConnectionData) (map[string]bool, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v2/link/provider/manual/%v", provider)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response map[string]bool
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

// POST Connect the given Vital user to a demo provider.
func (c *Client) ConnectDemoProvider(ctx context.Context, request *vitalgo.DemoConnectionCreationPayload) (*vitalgo.DemoConnectionStatus, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/link/connect/demo"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.DemoConnectionStatus
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}
