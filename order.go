// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/tryVital/vital-go/internal"
	time "time"
)

type ResendWebhookBody struct {
	OrderIds []string   `json:"order_ids,omitempty" url:"-"`
	StartAt  *time.Time `json:"start_at,omitempty" url:"-"`
	EndAt    *time.Time `json:"end_at,omitempty" url:"-"`
}

func (r *ResendWebhookBody) UnmarshalJSON(data []byte) error {
	type unmarshaler ResendWebhookBody
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*r = ResendWebhookBody(body)
	return nil
}

func (r *ResendWebhookBody) MarshalJSON() ([]byte, error) {
	type embed ResendWebhookBody
	var marshaler = struct {
		embed
		StartAt *internal.DateTime `json:"start_at,omitempty"`
		EndAt   *internal.DateTime `json:"end_at,omitempty"`
	}{
		embed:   embed(*r),
		StartAt: internal.NewOptionalDateTime(r.StartAt),
		EndAt:   internal.NewOptionalDateTime(r.EndAt),
	}
	return json.Marshal(marshaler)
}

type ResendWebhookResponse struct {
	OrderIds []string `json:"order_ids" url:"order_ids"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResendWebhookResponse) GetOrderIds() []string {
	if r == nil {
		return nil
	}
	return r.OrderIds
}

func (r *ResendWebhookResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResendWebhookResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ResendWebhookResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResendWebhookResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResendWebhookResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
