// This file was auto-generated by Fern from our API Definition.

package introspect

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	vitalgo "github.com/tryVital/vital-go"
	core "github.com/tryVital/vital-go/core"
	io "io"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

func (c *Client) GetUserResources(ctx context.Context, request *vitalgo.IntrospectGetUserResourcesRequest) (*vitalgo.UserResourcesResponse, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/introspect/resources"

	queryParams := make(url.Values)
	if request.UserId != nil {
		queryParams.Add("user_id", fmt.Sprintf("%v", *request.UserId))
	}
	if request.Provider != nil {
		queryParams.Add("provider", fmt.Sprintf("%v", *request.Provider))
	}
	if request.UserLimit != nil {
		queryParams.Add("user_limit", fmt.Sprintf("%v", *request.UserLimit))
	}
	if request.Cursor != nil {
		queryParams.Add("cursor", fmt.Sprintf("%v", *request.Cursor))
	}
	if request.NextCursor != nil {
		queryParams.Add("next_cursor", fmt.Sprintf("%v", *request.NextCursor))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.UserResourcesResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) GetUserHistoricalPulls(ctx context.Context, request *vitalgo.IntrospectGetUserHistoricalPullsRequest) (*vitalgo.UserHistoricalPullsResponse, error) {
	baseURL := "https://api.tryvital.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "v2/introspect/historical_pull"

	queryParams := make(url.Values)
	if request.UserId != nil {
		queryParams.Add("user_id", fmt.Sprintf("%v", *request.UserId))
	}
	if request.Provider != nil {
		queryParams.Add("provider", fmt.Sprintf("%v", *request.Provider))
	}
	if request.UserLimit != nil {
		queryParams.Add("user_limit", fmt.Sprintf("%v", *request.UserLimit))
	}
	if request.Cursor != nil {
		queryParams.Add("cursor", fmt.Sprintf("%v", *request.Cursor))
	}
	if request.NextCursor != nil {
		queryParams.Add("next_cursor", fmt.Sprintf("%v", *request.NextCursor))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(vitalgo.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vitalgo.UserHistoricalPullsResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return nil, err
	}
	return response, nil
}
